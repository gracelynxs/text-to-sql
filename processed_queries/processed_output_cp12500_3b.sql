SELECT count(*) FROM club	soccer_3;
SELECT count(*) FROM club	soccer_3;
SELECT Name FROM club ORDER BY Name ASC	soccer_3;
SELECT Name FROM club ORDER BY Name ASC	soccer_3;
SELECT Manager, Captain FROM club	soccer_3;
SELECT Manager, Captain FROM club	soccer_3;
SELECT Name FROM club WHERE Manufacturer!= "Nike"	soccer_3;
SELECT Name FROM club WHERE Manufacturer!= "Nike"	soccer_3;
SELECT Name FROM player ORDER BY Wins_count ASC	soccer_3;
SELECT Name FROM player ORDER BY Wins_count ASC	soccer_3;
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1	soccer_3;
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1	soccer_3;
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000	soccer_3;
SELECT Country FROM player WHERE Earnings > 1200000	soccer_3;
SELECT Earnings FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1	soccer_3;
SELECT T1.Country FROM player AS T1 JOIN player AS T2 ON T1.Player_ID = T2.Player_ID WHERE T2.Wins_count > 2 ORDER BY T1.Earnings DESC LIMIT 1	soccer_3;
SELECT T1.Name, T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID	soccer_3;
SELECT T1.Name, T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID	soccer_3;
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T2.Club_ID HAVING COUNT(*) > 2	soccer_3;
SELECT T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Club_ID HAVING COUNT(*) > 2	soccer_3;
SELECT T3.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID JOIN manager AS T3 ON T1.Manager = T3.Sam Allardyce	soccer_3;
SELECT T3.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T1.Manager = "Sam Allardyce"	soccer_3;
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T2.Club_ID ORDER BY avg(T2.Earnings) DESC	soccer_3;
SELECT T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T1.Earnings) DESC	soccer_3;
SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer	soccer_3;
SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer	soccer_3;
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1	soccer_3;
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1	soccer_3;
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1	soccer_3;
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1	soccer_3;
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1	soccer_3;
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1	soccer_3;
SELECT Name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)	soccer_3;
SELECT Name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)	soccer_3;
SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings  1100000	soccer_3;
SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings  1100000	soccer_3;
SELECT count(DISTINCT Country) FROM player	soccer_3;
SELECT COUNT(DISTINCT Country) FROM player	soccer_3;
SELECT Earnings FROM player WHERE Country = "Australia" OR Country = "Zimbabwe"	soccer_3;
SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'	soccer_3;
SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2 INTERSECT SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name	e_commerce;
SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2 INTERSECT SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id	e_commerce;
SELECT order_id, order_status, count(DISTINCT product_id) FROM orders WHERE product_id!= "null" GROUP BY order_id	e_commerce;
SELECT count(*), T1.order_status, T1.order_id FROM orders AS T1 JOIN products AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id	e_commerce;
SELECT order_date FROM orders ORDER BY order_date ASC LIMIT 1;	e_commerce;
SELECT order_date FROM orders ORDER BY order_date LIMIT 1 INTERSECT SELECT order_date FROM orders WHERE order_item_count > 1	e_commerce;
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM customers EXCEPT SELECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id	e_commerce;
SELECT customer_first_name, customer_last_name, customer_middle_initial FROM customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_middle_initial FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id	e_commerce;
SELECT product_id, product_name, product_price, product_color FROM products EXCEPT SELECT T1.product_id, T1.product_name, T1.product_price, T1.product_color FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING count(*) >= 2	e_commerce;
SELECT T1.product_id, T1.product_name, T1.product_price, T1.product_color FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING count(*)  2	e_commerce;
SELECT T1.order_id, T1.date FROM orders AS T1 JOIN products AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING count(*) >= 2	e_commerce;
SELECT T1.order_id, T1.date FROM order AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id GROUP BY T1.order_id HAVING count(*) >= 2	e_commerce;
SELECT T1.product_id, T1.product_name, T1.product_price FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1	e_commerce;
SELECT T1.product_id, T1.product_name, T1.product_price FROM products AS T1 JOIN ORDER BY count(*) DESC LIMIT 1	e_commerce;
SELECT order_id, sum(product_price) FROM orders GROUP BY order_id ORDER BY sum(product_price) ASC LIMIT 1	e_commerce;
SELECT order_id, sum(total_cost) FROM orders GROUP BY order_id ORDER BY sum(total_cost) ASC LIMIT 1	e_commerce;
SELECT payment_method FROM invoices GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1	e_commerce;
SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1	e_commerce;
SELECT gender_code, count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.gender_code	e_commerce;
SELECT gender_code, count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.gender_code	e_commerce;
SELECT T1.gender_code, count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.gender_code	e_commerce;
SELECT T2.gender_code, count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.gender_code	e_commerce;
SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_methods FROM Customers	e_commerce;
SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method FROM Customers	e_commerce;
SELECT invoice_status, invoice_date, invoice_date FROM invoices JOIN shipments AS T1 ON T1.product_id = T2.product_id	e_commerce;
SELECT invoice_status_code, invoice_date, invoice_shipping_date FROM invoices	e_commerce;
SELECT T2.product_name, T1.shipping_date FROM shipments AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id	e_commerce;
SELECT T2.product_name, T1.shipping_date FROM UPS AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id	e_commerce;
SELECT order_status_code, shipment_tracking_number FROM ORDER_ITEMS AS T1 JOIN shipments AS T2 ON T1.product_id = T2.product_id	e_commerce;
SELECT order_status_code, shipment_tracking_number FROM order_items WHERE shipment_status_code = "Ordered" AND shipment_date = "Shipped"	e_commerce;
SELECT T2.product_name, T2.product_color FROM order_items AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.shipping_date > (SELECT T1.shipping_date FROM order_items AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id)	e_commerce;
SELECT T1.product_name, T1.product_color FROM products AS T1 JOIN UPS AS T2 ON T1.product_id = T2.product_id WHERE T2.shipping_date >= 1	e_commerce;
SELECT DISTINCT T3.product_name, T3.product_price, T3.product_description FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T1.gender_code = "Female"	e_commerce;
SELECT DISTINCT T3.product_name, T3.product_price, T3.product_description FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T1.gender_code = "Female"	e_commerce;
SELECT invoice_status FROM invoices WHERE order_id NOT IN (SELECT order_id FROM order_items)	e_commerce;
SELECT order_status FROM invoices WHERE order_id NOT IN (SELECT order_id FROM order_items WHERE shipping_date!= "shipped")	e_commerce;
SELECT order_id, order_date, sum(total) FROM orders	e_commerce;
SELECT order_id, payment_date, sum(amount) FROM invoices GROUP BY order_id	e_commerce;
SELECT count(DISTINCT customer_id) FROM customers WHERE customer_id IN (SELECT customer_id FROM customers WHERE order_id = 1)	e_commerce;
SELECT count(DISTINCT customer_id) FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id	e_commerce;
SELECT count(DISTINCT item_state) FROM orders	e_commerce;
SELECT count(DISTINCT item_status_code) FROM ordered_items	e_commerce;
SELECT count(DISTINCT payment_method) FROM invoices	e_commerce;
SELECT count(DISTINCT payment_method) FROM customers	e_commerce;
SELECT login_name, login_password FROM customers WHERE phone_number LIKE '%+12%'	e_commerce;
SELECT login_name, login_password FROM customers WHERE phone_number LIKE "%12"	e_commerce;
SELECT product_size FROM products WHERE product_name LIKE "%Dell%"	e_commerce;
SELECT product_size FROM products WHERE product_name LIKE "%Dell%"	e_commerce;
SELECT product_price, product_size FROM products WHERE product_price > (SELECT avg(product_price) FROM products)	e_commerce;
SELECT product_price, product_size FROM products WHERE product_price > (SELECT avg(product_price) FROM products)	e_commerce;
SELECT count(*) FROM products WHERE product_id NOT IN (SELECT product_id FROM products)	e_commerce;
SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items )	e_commerce;
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers WHERE payment_method = "null")	e_commerce;
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM payment_methods)	e_commerce;
SELECT order_status, order_date FROM orders	e_commerce;
SELECT order_status_code, order_date FROM orders	e_commerce;
SELECT address, town, county FROM customers WHERE customer_country = 'USA'	e_commerce;
SELECT address, town, county FROM customers WHERE customer_country = 'USA'	e_commerce;
SELECT T1.customer_first_name, T2.product_name FROM customers AS T1 JOIN products AS T2 ON T1.customer_id = T2.product_id	e_commerce;
SELECT T1.customer_first_name, T2.product_name FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T1.customer_id ORDER BY count(*)	e_commerce;
SELECT count(*) FROM invoices AS T1 JOIN inventory AS T2 ON T1.product_id = T2.product_id JOIN shipping AS T3 ON T2.shipping_id = T3.product_id GROUP BY T3.product_id	e_commerce;
SELECT count(*) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id JOIN shipping AS T3 ON T2.shipping_id = T3.product_id GROUP BY T3.product_id	e_commerce;
SELECT avg(product_price) FROM products	e_commerce;
SELECT avg(product_price) FROM products	e_commerce;
SELECT avg(product_price) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id	e_commerce;
SELECT avg(product_price) FROM products ORDER BY total_product_price	e_commerce;
SELECT email_address, town, county FROM customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1	e_commerce;
SELECT email_address, city, county FROM customers WHERE gender_code = 'Female' ORDER BY count(*) ASC LIMIT 1	e_commerce;
SELECT order_date FROM customers AS T1 JOIN order_items AS T2 ON T1.customer_id = T2.customer_id WHERE payment_methods = 2 GROUP BY T1.customer_id HAVING count(*) >= 2	e_commerce;
SELECT T1.order_date FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.payment_method_code = 2 GROUP BY T2.customer_id HAVING count(*) >= 2	e_commerce;
SELECT order_status FROM orders GROUP BY order_status ORDER BY count(*) DESC LIMIT 1	e_commerce;
SELECT order_status FROM orders GROUP BY order_status ORDER BY count(*) ASC LIMIT 1	e_commerce;
SELECT T1.product_id, T1.product_description FROM products AS T1 JOIN inventory AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING count(*) > 3	e_commerce;
SELECT T1.product_id, T1.product_description FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING count(*) > 3	e_commerce;
SELECT T1.invoice_date, T1.invoice_id FROM invoices AS T1 JOIN shipments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id HAVING count(*) >= 2	e_commerce;
SELECT T1.invoice_date, T1.invoice_id FROM invoices AS T1 JOIN shipments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id HAVING count(*) >= 2	e_commerce;
SELECT shipment_tracking_number, shipment_date FROM shipments	e_commerce;
SELECT tracking_number, shipping_date FROM shipments	e_commerce;
SELECT product_color, product_description, product_size FROM products WHERE product_price  (SELECT max(product_price) FROM products)	e_commerce;
SELECT product_color, product_description, product_size FROM products WHERE product_price!= (SELECT max(product_price) FROM products)	e_commerce;
SELECT name FROM director WHERE age > (SELECT avg(age) FROM director)	bbc_channels;
SELECT name FROM director ORDER BY age DESC LIMIT 1	bbc_channels;
SELECT count(*) FROM channel WHERE internet LIKE "%bbc%"	bbc_channels;
SELECT count(DISTINCT digital_terrestrial_channel) FROM channel	bbc_channels;
SELECT title FROM program ORDER BY start_year DESC	bbc_channels;
SELECT T2.name FROM program AS T1 JOIN director AS T2 ON T1.director_id = T2.director_id GROUP BY T1.director_id ORDER BY count(*) DESC LIMIT 1	bbc_channels;
SELECT t1.name, t1.age FROM director AS t1 JOIN program AS t2 ON t1.director_id = t2.director_id GROUP BY t2.director_id ORDER BY count(*) DESC LIMIT 1	bbc_channels;
SELECT title FROM program ORDER BY start_year DESC LIMIT 1	bbc_channels;
SELECT T1.name, T1.internet FROM channel AS T1 JOIN program AS T2 ON T1.channel_id = T2.channel_id GROUP BY T2.channel_id HAVING count(*) > 1	bbc_channels;
SELECT count(*), T1.name FROM channel AS T1 JOIN program AS T2 ON T1.channel_id = T2.channel_id GROUP BY T1.channel_id	bbc_channels;
SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)	bbc_channels;
SELECT T2.name FROM program AS T1 JOIN director AS T2 ON T1.director_id = T2.director_id WHERE T1.title = 'Dracula'	bbc_channels;
SELECT t1.name, t1.internet FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id = t2.channel_id GROUP BY t2.channel_id ORDER BY count(*) DESC LIMIT 1	bbc_channels;
SELECT name FROM director WHERE age BETWEEN 30 AND 60	bbc_channels;
SELECT T2.name FROM director AS T1 JOIN channel AS T2 ON T1.director_id = T2.director_id WHERE T1.age  40 INTERSECT SELECT T2.name FROM director_admin AS T1 JOIN channel AS T2 ON T1.channel_id = T2.channel_id WHERE T1.age > 60	bbc_channels;
SELECT name, channel_id FROM channel EXCEPT SELECT T2.channel_id, T2.name FROM director_admin AS T1 JOIN channel AS T2 ON T1.channel_id = T2.channel_id WHERE T1.name = "Hank Baskett"	bbc_channels;
SELECT count(*) FROM radio	tv_shows;
SELECT Transmitter FROM radio ORDER BY ERP_kW ASC	tv_shows;
SELECT tv_show_name, original_airdate FROM tv_show	tv_shows;
SELECT station_name FROM city_channel WHERE affiliation!= 'ABC'	tv_shows;
SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW  30	tv_shows;
SELECT transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1	tv_shows;
SELECT avg(ERP_kW) FROM radio	tv_shows;
SELECT affiliation, count(*) FROM city_channel GROUP BY affiliation	tv_shows;
SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1	tv_shows;
SELECT affiliation FROM city_channel GROUP BY affiliation HAVING count(*) > 3	tv_shows;
SELECT city, station_name FROM city_channel ORDER BY station_name	tv_shows;
SELECT T1.transmitter, T2.city FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.radio_id = T2.city_channel_id	tv_shows;
SELECT T1.transmitter, T2.station_name FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.radio_id = T2.station_id ORDER BY T1.ERP_kW DESC	tv_shows;
SELECT T1.transmitter, count(*) FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.radio_id = T2.city_channel_id GROUP BY T1.transmitter	tv_shows;
SELECT DISTINCT transmitter FROM radio WHERE radio_id NOT IN (SELECT radio_id FROM city_channel_radio)	tv_shows;
SELECT Model FROM vehicle WHERE Top_Speed > 200 AND Power > 6000	vehicle_driver;
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1	vehicle_driver;
SELECT Name FROM driver WHERE Citizenship = 'United States'	vehicle_driver;
SELECT Name FROM driver WHERE Citizenship = "United States"	vehicle_driver;
SELECT count(*), T1.Driver_ID FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY count(*) DESC LIMIT 1	vehicle_driver;
SELECT Driver_ID, COUNT(*) FROM vehicle_driver GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1	vehicle_driver;
SELECT max(Power), avg(Power) FROM vehicle WHERE Builder = 'Zhuzhou'	vehicle_driver;
SELECT max(Power), avg(Power) FROM vehicle WHERE Builder = "Zhuzhou"	vehicle_driver;
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1	vehicle_driver;
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1	vehicle_driver;
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996	vehicle_driver;
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996	vehicle_driver;
SELECT Build_Year, Model, Builder FROM vehicle	vehicle_driver;
SELECT Build_Year, Model, Builder FROM vehicle	vehicle_driver;
SELECT COUNT(DISTINCT T2.Driver_ID) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Build_Year = 2012	vehicle_driver;
SELECT count(DISTINCT T2.Driver_ID) FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Build_Year = 2012	vehicle_driver;
SELECT count(*) FROM driver WHERE Racing_Series = 'NASCAR'	vehicle_driver;
SELECT count(*) FROM driver WHERE Racing_Series = "NASCAR"	vehicle_driver;
SELECT avg(Top_Speed) FROM vehicle	vehicle_driver;
SELECT avg(Top_Speed) FROM vehicle	vehicle_driver;
SELECT DISTINCT T3.Name FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T1.Driver_ID = T3.Driver_ID WHERE T2.Power > 5000	vehicle_driver;
SELECT T3.Name FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T1.Driver_ID = T3.Driver_ID WHERE T2.Power > 5000	vehicle_driver;
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150	vehicle_driver;
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150	vehicle_driver;
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE "%DJ%"	vehicle_driver;
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE "%DJ%"	vehicle_driver;
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)	vehicle_driver;
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)	vehicle_driver;
SELECT T1.vehicle_id, T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id HAVING count(*) = 2 UNION SELECT T1.vehicle_id, T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Builder = 'Ziyang'	vehicle_driver;
SELECT T1.vehicle_id, T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id HAVING count(*) = 2 UNION SELECT T1.vehicle_id, T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Builder = "Zhuzhou"	vehicle_driver;
SELECT T2.Vehicle_ID, T2.Model FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T1.Driver_ID = T3.Driver_ID WHERE T3.Name = 'Jeff Gordon' GROUP BY T2.Vehicle_ID HAVING COUNT(*) > 2	vehicle_driver;
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID HAVING COUNT(*) > 2 UNION SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehi	vehicle_driver;
SELECT count(*) FROM vehicle WHERE Top_Speed > (SELECT max(Top_Speed) FROM vehicle)	vehicle_driver;
SELECT count(*) FROM vehicle WHERE Top_Speed = (SELECT max(Top_Speed) FROM vehicle)	vehicle_driver;
SELECT Name FROM driver ORDER BY Name ASC	vehicle_driver;
SELECT Name FROM driver ORDER BY Name ASC	vehicle_driver;
SELECT Racing_Series, COUNT(*) FROM driver GROUP BY Racing_Series	vehicle_driver;
SELECT Racing_Series, COUNT(*) FROM driver GROUP BY Racing_Series	vehicle_driver;
SELECT T3.Name, T3.Citizenship FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T1.Vehicle_ID = T3.Vehicle_ID WHERE T3.Model = 'DJ1'	vehicle_driver;
SELECT T3.Name, T3.Citizenship FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T1.Vehicle_ID = T3.Vehicle_ID WHERE T3.Model = 'DJ1'	vehicle_driver;
SELECT count(DISTINCT Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)	vehicle_driver;
SELECT count(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver)	vehicle_driver;
SELECT count(*) FROM exams	online_exams;
SELECT count(*) FROM exams	online_exams;
SELECT DISTINCT subject_code FROM exams ORDER BY subject_code ASC	online_exams;
SELECT DISTINCT subject_code FROM exams ORDER BY subject_code	online_exams;
SELECT T1.First_Name, T1.Last_Name, T1.Exam_Date FROM Exams AS T1 JOIN Exams AS T2 ON T1.Exam_ID = T2.Exam_ID WHERE T1.Subject_Code!= "Database"	online_exams;
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code!= "Database"	online_exams;
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE "%data%" ORDER BY Exam_Date DESC	online_exams;
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE "%data%" ORDER BY Exam_Date DESC	online_exams;
SELECT TYPE_of_Question_Code, COUNT(*) FROM QUESTIONS GROUP BY TYPE_of_Question_Code	online_exams;
SELECT TYPE_of_Question_Code, COUNT(*) FROM QUESTIONS GROUP BY TYPE_of_Question_Code	online_exams;
SELECT DISTINCT T1.question_text FROM questions AS T1 JOIN comments AS T2 ON T1.question_id = T2.question_id WHERE T2.comment_type_code = "Normal"	online_exams;
SELECT DISTINCT T1.question_text FROM questions AS T1 JOIN answers AS T2 ON T1.question_id = T2.question_id WHERE T1.comment_text = "Normal"	online_exams;
SELECT count(DISTINCT answer_text) FROM questions	online_exams;
SELECT count(DISTINCT answer_text) FROM questions	online_exams;
SELECT question_text FROM questions GROUP BY question_text ORDER BY count(*) DESC	online_exams;
SELECT question_text FROM questions GROUP BY question_text ORDER BY count(*) DESC	online_exams;
SELECT T2.First_Name, T1.Exam_Date FROM Exams AS T1 JOIN Students AS T2 ON T1.Student_ID = T2.Student_ID	online_exams;
SELECT T2.First_Name, T1.Exam_Date FROM exams AS T1 JOIN students AS T2 ON T1.Exam_ID = T2.Student_ID	online_exams;
SELECT T2.Email_Address, T1.Exam_Date FROM Exams AS T1 JOIN Students AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY T1.Exam_Date DESC	online_exams;
SELECT T2.Email_Address, T1.Date FROM Questions AS T1 JOIN Students AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY T1.Date DESC	online_exams;
SELECT T1.Assessment_Text FROM Exams AS T1 JOIN Students AS T2 ON T1.Assessment_ID = T2.Student_ID GROUP BY T1.Assessment_ID ORDER BY count(*) ASC LIMIT 1	online_exams;
SELECT T1.Assessment_Text FROM Exams AS T1 JOIN Subject_Assessments AS T2 ON T1.Exam_ID = T2.Exam_ID GROUP BY T1.Assessment_Text ORDER BY count(*) ASC LIMIT 1	online_exams;
SELECT T2.first_name FROM questions AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) >= 2	online_exams;
SELECT T2.first_name FROM questions AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) >= 2	online_exams;
SELECT question_text FROM questions GROUP BY question_text ORDER BY count(*) DESC LIMIT 1	online_exams;
SELECT question_text FROM questions GROUP BY question_text ORDER BY count(*) DESC LIMIT 1	online_exams;
SELECT Last_Name FROM Students WHERE gender_mfu!= "M"	online_exams;
SELECT Last_Name FROM Students WHERE gender_MFU!= "M"	online_exams;
SELECT gender_mfu, count(*) FROM students GROUP BY gender_mfu	online_exams;
SELECT gender_mfu, count(*) FROM students GROUP BY gender_mfu	online_exams;
SELECT Last_Name FROM Students WHERE gender_mfu = "F" OR gender_mfu = "M"	online_exams;
SELECT Last_Name FROM Students WHERE gender_mfu = "F" OR gender_mfu = "M"	online_exams;
SELECT First_Name FROM Students EXCEPT SELECT T2.First_Name FROM Questions AS T1 JOIN Students AS T2 ON T1.Question_ID = T2.Student_ID	online_exams;
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Questions)	online_exams;
SELECT T1.question_text FROM questions AS T1 JOIN comments AS T2 ON T1.question_id = T2.question_id WHERE T2.comment_type_code = "Normal" INTERSECT SELECT T1.question_text FROM questions AS T1 JOIN comments AS T2 ON T1.question_id = T2.question_id WHERE T2.comment_type_code = "Absent"	online_exams;
SELECT T1.question_text FROM questions AS T1 JOIN answers AS T2 ON T1.question_id = T2.question_id WHERE T2.comment_text = "Normal" INTERSECT SELECT T1.question_text FROM questions AS T1 JOIN answers AS T2 ON T1.question_id = T2.question_id WHERE T2.comment_text = "Absent"	online_exams;
SELECT TYPE_of_Question_Code FROM QUESTIONS GROUP BY TYPE_of_Question_Code HAVING count(*) >= 3	online_exams;
SELECT TYPE_of_Question_Code FROM QUESTIONS GROUP BY TYPE_of_Question_Code HAVING count(*) >= 3	online_exams;
SELECT * FROM Students	online_exams;
SELECT * FROM Students	online_exams;
SELECT count(*) FROM addresses	customers_and_orders;
SELECT count(*) FROM addresses	customers_and_orders;
SELECT address_id, address_details FROM addresses	customers_and_orders;
SELECT address_id, address_details FROM addresses	customers_and_orders;
SELECT count(*) FROM schema	customers_and_orders;
SELECT count(*) FROM products	customers_and_orders;
SELECT product_id, product_type_code, product_name FROM products	customers_and_orders;
SELECT product_id, product_type_code, product_name FROM products	customers_and_orders;
SELECT product_price FROM products WHERE product_name = "Monitor"	customers_and_orders;
SELECT product_price FROM products WHERE product_name = "Monitor"	customers_and_orders;
SELECT min(product_price), avg(product_price), max(product_price) FROM products	customers_and_orders;
SELECT min(product_price), avg(product_price), max(product_price) FROM products	customers_and_orders;
SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'	customers_and_orders;
SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'	customers_and_orders;
SELECT count(*) FROM products WHERE product_type_code = "Hardware"	customers_and_orders;
SELECT count(*) FROM products WHERE product_type_code = "Hardware"	customers_and_orders;
SELECT product_name FROM products WHERE product_price > (SELECT avg(product_price) FROM products)	customers_and_orders;
SELECT product_name FROM products WHERE product_price > (SELECT avg(product_price) FROM products)	customers_and_orders;
SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT avg(product_price) FROM products WHERE product_type_code = 'Hardware' )	customers_and_orders;
SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT avg(product_price) FROM products WHERE product_type_code = 'Hardware' )	customers_and_orders;
SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1	customers_and_orders;
SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1	customers_and_orders;
SELECT product_id, product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price LIMIT 1	customers_and_orders;
SELECT product_id, product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price LIMIT 1	customers_and_orders;
SELECT product_name FROM products ORDER BY product_price DESC	customers_and_orders;
SELECT product_name FROM products ORDER BY product_price DESC	customers_and_orders;
SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price	customers_and_orders;
SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price	customers_and_orders;
SELECT product_type_code, count(*) FROM products GROUP BY product_type_code	customers_and_orders;
SELECT product_type_code, count(*) FROM products GROUP BY product_type_code	customers_and_orders;
SELECT product_type_code, avg(product_price) FROM products GROUP BY product_type_code	customers_and_orders;
SELECT product_type_code, avg(product_price) FROM products GROUP BY product_type_code	customers_and_orders;
SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2	customers_and_orders;
SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2	customers_and_orders;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT count(*) FROM customers	customers_and_orders;
SELECT count(*) FROM customers	customers_and_orders;
SELECT customer_id, customer_name FROM customers	customers_and_orders;
SELECT customer_id, customer_name FROM customers	customers_and_orders;
SELECT customer_address, customer_phone, customer_email FROM customers WHERE customer_name = "Jeromy"	customers_and_orders;
SELECT customer_address, customer_phone, customer_email FROM customers WHERE customer_name = "Jeromy"	customers_and_orders;
SELECT payment_method_code, count(*) FROM customers GROUP BY payment_method_code	customers_and_orders;
SELECT payment_method_code, count(*) FROM customers GROUP BY payment_method_code	customers_and_orders;
SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT customer_name FROM customers WHERE payment_method_code = (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)	customers_and_orders;
SELECT customer_name FROM customers WHERE payment_method_code = (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)	customers_and_orders;
SELECT payment_method_code, customer_number FROM customers WHERE customer_name = "Jeromy"	customers_and_orders;
SELECT payment_method_code, customer_number FROM customers WHERE customer_name = "Jeromy"	customers_and_orders;
SELECT DISTINCT payment_method_code FROM customers	customers_and_orders;
SELECT DISTINCT payment_method_code FROM customers	customers_and_orders;
SELECT product_id, product_type_code FROM products ORDER BY product_name	customers_and_orders;
SELECT product_id, product_type_code FROM products ORDER BY product_name	customers_and_orders;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1	customers_and_orders;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1	customers_and_orders;
SELECT count(*) FROM customer_orders	customers_and_orders;
SELECT count(*) FROM customer_orders	customers_and_orders;
SELECT T2.order_id, T2.order_date, T2.order_status_code FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeromy"	customers_and_orders;
SELECT T2.order_id, T2.order_date, T2.order_status_code FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeromy"	customers_and_orders;
SELECT T2.customer_name, T1.customer_id, count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id	customers_and_orders;
SELECT T2.customer_name, T1.customer_id, count(*) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id	customers_and_orders;
SELECT T1.customer_id, T2.customer_name, T2.customer_phone, T2.customer_email FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT order_status_code, count(*) FROM orders GROUP BY order_status_code	customers_and_orders;
SELECT order_status_code, count(*) FROM orders GROUP BY order_status_code	customers_and_orders;
SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders)	customers_and_orders;
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders)	customers_and_orders;
SELECT product_name FROM products EXCEPT SELECT t1.product_name FROM products AS t1 JOIN order_items AS t2 ON t1.product_id = t2.product_id	customers_and_orders;
SELECT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM orders)	customers_and_orders;
SELECT count(*) FROM products AS T1 JOIN orders AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = "Monitor"	customers_and_orders;
SELECT count(*) FROM products AS T1 JOIN orders AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = "Monitor"	customers_and_orders;
SELECT count(*) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = "Monitor"	customers_and_orders;
SELECT count(DISTINCT T1.customer_id) FROM customers AS T1 JOIN order_items AS T2 ON T1.customer_id = T2.customer_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = "Monitor"	customers_and_orders;
SELECT count(DISTINCT customer_id) FROM orders	customers_and_orders;
SELECT count(DISTINCT customer_id) FROM customers_and_orders	customers_and_orders;
SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM orders	customers_and_orders;
SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM orders	customers_and_orders;
SELECT T1.order_date, T1.order_id FROM orders AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T2.product_quantity > 6 OR T2.product_quantity > 3	customers_and_orders;
SELECT order_id, order_date FROM orders WHERE order_quantity > 6 OR order_item_count > 3	customers_and_orders;
SELECT count(*) FROM building	region_building;
SELECT count(*) FROM building	region_building;
SELECT name FROM building ORDER BY number_of_stories ASC	region_building;
SELECT name FROM building ORDER BY number_of_stories	region_building;
SELECT address FROM building ORDER BY completed_year DESC	region_building;
SELECT address FROM building ORDER BY completed_year DESC	region_building;
SELECT max(number_of_stories) FROM building WHERE completed_year!= 1980	region_building;
SELECT max(number_of_stories) FROM building WHERE completed_year!= 1980	region_building;
SELECT avg(population) FROM region	region_building;
SELECT avg(population) FROM region	region_building;
SELECT Name FROM region ORDER BY Name ASC	region_building;
SELECT name FROM region ORDER BY name	region_building;
SELECT capital FROM region WHERE area > 10000	region_building;
SELECT capital FROM region WHERE area > 10000	region_building;
SELECT capital FROM region ORDER BY population DESC LIMIT 1	region_building;
SELECT capital FROM region ORDER BY population DESC LIMIT 1	region_building;
SELECT name FROM region ORDER BY area DESC LIMIT 5	region_building;
SELECT name FROM region ORDER BY area DESC LIMIT 5	region_building;
SELECT T1.name, T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id	region_building;
SELECT T1.name, T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id	region_building;
SELECT T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*) > 1	region_building;
SELECT T1.name FROM region AS T1 JOIN building AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*) > 1	region_building;
SELECT T1.capital FROM region AS T1 JOIN building AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id ORDER BY count(*) DESC LIMIT 1	region_building;
SELECT T1.capital FROM region AS T1 JOIN building AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id ORDER BY count(*) DESC LIMIT 1	region_building;
SELECT T1.address, T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id	region_building;
SELECT T1.address, T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id	region_building;
SELECT T2.Number_of_Stories FROM region AS T1 JOIN building AS T2 ON T1.region_id = T2.region_id WHERE T1.Name = "Abruzzo"	region_building;
SELECT T2.number_of_stories FROM region AS T1 JOIN building AS T2 ON T1.region_id = T2.region_id WHERE T1.name = "Abruzzo"	region_building;
SELECT completed_year, count(*) FROM building GROUP BY completed_year	region_building;
SELECT completed_year, count(*) FROM building GROUP BY completed_year	region_building;
SELECT completed_year FROM building GROUP BY completed_year ORDER BY count(*) DESC LIMIT 1	region_building;
SELECT completed_year FROM building GROUP BY completed_year ORDER BY count(*) DESC LIMIT 1	region_building;
SELECT name FROM region WHERE region_id NOT IN (SELECT region_id FROM building)	region_building;
SELECT name FROM region WHERE region_id NOT IN (SELECT region_id FROM building)	region_building;
SELECT completed_year FROM building WHERE number_of_stories > 20 INTERSECT SELECT completed_year FROM building WHERE number_of_stories  15	region_building;
SELECT completed_year FROM building WHERE number_of_stories > 20 INTERSECT SELECT completed_year FROM building WHERE number_of_stories  15	region_building;
SELECT DISTINCT address FROM building	region_building;
SELECT DISTINCT address FROM building	region_building;
SELECT completed_year FROM building ORDER BY number_of_stories DESC	region_building;
SELECT completed_year, number_of_stories FROM building ORDER BY number_of_stories DESC	region_building;
SELECT channel_details FROM channels ORDER BY channel_details	government_shift;
SELECT channel_details FROM channels ORDER BY channel_details	government_shift;
SELECT count(*) FROM services	government_shift;
SELECT count(*) FROM services	government_shift;
SELECT Pattern_Recognition FROM Analytical_Layer GROUP BY Pattern_Recognition ORDER BY count(*) DESC LIMIT 1	government_shift;
SELECT Pattern_Code FROM Analytical_Layer GROUP BY Pattern_Code ORDER BY count(*) DESC LIMIT 1	government_shift;
SELECT DISTINCT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id WHERE T2.customer_details = "Hardy Kutch"	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id WHERE T2.customer_details = "Hardy Kutch"	government_shift;
SELECT T1.service_details FROM Services AS T1 JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID GROUP BY T2.Service_ID HAVING count(*) > 3	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id HAVING count(*) > 3	government_shift;
SELECT T1.customer_details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1	government_shift;
SELECT T1.customer_details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1	government_shift;
SELECT T1.customer_details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.customer_details ORDER BY count(*) DESC LIMIT 1	government_shift;
SELECT T1.customer_details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1	government_shift;
SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.customer_id = T2.customer_id	government_shift;
SELECT customer_details FROM customers EXCEPT SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id = t2.customer_id	government_shift;
SELECT T1.customer_details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1	government_shift;
SELECT DISTINCT T1.customer_details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Service_ID = (SELECT min(Service_ID) FROM Customers_and_Services)	government_shift;
SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services	government_shift;
SELECT count(*) FROM customers_and_services	government_shift;
SELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"	government_shift;
SELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"	government_shift;
SELECT T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customer_Details = "Hardy Kutch" OR T2.Service_Rating_Code = "good"	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id WHERE T2.customer_details = "Hardy Kutch" OR T2.Service_and_Channels_Details = "good"	government_shift;
SELECT T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customer_Details = "Hardy Kutch" AND T2.Service_Rating_Code = "bad"	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id WHERE T2.customer_details = "Hardy Kutch" AND T2.service_and_channels_details = "bad"	government_shift;
SELECT T1.service_details FROM Services AS T1 JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID JOIN Channels AS T3 ON T2.Channel_ID = T3.Channel_ID WHERE T3.Channel_Details  '' 15 ij ''	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customer_interactions AS T2 ON T1.service_id = T2.service_id JOIN channels AS T3 ON T2.channel_id = T3.channel_id WHERE T3.channel_details = "15 ij"	government_shift;
SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code = ''Stuck'' AND T2.Services_and_Channels_Details = ''bad''	government_shift;
SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code = "Stuck" AND T2.Services_and_Channels_Details = "bad"	government_shift;
SELECT count(*) FROM Integration_Platform WHERE Integration_Platform_Details = "Success"	government_shift;
SELECT count(*) FROM Integration_Platform WHERE Integration_Platform_Details = "Success"	government_shift;
SELECT T1.customer_details FROM Customers AS T1 JOIN Integration_Platform AS T2 ON T1.Customer_ID = T2.Customer_Interaction_ID WHERE T2.Integration_Platform_Details = 'Failed'	government_shift;
SELECT DISTINCT T1.customer_details FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Integration_Platform AS T3 ON T2.Integration_Platform_ID = T3.Integration_Platform_ID WHERE T3.integration_platform_details = "Fail"	government_shift;
SELECT service_details FROM services EXCEPT SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id	government_shift;
SELECT service_details FROM services WHERE service_id NOT IN (SELECT service_id FROM Customers_and_Services)	government_shift;
SELECT T2.Type_Code, COUNT(*) FROM Analytical_Layer AS T1 JOIN Physical_Layer AS T2 ON T1.Analytical_Layer_ID = T2.Layer_ID GROUP BY T2.Type_Code	government_shift;
SELECT T2.Type_Code, COUNT(*) FROM Analytical_Layer AS T1 JOIN Data_Layer AS T2 ON T1.Analytical_ID = T2.Data_Layer_ID GROUP BY T2.Type_Code	government_shift;
SELECT DISTINCT T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customers_and_Services_Details = 'Unsatisfied'	government_shift;
SELECT DISTINCT T1.service_details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customers_and_Services_Details = "Unsatisfied"	government_shift;
SELECT count(*) FROM Vehicles	vehicle_rent;
SELECT count(*) FROM Vehicles	vehicle_rent;
SELECT name FROM Vehicles ORDER BY model_year DESC	vehicle_rent;
SELECT name FROM Vehicles ORDER BY model_year DESC	vehicle_rent;
SELECT DISTINCT Type_of_powertrain FROM Vehicles	vehicle_rent;
SELECT DISTINCT Type_of_powertrain FROM Vehicles	vehicle_rent;
SELECT name, type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE model_year = 2013 OR model_year = 2014	vehicle_rent;
SELECT name, TYPE_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014	vehicle_rent;
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013	vehicle_rent;
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014	vehicle_rent;
SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain	vehicle_rent;
SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain	vehicle_rent;
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count(*) DESC LIMIT 1	vehicle_rent;
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count(*) DESC LIMIT 1	vehicle_rent;
SELECT min(Annual_fuel_cost), max(Annual_fuel_cost), avg(Annual_fuel_cost) FROM Vehicles	vehicle_rent;
SELECT min(Annual_fuel_cost), max(Annual_fuel_cost), avg(Annual_fuel_cost) FROM Vehicles	vehicle_rent;
SELECT name, model_year FROM Vehicles WHERE city_fuel_economy_rate = (SELECT min(city_fuel_economy_rate) FROM Vehicles)	vehicle_rent;
SELECT name, model_year FROM Vehicles WHERE city_fuel_economy_rate = (SELECT min(city_fuel_economy_rate) FROM Vehicles)	vehicle_rent;
SELECT Type_of_powertrain, avg(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING count(*) >= 2	vehicle_rent;
SELECT Type_of_powertrain, avg(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING count(*) >= 2	vehicle_rent;
SELECT name, age, membership_credit FROM Customers	vehicle_rent;
SELECT name, age, membership_credit FROM Customers	vehicle_rent;
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1	vehicle_rent;
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1	vehicle_rent;
SELECT avg(age) FROM Customers WHERE membership_credit > (SELECT avg(membership_credit) FROM Customers)	vehicle_rent;
SELECT avg(age) FROM Customers WHERE membership_credit > (SELECT avg(membership_credit) FROM Customers)	vehicle_rent;
SELECT * FROM Discount	vehicle_rent;
SELECT * FROM Discount	vehicle_rent;
SELECT T2.name, sum(T1.total_hours) FROM renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicle_id = T2.id GROUP BY T1.vehicle_id	vehicle_rent;
SELECT T2.name, sum(T1.total_hours) FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicle_id = T2.id GROUP BY T1.vehicle_id	vehicle_rent;
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)	vehicle_rent;
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)	vehicle_rent;
SELECT T2.name FROM renting_history AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.id GROUP BY T1.customer_id HAVING count(*) >= 2	vehicle_rent;
SELECT T2.name FROM renting_history AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.id GROUP BY T1.customer_id HAVING count(*) >= 2	vehicle_rent;
SELECT T2.name, T2.Model_year FROM renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicle_id = T2.id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1	vehicle_rent;
SELECT T2.name, T2.Model_year FROM renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicle_id = T2.id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1	vehicle_rent;
SELECT T2.name FROM renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicle_id = T2.id ORDER BY T1.total_hours DESC	vehicle_rent;
SELECT T2.name FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicle_id = T2.id ORDER BY T1.total_hours DESC	vehicle_rent;
SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id = T2.id GROUP BY T1.discount_id ORDER BY count(*) DESC LIMIT 1	vehicle_rent;
SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id = T2.id GROUP BY T1.discount_id ORDER BY count(*) DESC LIMIT 1	vehicle_rent;
SELECT T2.name, T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicle_id = T2.id GROUP BY T1.vehicle_id HAVING sum(T1.total_hours) > 30	vehicle_rent;
SELECT T2.name, T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicle_id = T2.id GROUP BY T1.vehicle_id HAVING sum(T1.total_hours) > 30	vehicle_rent;
SELECT avg(city_fuel_economy_rate), avg(Highway_fuel_economy_rate), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain	vehicle_rent;
SELECT avg(city_fuel_economy_rate), avg(Highway_fuel_economy_rate), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain	vehicle_rent;
SELECT avg(amount) FROM Student_Loans	cre_Students_Information_Systems;
SELECT avg(amount) FROM Student_Loans	cre_Students_Information_Systems;
SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) >= 2 INTERSECT SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Detentions AS T2 ON T1.student_id	cre_Students_Information_Systems;
SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Courses AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) >= 2 UNION SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Detentions AS T2 ON T1.student_id	cre_Students_Information_Systems;
SELECT T2.teacher_details FROM Classrooms AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_details LIKE '%data%' EXCEPT SELECT T2.teacher_details FROM Classrooms AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_prefix = 'net'	cre_Students_Information_Systems;
SELECT T2.teacher_details FROM Classrooms AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_details LIKE '%data%' EXCEPT SELECT T2.teacher_details FROM Classrooms AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_prefix = 'net'	cre_Students_Information_Systems;
SELECT bio_data FROM Students EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id = T2.student_id UNION SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT bio_data FROM Students EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id = T2.student_id UNION SELECT T1.bio_data FROM Students AS T1 JOIN Loans AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT T2.loan_amount, T2.date_of_loan FROM Student_Achievements AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) >= 2	cre_Students_Information_Systems;
SELECT T2.amount, T2.date_of_loan FROM Student_Achievements AS T1 JOIN Loans AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) >= 2	cre_Students_Information_Systems;
SELECT T2.teacher_details, T2.teacher_id FROM Courses AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.details, T1.teacher_id FROM Lessons AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT DISTINCT detention_type_description FROM Detention	cre_Students_Information_Systems;
SELECT DISTINCT detention_type_description FROM Detention	cre_Students_Information_Systems;
SELECT T1.bio_data, T2.address_type_description FROM Students AS T1 JOIN Ref_Address_Types AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT T1.bio_data, T2.address_type_description FROM Students AS T1 JOIN Ref_Address_Types AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT T2.address_details, T1.bio_data FROM Students AS T1 JOIN Addresses AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT address_details, bio_data FROM Students	cre_Students_Information_Systems;
SELECT T1.bio_data, T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT T1.bio_data, T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT T1.result_details, count(*) FROM Behaviour_Monitoring AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT count(*), behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 3	cre_Students_Information_Systems;
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING count(*) >= 2	cre_Students_Information_Systems;
SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data, T2.date_of_event FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT T1.bio_data, T2.date_of_event FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT T2.count(*), T1.event_type_code, T1.event_type_description FROM Ref_Event_Types AS T1 JOIN Student_Events AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T1.event_type_code ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.event_type_code, T1.event_type_description FROM Ref_Event_Types AS T1 JOIN Student_Events AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T1.event_type_code ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.achievement_details, T2.achievement_type_description FROM ACHIEVEMENTS AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code	cre_Students_Information_Systems;
SELECT T1.achievement_details, T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code	cre_Students_Information_Systems;
SELECT count(*) FROM Lessons AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.student_id NOT IN (SELECT T1.student_id FROM Achievements AS T3 JOIN Students AS T4 ON T3.student_id = T4.student_id)	cre_Students_Information_Systems;
SELECT count(*) FROM Teachers AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.student_id NOT IN (SELECT T2.student_id FROM Achievements)	cre_Students_Information_Systems;
SELECT date_of_transcript, transcript_details FROM TRANSCRIPTS	cre_Students_Information_Systems;
SELECT date_of_transcript, transcript_details FROM TRANSCRIPTS	cre_Students_Information_Systems;
SELECT achievement_type_code, achievement_details, date_of_achievement FROM Achievements	cre_Students_Information_Systems;
SELECT achievement_type_code, achievement_type_description, date_of_achievement FROM Ref_Achievement_Type	cre_Students_Information_Systems;
SELECT T1.detention_start_time, T1.detention_end_time FROM Detention AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT start_time, end_time FROM Detention	cre_Students_Information_Systems;
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'	cre_Students_Information_Systems;
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'	cre_Students_Information_Systems;
SELECT T2.student_details FROM Classrooms AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id JOIN Students AS T3 ON T1.student_id = T3.student_id WHERE T1.class_group_id = 2	cre_Students_Information_Systems;
SELECT T2.teacher_details, T3.student_details FROM Classrooms AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id JOIN Students AS T3 ON T1.student_id = T3.student_id WHERE T1.class_number = 2	cre_Students_Information_Systems;
SELECT count(*), T2.teacher_id FROM Courses AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.teacher_id, count(*) FROM Teachers AS T1 JOIN Courses AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT count(*), student_id FROM COURSE_TAKEN GROUP BY student_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.student_id, count(*) FROM Students AS T1 JOIN Courses AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.student_id, T1.student_details FROM Students AS T1 JOIN Courses AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2	cre_Students_Information_Systems;
SELECT T2.student_id, T2.student_details FROM Courses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING count(*) = 2	cre_Students_Information_Systems;
SELECT T1.detention_type_code, T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.detention_type_code, T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_lent > (SELECT avg(amount_lent) FROM Student_Loans)	cre_Students_Information_Systems;
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_of_loan > (SELECT avg(amount_of_loan) FROM Student_Loans)	cre_Students_Information_Systems;
SELECT date_of_loan FROM Transcripts ORDER BY date_of_loan ASC LIMIT 1	cre_Students_Information_Systems;
SELECT date_of_loan FROM Loans ORDER BY date_of_loan ASC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.loan_value ASC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.student_loan_amount ASC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.loan_value = (SELECT max(loan_value) FROM Student_Loans)	cre_Students_Information_Systems;
SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY sum(T2.loan_amount) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T2.teacher_details FROM Transcripts AS T1 JOIN Teachers AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_of_transcript ASC LIMIT 1	cre_Students_Information_Systems;
SELECT T2.transcript_details FROM Transcripts AS T1 JOIN Teachers AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_of_transcript ASC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.student_id, sum(T2.loan_amount) FROM Students AS T1 JOIN Loans AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id	cre_Students_Information_Systems;
SELECT T1.student_id, sum(T2.loan_amount) FROM Students AS T1 JOIN Loans AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id	cre_Students_Information_Systems;
SELECT T1.student_id, T1.bio_data, count(*) FROM Students AS T1 JOIN Courses AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id	cre_Students_Information_Systems;
SELECT T1.student_id, T1.bio_data, count(*) FROM Students AS T1 JOIN Courses AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id	cre_Students_Information_Systems;
SELECT count(DISTINCT student_id) FROM Students_in_Detention	cre_Students_Information_Systems;
SELECT count(DISTINCT student_id) FROM Detention	cre_Students_Information_Systems;
SELECT T1.address_type_code, T2.address_type_description FROM Ref_Address_Types AS T1 JOIN Addresses AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.address_type_code, T2.address_type_description FROM Ref_Address_Types AS T1 JOIN Addresses AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data FROM Students AS T1 JOIN Events AS T2 ON T1.student_id = T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Loans AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT T1.bio_data FROM Students AS T1 JOIN Event_Records AS T2 ON T1.student_id = T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT T2.start, T2.end FROM Transcripts AS T1 JOIN Addresses AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2	cre_Students_Information_Systems;
SELECT T2.address_start, T2.address_end FROM Transcripts AS T1 JOIN Addresses AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2	cre_Students_Information_Systems;
SELECT datetime_detention_start FROM Detention	cre_Students_Information_Systems;
SELECT detention_start FROM Detention	cre_Students_Information_Systems;
SELECT Name FROM Author	book_1;
SELECT Name FROM Author	book_1;
SELECT Name, Address FROM Client	book_1;
SELECT Name, Address FROM Client	book_1;
SELECT title, ISBN, saleprice FROM Book	book_1;
SELECT title, ISBN, saleprice FROM book	book_1;
SELECT count(*) FROM Book	book_1;
SELECT count(*) FROM Book	book_1;
SELECT count(*) FROM Author	book_1;
SELECT count(*) FROM Author	book_1;
SELECT count(*) FROM Client	book_1;
SELECT count(*) FROM Client	book_1;
SELECT name, address FROM Client ORDER BY name	book_1;
SELECT name, address FROM Client ORDER BY name	book_1;
SELECT Title, Name FROM Book AS T1 JOIN Author AS T2 ON T1.Author = T2.idAuthor	book_1;
SELECT T1.Title, T2.Name FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.Book_ISBN	book_1;
SELECT T2.idOrder, T1.Name FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient = T2.idClient	book_1;
SELECT T1.idOrder, T1.idClient FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient = T2.idClient	book_1;
SELECT T2.Name, COUNT(*) FROM Author_Book AS T1 JOIN Author AS T2 ON T1.Author = T2.idAuthor GROUP BY T1.Author	book_1;
SELECT T2.Name, COUNT(*) FROM Author_Book AS T1 JOIN Author AS T2 ON T1.Author = T2.idAuthor GROUP BY T1.Author	book_1;
SELECT ISBN, COUNT(*) FROM Books_order GROUP BY ISBN	book_1;
SELECT count(*), ISBN FROM Books_order GROUP BY ISBN	book_1;
SELECT sum(T1.PurchasePrice), T2.ISBN FROM Books_Order AS T1 JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder GROUP BY T2.ISBN	book_1;
SELECT sum(T1.PurchasePrice), T2.isbn FROM Books_Order AS T1 JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder GROUP BY T2.isbn	book_1;
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.Book_ISBN GROUP BY T2.Book_ISBN ORDER BY count(*) DESC LIMIT 1	book_1;
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.Books_ISBN GROUP BY T2.Books_Order ORDER BY COUNT(*) DESC LIMIT 1	book_1;
SELECT T1.Title, T1.PurchasePrice FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.Book_ISBN GROUP BY T2.Book_ISBN ORDER BY COUNT(*) DESC LIMIT 1	book_1;
SELECT T1.Title, T1.PurchasePrice FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.Book_ISBN GROUP BY T2.Book_ISBN ORDER BY sum(T2.Order) DESC LIMIT 1	book_1;
SELECT T2.Title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.ISBN = T2.Books_ISBN	book_1;
SELECT DISTINCT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.Books_ISBN	book_1;
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient HAVING COUNT(*) >= 1	book_1;
SELECT DISTINCT T1.Name FROM CUSTOMER AS T1 JOIN ORDER AS T2 ON T1.IdClient = T2.IdClient	book_1;
SELECT T1.Name, COUNT(*) FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient	book_1;
SELECT count(*), T1.name FROM CUSTOMER AS T1 JOIN ORDER AS T2 ON T1.idclient = T2.idorder GROUP BY T1.idclient	book_1;
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY count(*) DESC LIMIT 1	book_1;
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY COUNT(*) DESC LIMIT 1	book_1;
SELECT T1.Name, sum(T2.IdOrder) FROM CUSTOMER AS T1 JOIN ORDER AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient	book_1;
SELECT sum(T1.PurchasePrice), T2.Name FROM Books_Order AS T1 JOIN Orders AS T2 ON T1.IdOrder = T2.IdClient GROUP BY T2.Name	book_1;
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY sum(T2.IdOrder) DESC LIMIT 1	book_1;
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY sum(T2.Order) DESC LIMIT 1	book_1;
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT Books_Order FROM Books_Order)	book_1;
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)	book_1;
SELECT Name FROM Client EXCEPT SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient	book_1;
SELECT Name FROM Client EXCEPT SELECT T2.Name FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient = T2.IdClient	book_1;
SELECT max(saleprice), min(saleprice) FROM book	book_1;
SELECT max(saleprice), min(saleprice) FROM book	book_1;
SELECT avg(purchaseprice), avg(saleprice) FROM book	book_1;
SELECT avg(purchaseprice), avg(saleprice) FROM book	book_1;
SELECT max(saleprice) FROM book	book_1;
SELECT max(saleprice), purchaseprice FROM book	book_1;
SELECT title FROM book WHERE saleprice > (SELECT avg(saleprice) FROM book)	book_1;
SELECT title FROM book WHERE saleprice > (SELECT avg(saleprice) FROM book)	book_1;
SELECT Title FROM Book ORDER BY SalePrice ASC LIMIT 1	book_1;
SELECT title FROM book WHERE saleprice = (SELECT min(saleprice) FROM book)	book_1;
SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1	book_1;
SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1	book_1;
SELECT avg(T1.SalePrice) FROM Book AS T1 JOIN Author_Book AS T2 ON T1.Author = T2.idAuthor WHERE T2.Name = "George Orwell"	book_1;
SELECT avg(T1.SalePrice) FROM Book AS T1 JOIN Author_Book AS T2 ON T1.Author = T2.idAuthor WHERE T2.Name = "George Orwell"	book_1;
SELECT SalePrice FROM Book WHERE Author = "Plato"	book_1;
SELECT T2.SalePrice FROM Author_Book AS T1 JOIN Book AS T2 ON T1.Author = T2.idAuthor WHERE T1.Name = "Plato"	book_1;
SELECT Title FROM Book WHERE Author = "George Orwell" ORDER BY SalePrice ASC LIMIT 1	book_1;
SELECT Title FROM Book WHERE Author = "George Orwell" ORDER BY SalePrice ASC LIMIT 1	book_1;
SELECT Title FROM Book WHERE Author = "Plato" AND PurchasePrice  (SELECT avg(SalePrice) FROM Book)	book_1;
SELECT Title FROM Book WHERE Author = "Plato" AND SalePrice  (SELECT avg(SalePrice) FROM Book)	book_1;
SELECT Name FROM AUTHOR AS T1 JOIN BOOK AS T2 ON T1.Author = T2.idAuthor WHERE T2.Title = "Pride and Prejudice"	book_1;
SELECT Name FROM AUTHOR AS T1 JOIN BOOK AS T2 ON T1.Author = T2.idAuthor WHERE T2.Title = "Pride and Prejudice"	book_1;
SELECT T2.Title FROM Author_Book AS T1 JOIN Book AS T2 ON T1.Author = T2.idAuthor WHERE T1.Name LIKE '%Plato%'	book_1;
SELECT T2.Title FROM Author AS T1 JOIN Book AS T2 ON T1.Author = T2.idAuthor WHERE T1.Name LIKE '%Plato%'	book_1;
SELECT count(*) FROM book AS T1 JOIN books_order AS T2 ON T1.isbn = T2.books_id WHERE T1.title = "Pride and Prejudice"	book_1;
SELECT count(*) FROM book AS T1 JOIN books_order AS T2 ON T1.isbn = T2.books_id WHERE T1.title = 'Pride and Prejudice'	book_1;
SELECT T1.idOrder FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdOrder WHERE T2.Title = "Pride and Prejudice" INTERSECT SELECT T1.idOrder FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdOrder WHERE T2.Title = "The Little Prince"	book_1;
SELECT T1.idorder FROM orders AS T1 JOIN books_order AS T2 ON T1.idorder = T2.idorder WHERE T2.title = 'Pride and Prejudice' INTERSECT SELECT T1.idorder FROM orders AS T1 JOIN books_order AS T2 ON T1.idorder = T2.idorder WHERE T2.title = 'The Little Prince'	book_1;
SELECT T1.ISBN FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.Book_ISBN JOIN Orders AS T3 ON T2.Order = T3.IdClient WHERE T3.Name = 'Peter Doe' INTERSECT SELECT T1.ISBN FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.Book_ISBN JOIN Orders AS T3 ON T2.IdOrder AS T	book_1;
SELECT T2.ISBN FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T1.IdClient = T3.IdClient WHERE T3.Name = 'Peter Doe' INTERSECT SELECT T2.ISBN FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdClient WHERE T3.Name = 'James Smith	book_1;
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.Books_Order JOIN Client AS T3 ON T2.Client = T3.IdClient WHERE T3.Name = 'Peter Doe' EXCEPT SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.Books_Order AS T3 ON T2.IdOrder = T3.	book_1;
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.Books_Order JOIN Client AS T3 ON T2.Client = T3.IdClient WHERE T3.Name = 'Peter Doe' EXCEPT SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.Books_Order AS T3 ON T2.Client = T3.	book_1;
SELECT DISTINCT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdOrder JOIN Book AS T3 ON T2.Book = T3.ISBN WHERE T3.Title = "Pride and Prejudice"	book_1;
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdOrder JOIN Book AS T3 ON T2.Book = T3.ISBN WHERE T3.Title = "Pride and Prejudice"	book_1;
SELECT count(*) FROM book	book_review;
SELECT Title FROM book ORDER BY Title ASC	book_review;
SELECT Title FROM book ORDER BY Pages DESC	book_review;
SELECT TYPE, Release FROM book	book_review;
SELECT max(Chapters), min(Chapters) FROM book	book_review;
SELECT Title FROM book WHERE TYPE!= "Poet"	book_review;
SELECT avg(Rating) FROM review	book_review;
SELECT T1.Title, T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID	book_review;
SELECT T1.Rating FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Chapters DESC LIMIT 1	book_review;
SELECT Rank FROM book ORDER BY Pages ASC LIMIT 1	book_review;
SELECT T2.Title FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Rank DESC LIMIT 1	book_review;
SELECT avg(T2.Readers_in_Million) FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Type = "Novel"	book_review;
SELECT TYPE, COUNT(*) FROM book GROUP BY TYPE	book_review;
SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1	book_review;
SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*) >= 3	book_review;
SELECT T2.Title FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Rating ASC	book_review;
SELECT Title, Audio FROM book ORDER BY Readers_in_Million DESC	book_review;
SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)	book_review;
SELECT TYPE FROM book WHERE Chapters > 75 INTERSECT SELECT TYPE FROM book WHERE Chapters  50	book_review;
SELECT count(DISTINCT TYPE) FROM book	book_review;
SELECT TYPE, Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)	book_review;
SELECT count(*) FROM customer	restaurant_bills;
SELECT count(*) FROM customer	restaurant_bills;
SELECT name FROM customer ORDER BY level_of_membership ASC	restaurant_bills;
SELECT name FROM customer ORDER BY level_of_membership ASC	restaurant_bills;
SELECT nationality, card_credit FROM customer	restaurant_bills;
SELECT nationality, card_credit FROM customer	restaurant_bills;
SELECT name FROM customer WHERE nationality = "England" OR nationality = "Australia"	restaurant_bills;
SELECT name FROM customer WHERE nationality = "England" OR nationality = "Australia"	restaurant_bills;
SELECT avg(card_credit) FROM customer WHERE level_of_membership > 1	restaurant_bills;
SELECT avg(card_credit) FROM customer WHERE level_of_membership > 1	restaurant_bills;
SELECT card_credit FROM customer ORDER BY level_of_membership DESC LIMIT 1	restaurant_bills;
SELECT card_credit FROM customer ORDER BY level_of_membership DESC LIMIT 1	restaurant_bills;
SELECT nationality, count(*) FROM customer GROUP BY nationality	restaurant_bills;
SELECT nationality, count(*) FROM customer GROUP BY nationality	restaurant_bills;
SELECT nationality FROM customer GROUP BY nationality ORDER BY count(*) DESC LIMIT 1	restaurant_bills;
SELECT nationality FROM customer GROUP BY nationality ORDER BY count(*) DESC LIMIT 1	restaurant_bills;
SELECT nationality FROM customer WHERE card_credit  50 INTERSECT SELECT nationality FROM customer WHERE card_credit > 75	restaurant_bills;
SELECT nationality FROM customer WHERE card_credit > 50 INTERSECT SELECT nationality FROM customer WHERE card_credit  75	restaurant_bills;
SELECT T1.name, T2.dish_name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id = T2.customer_id JOIN dish_order AS T3 ON T2.dish_id = T3.dish_id	restaurant_bills;
SELECT T1.name, T2.dish_name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id = T2.customer_id	restaurant_bills;
SELECT T1.Name, T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.quantity DESC	restaurant_bills;
SELECT T1.name, T2.dish_name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.quantity DESC	restaurant_bills;
SELECT T1.name, sum(T2.quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id	restaurant_bills;
SELECT T1.name, sum(T2.quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id	restaurant_bills;
SELECT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING sum(T2.quantity) > 1	restaurant_bills;
SELECT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING sum(T2.quantity) > 1	restaurant_bills;
SELECT DISTINCT manager FROM branch	restaurant_bills;
SELECT DISTINCT manager FROM branch	restaurant_bills;
SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order)	restaurant_bills;
SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order)	restaurant_bills;
SELECT count(*) FROM member	club_leader;
SELECT Name FROM member ORDER BY Age ASC	club_leader;
SELECT Name, Nationality FROM member	club_leader;
SELECT name FROM member WHERE nationality!= 'England'	club_leader;
SELECT Name FROM member WHERE Age = 19 OR Age = 20	club_leader;
SELECT Name FROM member ORDER BY Age DESC LIMIT 1	club_leader;
SELECT Nationality, COUNT(*) FROM member GROUP BY Nationality	club_leader;
SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1	club_leader;
SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*) >= 2	club_leader;
SELECT T2.Name, T3.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.club_id = T2.club_id JOIN member AS T3 ON T1.member_id = T3.member_id	club_leader;
SELECT T2.Name FROM club_leader AS T1 JOIN club AS T2 ON T1.club_id = T2.club_id WHERE T2.Overall_Ranking > 100	club_leader;
SELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Year_Join  2018	club_leader;
SELECT Team_Leader FROM club WHERE Club_Name = "Houston"	club_leader;
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)	club_leader;
SELECT Nationality FROM member WHERE Age > 22 INTERSECT SELECT Nationality FROM member WHERE Age  19	club_leader;
SELECT avg(T1.Age) FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID	club_leader;
SELECT Club_Name FROM club WHERE Club_Name LIKE "%state%"	club_leader;
SELECT Collection_Subset_Name FROM Collection_Subsets	cre_Doc_and_collections;
SELECT Collection_Subset_Name FROM Collection_Subsets	cre_Doc_and_collections;
SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = "Top collection"	cre_Doc_and_collections;
SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = "Top collection"	cre_Doc_and_collections;
SELECT document_subset_name FROM Document_Subsets	cre_Doc_and_collections;
SELECT document_subset_name FROM Document_Subsets	cre_Doc_and_collections;
SELECT document_subset_details FROM Document_Subsets WHERE document_subset_name = 'Best for 2000'	cre_Doc_and_collections;
SELECT document_subset_details FROM Document_subsets WHERE document_subset_name = 'Best for 2000'	cre_Doc_and_collections;
SELECT document_id FROM Documents	cre_Doc_and_collections;
SELECT document_object_id FROM Document_objects	cre_Doc_and_collections;
SELECT parent_document_object_id FROM Document_objects WHERE OWNER = "Marlin"	cre_Doc_and_collections;
SELECT document_object_id FROM Document_objects WHERE OWNER = "Marlin"	cre_Doc_and_collections;
SELECT OWNER FROM Document_Objects WHERE Description = 'Braeden Collection'	cre_Doc_and_collections;
SELECT OWNER FROM Document_Objects WHERE Description = 'Braeden Collection'	cre_Doc_and_collections;
SELECT OWNDER FROM Document_Objects WHERE OWNER = 'Marlin'	cre_Doc_and_collections;
SELECT DISTINCT owner FROM Document_objects WHERE OWNER = 'Marlin'	cre_Doc_and_collections;
SELECT DISTINCT Description FROM Document_Objects	cre_Doc_and_collections;
SELECT DISTINCT Description FROM Document_Objects	cre_Doc_and_collections;
SELECT count(*) FROM Document_objects WHERE OWNER = "Marlin"	cre_Doc_and_collections;
SELECT count(*) FROM Document_objects WHERE OWNER = "Marlin"	cre_Doc_and_collections;
SELECT document_id FROM Document_objects EXCEPT SELECT parent_document_object_id FROM Document_objects	cre_Doc_and_collections;
SELECT document_object_id FROM Document_objects EXCEPT SELECT parent_document_object_id FROM Document_objects	cre_Doc_and_collections;
SELECT parent_document_id, count(*) FROM Document_objects GROUP BY parent_document_id	cre_Doc_and_collections;
SELECT count(*), parent_document_id FROM Document_objects GROUP BY parent_document_id	cre_Doc_and_collections;
SELECT Collection_Name FROM Collections	cre_Doc_and_collections;
SELECT Collection_Name FROM Collections	cre_Doc_and_collections;
SELECT Collection_Description FROM Collections WHERE Collection_Name = "Best"	cre_Doc_and_collections;
SELECT collection_description FROM Collections WHERE collection_name = "Best"	cre_Doc_and_collections;
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID = (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = "Nice")	cre_Doc_and_collections;
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID = (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = "Nice")	cre_Doc_and_collections;
SELECT Collection_Name FROM Collections EXCEPT SELECT Parent_Collection_Name FROM Collections	cre_Doc_and_collections;
SELECT Collection_Name FROM Collections EXCEPT SELECT Parent_Collection_Name FROM Collections	cre_Doc_and_collections;
SELECT parent_document_object_id FROM Document_objects GROUP BY parent_document_object_id HAVING count(*) > 1	cre_Doc_and_collections;
SELECT parent_document_object_id FROM Document_objects GROUP BY parent_document_object_id HAVING count(*) > 1	cre_Doc_and_collections;
SELECT count(*) FROM Collections WHERE Collection_Name = "Best"	cre_Doc_and_collections;
SELECT count(*) FROM Collections WHERE Parent_Collection_ID = "Best"	cre_Doc_and_collections;
SELECT document_id FROM Document_objects WHERE OWNER = "Ransom"	cre_Doc_and_collections;
SELECT T1.related_document_object_id FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.document_object_id = T2.document_object_id WHERE T2.owner = "Ransom"	cre_Doc_and_collections;
SELECT T2.Collection_Subset_Name, COUNT(*) FROM Collection_Subsets AS T1 JOIN Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID GROUP BY T1.Collection_Subset_ID	cre_Doc_and_collections;
SELECT T2.Collection_Subset_ID, T2.Collection_Subset_Name, COUNT(*) FROM Collection_Subsets AS T1 JOIN Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID	cre_Doc_and_collections;
SELECT document_id, count(*) FROM Document_child GROUP BY document_id ORDER BY count(*) DESC LIMIT 1	cre_Doc_and_collections;
SELECT parent_document_object_id, count(*) FROM Document_objects GROUP BY parent_document_object_id	cre_Doc_and_collections;
SELECT document_id, count(*) FROM Document_subset_members GROUP BY document_id ORDER BY count(*) ASC LIMIT 1	cre_Doc_and_collections;
SELECT document_object_id FROM Documents_in_Collections GROUP BY document_object_id ORDER BY count(*) ASC LIMIT 1	cre_Doc_and_collections;
SELECT document_id, count(*) FROM Document_subset_members GROUP BY document_id HAVING count(*) BETWEEN 2 AND 4	cre_Doc_and_collections;
SELECT related_document_id, count(*) FROM Document_subset_members GROUP BY related_document_id HAVING count(*) BETWEEN 2 AND 4	cre_Doc_and_collections;
SELECT DISTINCT OWNER FROM Document_Objects WHERE OWNER = "Braeden"	cre_Doc_and_collections;
SELECT DISTINCT OWNER FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = "Breaden")	cre_Doc_and_collections;
SELECT DISTINCT T1.document_subset_name FROM Document_Subsets AS T1 JOIN Document_Objects AS T2 ON T1.document_subset_id = T2.document_subset_id WHERE T2.owner = "Breaeden"	cre_Doc_and_collections;
SELECT DISTINCT T1.document_subset_name FROM Document_Subsets AS T1 JOIN Document_Objects AS T2 ON T1.document_subset_id = T2.document_subset_id WHERE T2.owner = "Breaeden"	cre_Doc_and_collections;
SELECT T1.document_subset_id, T2.document_subset_name, count(*) FROM Document_subsets AS T1 JOIN Document_subset_members AS T2 ON T1.document_subset_id = T2.document_subset_id GROUP BY T1.document_subset_id	cre_Doc_and_collections;
SELECT T1.document_subset_id, T2.document_subset_name, count(*) FROM Document_subsets AS T1 JOIN Document_subset_Members AS T2 ON T1.document_subset_id = T2.document_subset_id GROUP BY T1.document_subset_id	cre_Doc_and_collections;
SELECT T1.document_subset_id, T1.document_subset_name, count(*) FROM Document_subsets AS T1 JOIN Document_subset_Members AS T2 ON T1.document_subset_id = T2.document_subset_id GROUP BY T1.document_subset_id ORDER BY count(*) DESC LIMIT 1	cre_Doc_and_collections;
SELECT T1.document_subset_id, T1.document_subset_name, count(*) FROM Document_subsets AS T1 JOIN Document_subset_Members AS T2 ON T1.document_subset_id = T2.document_subset_id GROUP BY T1.document_subset_id ORDER BY count(*) DESC LIMIT 1	cre_Doc_and_collections;
SELECT document_id FROM Document_subsets WHERE document_subset_name = 'Best for 2000'	cre_Doc_and_collections;
SELECT document_id FROM Document_subsets WHERE document_subset_name = 'Best for 2000'	cre_Doc_and_collections;
SELECT T1.document_subset_name, T2.related_document_id FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_subset_id = T2.document_subset_id GROUP BY T2.related_document_id	cre_Doc_and_collections;
SELECT T1.Document_Subset_Name, T2.Related_Document_Object_ID FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID	cre_Doc_and_collections;
SELECT T2.Collection_Name FROM Document_objects AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Parent_Collection_ID WHERE T1.Owner = "Ransom"	cre_Doc_and_collections;
SELECT T2.Collection_Name FROM Document_objects AS T1 JOIN Collections AS T2 ON T1.Document_object_id = T2.Collection_Object_ID WHERE T1.Owner = "Ransom"	cre_Doc_and_collections;
SELECT count(*), T1.document_id FROM Documents_in_collections AS T1 JOIN Collections AS T2 ON T1.collection_id = T2.collection_id GROUP BY T1.document_id	cre_Doc_and_collections;
SELECT document_object_id, count(*) FROM Documents_in_collections GROUP BY document_object_id	cre_Doc_and_collections;
SELECT count(*) FROM Collections WHERE Collection_Name = "Best"	cre_Doc_and_collections;
SELECT count(*) FROM Collections WHERE Collection_Name = "Best"	cre_Doc_and_collections;
SELECT T1.document_id FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best"	cre_Doc_and_collections;
SELECT count(*) FROM Collections WHERE Collection_Name = "Best"	cre_Doc_and_collections;
SELECT T1.Collection_Name, T1.Collection_ID, count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1	cre_Doc_and_collections;
SELECT T1.Collection_Name, T1.Collection_ID, count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1	cre_Doc_and_collections;
SELECT T1.document_id FROM Documents_in_Collections AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_subset_id = T2.document_subset_id JOIN Collections AS T3 ON T1.collection_id = T3.collection_id WHERE T2.document_subset_name = "Best for 2000" AND T3.collection_name = "Best"	cre_Doc_and_collections;
SELECT DISTINCT T1.document_object_id FROM Documents_in_Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T2.Document_Subset_Name = 'Best for 2000' INTERSECT SELECT DISTINCT T1.document_object_id FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID	cre_Doc_and_collections;
SELECT T1.document_object_id FROM Documents_in_Collections AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_subset_id = T2.document_subset_id JOIN Collections AS T3 ON T1.collection_id = T3.collection_id WHERE T3.collection_name = "Best" EXCEPT SELECT T1.document_object_id FROM Documents_in_Collections AS T1 JOIN Documents_in_Subsets AS T2 ON T1.document_subset_	cre_Doc_and_collections;
SELECT DISTINCT T1.document_object_id FROM Documents_in_Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Best' EXCEPT SELECT DISTINCT T1.document_object_id FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Subset_	cre_Doc_and_collections;
SELECT T1.document_id FROM Documents_in_Collections AS T1 JOIN Document_Subsets AS T2 ON T1.document_subset_id = T2.document_subset_id WHERE T2.document_subset_name = "Best for 2000" OR T1.collection_name = "Best"	cre_Doc_and_collections;
SELECT DISTINCT T1.document_object_id FROM Documents_in_Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T2.Document_Subset_Name = 'Best for 2000' OR T1.Collection_Name = 'Best'	cre_Doc_and_collections;
SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best"	cre_Doc_and_collections;
SELECT T2.Collection_Subset_Name FROM Collections AS T1 JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best"	cre_Doc_and_collections;
SELECT count(*) FROM Collections WHERE Collection_Name = "Best"	cre_Doc_and_collections;
SELECT count(DISTINCT collection_id) FROM collections WHERE collection_name = "Best"	cre_Doc_and_collections;
SELECT T2.Collection_Subset_Name FROM Collections AS T1 JOIN Collection_Subsets AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T1.Collection_Name = "Best"	cre_Doc_and_collections;
SELECT T2.Collection_Subset_Name FROM Collections AS T1 JOIN Collection_Subsets AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T1.Collection_Name = "Best"	cre_Doc_and_collections;
SELECT count(*) FROM songs WHERE name LIKE "%Love%"	sing_contest;
SELECT name FROM songs ORDER BY name ASC	sing_contest;
SELECT name, language FROM songs	sing_contest;
SELECT max(voice_sound_quality), min(voice_sound_quality) FROM performance_score	sing_contest;
SELECT T1.voice_sound_quality, T1.rhythm_tempo, T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id = T2.id WHERE T2.name = 'Freeway'	sing_contest;
SELECT id, language, original_artist FROM songs WHERE name!= 'Love'	sing_contest;
SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love'	sing_contest;
SELECT DISTINCT T1.stage_presence FROM performance_score AS T1 JOIN songs AS T2 ON T1.song_id = T2.id WHERE T2.language = 'English'	sing_contest;
SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id HAVING count(*) >= 2	sing_contest;
SELECT T1.id, T1.name, T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id ORDER BY count(*)	sing_contest;
SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T2.voice_sound_quality = 5 OR T2.rhythm_tempo = 5	sing_contest;
SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T2.language = 'English' AND T2.name = 'The Balkan Girls'	sing_contest;
SELECT T2.id, T2.name FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1	sing_contest;
SELECT count(*) FROM performance_score WHERE stage_presence  7 OR stage_presence > 9	sing_contest;
SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score )	sing_contest;
SELECT avg(rhythm_tempo), language FROM performance_score GROUP BY language	sing_contest;
SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T2.song_id = T3.id WHERE T3.language = 'English'	sing_contest;
SELECT T1.name, T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T2.song_id = T3.id WHERE T3.language = 'Croatian' INTERSECT SELECT T1.name, T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participient_id JOIN songs AS T3 ON T2.song_id =	sing_contest;
SELECT name FROM songs WHERE name LIKE "%Is%"	sing_contest;
SELECT DISTINCT T1.original_artist FROM songs AS T1 JOIN performance_score AS T2 ON T1.id = T2.songs_id WHERE T2.rhythm_tempo > 5 ORDER BY T2.voice_sound_quality DESC	sing_contest;
SELECT count(*) FROM city	address_1;
SELECT count(*) FROM city	address_1;
SELECT DISTINCT state FROM city	address_1;
SELECT DISTINCT state FROM city	address_1;
SELECT count(DISTINCT country) FROM city	address_1;
SELECT count(DISTINCT country) FROM city	address_1;
SELECT city_name, city_code, state, country FROM city	address_1;
SELECT city_name, city_code, state, country FROM city	address_1;
SELECT latitude, longitude FROM city WHERE city_name = "Baltimore"	address_1;
SELECT latitude, longitude FROM city WHERE city_name = "Baltimore"	address_1;
SELECT city_name FROM city WHERE state = 'PA'	address_1;
SELECT city_name FROM city WHERE state = 'PA'	address_1;
SELECT count(*) FROM city WHERE country = 'Canada'	address_1;
SELECT count(*) FROM city WHERE country = 'Canada'	address_1;
SELECT city_name FROM city WHERE country = 'USA' ORDER BY latitude	address_1;
SELECT city_name FROM city WHERE country = 'USA' ORDER BY latitude	address_1;
SELECT state, count(*) FROM city GROUP BY state	address_1;
SELECT state, count(*) FROM city GROUP BY state	address_1;
SELECT country, count(*) FROM city GROUP BY country	address_1;
SELECT count(*), country FROM city GROUP BY country	address_1;
SELECT state FROM city GROUP BY state HAVING count(*) >= 2	address_1;
SELECT state FROM city GROUP BY state HAVING count(*) >= 2	address_1;
SELECT state FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1	address_1;
SELECT state FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1	address_1;
SELECT country FROM city GROUP BY country ORDER BY count(*) LIMIT 1	address_1;
SELECT country FROM city GROUP BY country ORDER BY count(*) LIMIT 1	address_1;
SELECT T2.lname, T2.fname FROM city AS T1 JOIN student AS T2 ON T1.city_code = T2.city_code WHERE T1.state = "MD"	address_1;
SELECT DISTINCT T1.fname, T1.lname FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.state = "MD"	address_1;
SELECT count(*) FROM city WHERE country = 'China'	address_1;
SELECT count(*) FROM city AS T1 JOIN student AS T2 ON T1.city_code = T2.city_code WHERE T1.country = 'China'	address_1;
SELECT t1.fname, t1.major FROM student AS t1 JOIN city AS t2 ON t1.city_code = t2.city_code WHERE t2.city_name = "Baltimore"	address_1;
SELECT t1.fname, t1.major FROM student AS t1 JOIN city AS t2 ON t1.city_code = t2.city_code WHERE t2.city_name = "Baltimore"	address_1;
SELECT country, count(*) FROM city GROUP BY country	address_1;
SELECT country, count(*) FROM city GROUP BY country	address_1;
SELECT count(*), city_code FROM city GROUP BY city_code	address_1;
SELECT city_name, count(*) FROM city AS T1 JOIN student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_code	address_1;
SELECT state FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1	address_1;
SELECT state FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1	address_1;
SELECT country FROM city GROUP BY country ORDER BY count(*) LIMIT 1	address_1;
SELECT country FROM city GROUP BY country ORDER BY count(*) LIMIT 1	address_1;
SELECT T1.city_name FROM city AS T1 JOIN student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_code HAVING count(*) >= 3	address_1;
SELECT T1.city_name FROM city AS T1 JOIN student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_code HAVING count(*) >= 3	address_1;
SELECT state FROM city GROUP BY state HAVING count(*) > 5	address_1;
SELECT state FROM city GROUP BY state HAVING count(*) > 5	address_1;
SELECT StuID FROM Student WHERE country!= 'USA'	address_1;
SELECT StuID FROM Student WHERE country!= 'USA'	address_1;
SELECT StuID FROM Student WHERE sex = 'F' AND state = "PA"	address_1;
SELECT StuID FROM Student WHERE sex = 'F' AND state = "PA"	address_1;
SELECT StuID FROM Student WHERE sex = 'M' AND country!= 'USA'	address_1;
SELECT StuID FROM Student WHERE sex = 'M' AND country!= 'USA'	address_1;
SELECT distance FROM Direct_distance WHERE city1_code = "BAL" AND city2_code = "CHI"	address_1;
SELECT distance FROM Direct_distance WHERE city1_code = "BAL" AND city2_code = "CHI"	address_1;
SELECT distance FROM Direct_distance WHERE city_code = 'Boston' AND city_code = 'Newark'	address_1;
SELECT distance FROM Direct_distance WHERE city_code = "Boston" AND city_code = "Newark"	address_1;
SELECT avg(distance), min(distance), max(distance) FROM direct_distance	address_1;
SELECT avg(distance), min(distance), max(distance) FROM direct_distance	address_1;
SELECT city_code FROM direct_distance ORDER BY distance DESC LIMIT 2	address_1;
SELECT city_code FROM direct_distance ORDER BY distance DESC LIMIT 1	address_1;
SELECT city_code FROM direct_distance WHERE distance > (SELECT avg(distance) FROM direct_distance)	address_1;
SELECT city_code FROM direct_distance WHERE distance > (SELECT avg(distance) FROM direct_distance)	address_1;
SELECT city_code FROM direct_distance WHERE distance  1000 GROUP BY city_code HAVING count(*) = 2	address_1;
SELECT city_code FROM direct_distance WHERE distance  1000	address_1;
SELECT sum(distance) FROM direct_distance WHERE city_code = "BAL"	address_1;
SELECT sum(distance) FROM direct_distance WHERE city_code = "BAL"	address_1;
SELECT avg(distance) FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name = "Boston"	address_1;
SELECT avg(distance) FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name = "Boston"	address_1;
SELECT city_name FROM city WHERE city_code = 'CHI' ORDER BY distance LIMIT 1	address_1;
SELECT city_name FROM city WHERE city_code = 'CHI' ORDER BY distance LIMIT 1	address_1;
SELECT city_name FROM city WHERE distance = (SELECT distance FROM direct_distance WHERE city_code = 'Boston') ORDER BY distance DESC LIMIT 1	address_1;
SELECT T1.city_name FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T2.distance FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T2.distance FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T2.distance = (SELECT max(*)	address_1;
SELECT city_code, sum(distance) FROM direct_distance GROUP BY city_code	address_1;
SELECT city_code, sum(distance) FROM direct_distance GROUP BY city_code	address_1;
SELECT city_name, avg(distance) FROM city	address_1;
SELECT city_name, avg(distance) FROM city GROUP BY city_name	address_1;
SELECT distance FROM Student WHERE Fname = "Linda" AND Lname = "Smith" INTERSECT SELECT distance FROM Student WHERE Fname = "Tracy" AND Lname = "Kim"	address_1;
SELECT T2.distance FROM student AS T1 JOIN direct_distance AS T2 ON T1.stuid = T2.stuid JOIN city AS T3 ON T3.city_code = T2.city_code WHERE T1.fname = "Linda" AND T1.lname = "Smith" INTERSECT SELECT T2.distance FROM student AS T1 JOIN direct_distance AS T2 ON T1.stuid = T2.city_code	address_1;
SELECT T2.fname, T2.lname FROM student AS T1 JOIN direct_distance AS T2 ON T1.stuid = T2.stuid WHERE T1.fname = "Linda" AND T1.lname = "Smith" ORDER BY T2.distance DESC LIMIT 1	address_1;
SELECT T2.fname, T2.lname FROM student AS T1 JOIN direct_distance AS T2 ON T1.stuid = T2.stuid WHERE T1.fname = "Linda" AND T1.lname = "Smith" ORDER BY T2.distance DESC LIMIT 1	address_1;
SELECT state FROM city AS T1 JOIN student AS T2 ON T1.city_code = T2.city_code WHERE T2.fname = "Linda"	address_1;
SELECT T1.state FROM city AS T1 JOIN student AS T2 ON T1.city_code = T2.city_code WHERE T2.fname = "Linda"	address_1;
SELECT * FROM Sailors WHERE age > 30	boat_1;
SELECT name FROM Sailors WHERE age > 30	boat_1;
SELECT name, age FROM Sailors WHERE age  30	boat_1;
SELECT name, age FROM Sailors WHERE age  30	boat_1;
SELECT DISTINCT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.sid WHERE T3.sid = 1	boat_1;
SELECT DISTINCT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.sid WHERE T3.sid = 1	boat_1;
SELECT DISTINCT T1.name FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 102	boat_1;
SELECT T1.name FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 102	boat_1;
SELECT DISTINCT bid FROM Reserves	boat_1;
SELECT sid FROM Reserves	boat_1;
SELECT name FROM sailors WHERE name LIKE '%e%'	boat_1;
SELECT name FROM Sailors WHERE name LIKE '%e%'	boat_1;
SELECT DISTINCT sid FROM Sailors WHERE age > (SELECT max(age) FROM Sailors)	boat_1;
SELECT DISTINCT sid FROM Sailors EXCEPT SELECT DISTINCT sid FROM Sailors ORDER BY age LIMIT 1	boat_1;
SELECT DISTINCT name FROM Sailors WHERE age > (SELECT min(age) FROM Sailors WHERE rating > 7)	boat_1;
SELECT DISTINCT name FROM Sailors WHERE age > (SELECT min(age) FROM Sailors WHERE rating > 7)	boat_1;
SELECT DISTINCT T1.name, T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid	boat_1;
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sailor_id GROUP BY T1.sid HAVING count(*) >= 1	boat_1;
SELECT T1.sid, T1.name FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sailor_id GROUP BY T1.sid HAVING count(*) > 1	boat_1;
SELECT DISTINCT T1.name FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.sid HAVING count(*) >= 2	boat_1;
SELECT DISTINCT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = "red" OR T3.color = "blue"	boat_1;
SELECT DISTINCT T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid JOIN boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' OR T3.color = 'blue'	boat_1;
SELECT DISTINCT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = "red" OR T3.color = "blue"	boat_1;
SELECT DISTINCT T1.name, T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid JOIN boats AS T3 ON T2.bid = T3.bid WHERE T3.color = "red" OR T3.color = "blue"	boat_1;
SELECT DISTINCT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' INTERSECT SELECT DISTINCT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bi	boat_1;
SELECT DISTINCT T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid JOIN boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' INTERSECT SELECT DISTINCT T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid JOIN boats AS T3 ON T2.bid = T	boat_1;
SELECT DISTINCT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = "red" INTERSECT SELECT DISTINCT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bi	boat_1;
SELECT DISTINCT T1.name, T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid JOIN boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' INTERSECT SELECT DISTINCT T1.name, T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid JOIN boats AS T3 ON T2.boats AS T3 ON T2.boats	boat_1;
SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves	boat_1;
SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves	boat_1;
SELECT name, sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves)	boat_1;
SELECT name, sid FROM sailors EXCEPT SELECT T2.name, T2.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid = T2.sid	boat_1;
SELECT sid FROM sailors EXCEPT SELECT DISTINCT sid FROM reserves	boat_1;
SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves	boat_1;
SELECT T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.bid = 103	boat_1;
SELECT T3.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.sid WHERE T1.bid = 103	boat_1;
SELECT name FROM Sailors WHERE rating > (SELECT min(rating) FROM Sailors WHERE name = 'Luis')	boat_1;
SELECT name FROM Sailors WHERE rating > (SELECT min(rating) FROM Sailors WHERE name = 'Luis')	boat_1;
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = "Luis")	boat_1;
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = "Luis")	boat_1;
SELECT DISTINCT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T1.rating > 2	boat_1;
SELECT name, sid FROM sailors WHERE rating >= 3 INTERSECT SELECT T1.name, T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid	boat_1;
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1	boat_1;
SELECT name, max(age) FROM Sailors	boat_1;
SELECT count(*) FROM Sailors	boat_1;
SELECT count(*) FROM Sailors	boat_1;
SELECT avg(age) FROM Sailors WHERE rating = 7	boat_1;
SELECT avg(age) FROM Sailors WHERE rating = 7	boat_1;
SELECT count(*) FROM Sailors WHERE name LIKE 'D%'	boat_1;
SELECT count(*) FROM Sailors WHERE name LIKE 'D%'	boat_1;
SELECT avg(rating), max(age) FROM Sailors	boat_1;
SELECT avg(rating), max(age) FROM Sailors	boat_1;
SELECT count(*), T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.boat = T2.bid GROUP BY T1.boat	boat_1;
SELECT count(*), T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.boat = T2.bid GROUP BY T1.boat	boat_1;
SELECT count(*), sid FROM Reserves WHERE bid > 50 GROUP BY sid	boat_1;
SELECT count(*), sid FROM Reserves WHERE bid > 50 GROUP BY sid	boat_1;
SELECT count(*), T1.name FROM Boats AS T1 JOIN Reserves AS T2 ON T1.bid = T2.bid GROUP BY T1.name HAVING count(*) > 1	boat_1;
SELECT count(*), T1.name FROM Boats AS T1 JOIN Reserves AS T2 ON T1.bid = T2.boat_id GROUP BY T1.name HAVING count(*) > 1	boat_1;
SELECT count(*), T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.boat = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.sid GROUP BY T1.boat	boat_1;
SELECT count(*), T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.boat = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.sid GROUP BY T3.sid	boat_1;
SELECT avg(T1.age), T2.rating FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid JOIN boats AS T3 ON T2.bid = T3.bid WHERE T3.color = "red" GROUP BY T2.rating	boat_1;
SELECT avg(T1.age), T2.rating FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid JOIN boats AS T3 ON T2.bid = T3.bid WHERE T3.color = "red" GROUP BY T2.rating	boat_1;
SELECT name, rating, age FROM Sailors ORDER BY rating, age	boat_1;
SELECT name, rating, age FROM Sailors ORDER BY rating, age	boat_1;
SELECT count(*) FROM Boats	boat_1;
SELECT count(*) FROM Boats	boat_1;
SELECT count(*) FROM Boats WHERE color = "red"	boat_1;
SELECT count(*) FROM Boats WHERE color = "red"	boat_1;
SELECT DISTINCT T2.name FROM Sailors AS T1 JOIN Boats AS T2 ON T1.sid = T2.sailors WHERE T1.age BETWEEN 20 AND 30	boat_1;
SELECT DISTINCT T2.name FROM Sailors AS T1 JOIN Boats AS T2 ON T1.sid = T2.booker WHERE T1.age BETWEEN 20 AND 30	boat_1;
SELECT name FROM sailors WHERE rating > (SELECT max(rating) FROM sailors WHERE boats ='red')	boat_1;
SELECT name FROM sailors WHERE rating > (SELECT max(rating) FROM sailors WHERE boats ='red')	boat_1;
SELECT max(rating) FROM Sailors	boat_1;
SELECT max(rating) FROM Sailors	boat_1;
SELECT T3.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.sid WHERE T2.name = 'Melon'	boat_1;
SELECT T3.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.sid WHERE T2.name = "Melon"	boat_1;
SELECT name, age FROM Sailors ORDER BY rating DESC	boat_1;
SELECT name, age FROM Sailors ORDER BY rating DESC	boat_1;
SELECT model FROM headphone ORDER BY price DESC LIMIT 1	headphone_store;
SELECT model FROM headphone ORDER BY price DESC LIMIT 1	headphone_store;
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC	headphone_store;
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC	headphone_store;
SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1	headphone_store;
SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1	headphone_store;
SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*) > 2	headphone_store;
SELECT CLASS FROM headphone EXCEPT SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*) > 2	headphone_store;
SELECT count(*), CLASS FROM headphone WHERE price > 200 GROUP BY CLASS	headphone_store;
SELECT count(*), CLASS FROM headphone WHERE price > 200 GROUP BY CLASS	headphone_store;
SELECT count(DISTINCT earpads) FROM headphone	headphone_store;
SELECT count(DISTINCT earpads) FROM headphone	headphone_store;
SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2	headphone_store;
SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2	headphone_store;
SELECT model, CLASS, construction FROM headphone ORDER BY price ASC LIMIT 1	headphone_store;
SELECT model, CLASS, construction FROM headphone ORDER BY price ASC LIMIT 1	headphone_store;
SELECT avg(Price), Construction FROM headphone GROUP BY Construction	headphone_store;
SELECT avg(Price), Construction FROM headphone GROUP BY Construction	headphone_store;
SELECT CLASS FROM headphone WHERE earpads = "Bowls" INTERSECT SELECT CLASS FROM headphone WHERE earpads = "Comfort Pads"	headphone_store;
SELECT CLASS FROM headphone WHERE earpads = "Bowls" INTERSECT SELECT CLASS FROM headphone WHERE earpads = "Comfort Pads"	headphone_store;
SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction = 'Plastic'	headphone_store;
SELECT earpads FROM headphone WHERE construction!= 'Plastic'	headphone_store;
SELECT model FROM headphone WHERE price  (SELECT avg(price) FROM headphone)	headphone_store;
SELECT model FROM headphone WHERE price  (SELECT avg(price) FROM headphone)	headphone_store;
SELECT Name FROM store ORDER BY Date_Opened	headphone_store;
SELECT Name FROM store ORDER BY Date_Opened	headphone_store;
SELECT name, parking FROM store WHERE neighborhood = "Tarzana"	headphone_store;
SELECT name, parking FROM store WHERE neighborhood = "Tarzana"	headphone_store;
SELECT count(DISTINCT Neighborhood) FROM store	headphone_store;
SELECT count(DISTINCT Neighborhood) FROM store	headphone_store;
SELECT Neighborhood, COUNT(*) FROM store GROUP BY Neighborhood	headphone_store;
SELECT Neighborhood, COUNT(*) FROM store GROUP BY Neighborhood	headphone_store;
SELECT T2.Name, COUNT(*) FROM stock AS T1 JOIN store AS T2 ON T1.Store_ID = T2.Store_ID GROUP BY T1.Store_ID ORDER BY count(*) DESC LIMIT 1	headphone_store;
SELECT T2.Name, sum(T1.quantity) FROM stock AS T1 JOIN store AS T2 ON T1.Store_ID = T2.Store_ID GROUP BY T1.Store_ID	headphone_store;
SELECT Name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)	headphone_store;
SELECT Name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)	headphone_store;
SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)	headphone_store;
SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)	headphone_store;
SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id = t2.headphone_id GROUP BY t2.headphone_id ORDER BY sum(t2.quantity) DESC LIMIT 1	headphone_store;
SELECT T2.Model FROM stock AS T1 JOIN headphone AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Headphone_ID ORDER BY sum(T1.quantity) DESC LIMIT 1	headphone_store;
SELECT count(*) FROM stock AS T1 JOIN store AS T2 ON T1.store_id = T2.store_id WHERE T2.name = "Woodman"	headphone_store;
SELECT sum(T2.quantity) FROM store AS T1 JOIN stock AS T2 ON T1.store_id = T2.store_id WHERE T1.name = "Woodman"	headphone_store;
SELECT neighborhood FROM store EXCEPT SELECT DISTINCT T2.neighborhood FROM stock AS T1 JOIN store AS T2 ON T1.store_id = T2.store_id	headphone_store;
SELECT neighborhood FROM store EXCEPT SELECT DISTINCT T2.neighborhood FROM stock AS T1 JOIN store AS T2 ON T1.store_id = T2.store_id	headphone_store;
SELECT count(*) FROM author	aan_1;
SELECT count(*) FROM author	aan_1;
SELECT count(*) FROM paper	aan_1;
SELECT count(*) FROM paper	aan_1;
SELECT count(*) FROM affiliation	aan_1;
SELECT count(*) FROM affiliation	aan_1;
SELECT count(*) FROM paper WHERE venue = 'NAACL' AND YEAR = 2000	aan_1;
SELECT count(*) FROM paper WHERE venue = 'NAACL' AND YEAR = 2000	aan_1;
SELECT count(*) FROM Paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.affiliation_id = 'Columbia University' AND T1.year = 2009	aan_1;
SELECT count(*) FROM Paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = "Columbia University" AND T1.year = 2009	aan_1;
SELECT name, address FROM affiliation	aan_1;
SELECT name, address FROM affiliation	aan_1;
SELECT venue, YEAR FROM Paper ORDER BY YEAR	aan_1;
SELECT DISTINCT venue FROM Paper ORDER BY YEAR	aan_1;
SELECT t1.title, t1.paper_id FROM paper AS t1 JOIN author_list AS t2 ON t1.paper_id = t2.paper_id JOIN university AS t3 ON t2.affiliation_id = t3.affiliation_id WHERE t3.name = 'Harvard University'	aan_1;
SELECT t1.title, t1.paper_id FROM paper AS t1 JOIN author_list AS t2 ON t1.paper_id = t2.paper_id WHERE t2.affiliation_id = 'Harvard University'	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id = 1 AND T2.name = "Mckeown"	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = "Mckeown"	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.affiliation_id = 'Stanford University' INTERSECT SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.affiliation_id = 	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.affiliation_id = 'Stanford' INTERSECT SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.affiliation_id = 'Columb	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id = 2 AND T2.name = "Mckeown" INTERSECT SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id =	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown' INTERSECT SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Rambow'	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown' EXCEPT SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Rambow'	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown' EXCEPT SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Rambow'	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = "Mckeown" AND T2.name = "Kathleen" UNION SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = "Rambow"	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = "Mckeown" AND T2.name = "Kathleen" UNION SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = "Rambow"	aan_1;
SELECT T1.name, count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY count(*) DESC	aan_1;
SELECT T2.name, count(*) FROM author_list AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id ORDER BY count(*)	aan_1;
SELECT T2.name FROM author_list AS T1 JOIN affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) ASC	aan_1;
SELECT T2.name FROM author_list AS T1 JOIN affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*)	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING count(*) > 50	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING count(*) > 50	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING count(*) = 1	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING count(*) = 1	aan_1;
SELECT venue, YEAR FROM Paper GROUP BY venue, YEAR ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT venue, YEAR FROM Paper GROUP BY venue, YEAR ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1	aan_1;
SELECT venue FROM Paper GROUP BY venue ORDER BY count(*) LIMIT 1	aan_1;
SELECT count(*) FROM citation WHERE cited_paper_id = "A00-1002"	aan_1;
SELECT count(*) FROM citation WHERE cited_paper_id = A00-1002	aan_1;
SELECT count(*) FROM citation WHERE paper_id = "D12-1027"	aan_1;
SELECT count(*) FROM citation WHERE paper_id = "D12-1027"	aan_1;
SELECT paper_id, count(*) FROM citation GROUP BY paper_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT paper_id, count(*) FROM citation GROUP BY paper_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT t1.title FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id = t2.paper_id GROUP BY t2.cited_paper_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT t1.title FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id = t2.paper_id GROUP BY t2.cited_paper_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T1.title, count(*) FROM paper AS T1 JOIN citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.cited_paper_id ORDER BY count(*) DESC LIMIT 10	aan_1;
SELECT T1.title, count(*) FROM paper AS T1 JOIN citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 10	aan_1;
SELECT count(*) FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T1.name = "Mckeown" AND T1.name = "Kathleen"	aan_1;
SELECT count(*) FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T1.name = "Mckeown" AND T1.name = "Kathleen"	aan_1;
SELECT count(*) FROM author_list AS T1 JOIN citation AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckeown', T1.name = 'Kathleen'	aan_1;
SELECT count(*) FROM author_list AS T1 JOIN citation AS T2 ON T1.author_id = T2.author_id WHERE T1.name = "Mckeown, Kathleen"	aan_1;
SELECT T1.name, count(*) FROM Author AS T1 JOIN Citation AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T1.name, count(*) FROM Author AS T1 JOIN Citation AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT venue, YEAR FROM Paper AS T1 JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown', T2.name = 'Kathleen'	aan_1;
SELECT venue, YEAR FROM Paper AS T1 JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown', T2.name = 'Kathleen'	aan_1;
SELECT venue, YEAR FROM Paper WHERE author = "Columbia University"	aan_1;
SELECT venue, YEAR FROM Paper WHERE author = "Columbia University"	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.year = 2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.year = 2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T2.name FROM paper AS T1 JOIN affiliation AS T2 ON T1.paper_id = T2.affiliation_id WHERE T1.year = 2009 GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 3	aan_1;
SELECT T2.name FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T1.year = 2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3	aan_1;
SELECT count(*) FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name IN ( SELECT * FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.year = 2009 )	aan_1;
SELECT count(*) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = "Columbia University" AND T1.year = 2009	aan_1;
SELECT count(*) FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T1.year BETWEEN 2000 AND 2009 AND T2.name = "Stanford University"	aan_1;
SELECT count(*) FROM paper AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T1.year BETWEEN 2000 AND 2009 AND T2.name = "Stanford University"	aan_1;
SELECT t2.title FROM author_list AS t1 JOIN paper AS t2 ON t1.paper_id = t2.paper_id GROUP BY t1.paper_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT t2.title FROM author_list AS t1 JOIN paper AS t2 ON t1.paper_id = t2.paper_id WHERE t1.author_id = (SELECT max(author_id) FROM author_list)	aan_1;
SELECT count(*) FROM author_list AS T1 JOIN collaborator AS T2 ON T1.author_id = T2.author_id WHERE T2.name = "Mckeown", T2.name = "Kathleen"	aan_1;
SELECT count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T1.name = "Mckeown, Kathleen"	aan_1;
SELECT T2.name FROM author_list AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown, Kathleen' GROUP BY T2.name ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T2.name FROM author_list AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown, Kathleen' GROUP BY T2.name ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT paper_id FROM paper WHERE title LIKE '%translation%'	aan_1;
SELECT paper_id FROM paper WHERE title LIKE '%translation%'	aan_1;
SELECT paper_id, title FROM paper WHERE paper_id NOT IN (SELECT paper_id FROM Citation)	aan_1;
SELECT paper_id, title FROM paper WHERE paper_id NOT IN (SELECT paper_id FROM citation)	aan_1;
SELECT T1.name FROM affiliation AS T1 JOIN author_list AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T1.address LIKE '%China%' GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T1.name FROM affiliation AS T1 JOIN author_list AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T1.address LIKE '%China%' GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT count(*), venue FROM Paper GROUP BY venue	aan_1;
SELECT venue, YEAR, count(*) FROM paper GROUP BY venue, YEAR	aan_1;
SELECT count(*), affiliation_id FROM author_list GROUP BY affiliation_id	aan_1;
SELECT T2.name, count(*) FROM author_list AS T1 JOIN affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id	aan_1;
SELECT T1.title FROM paper AS T1 JOIN citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.paper_id HAVING count(*) > 50	aan_1;
SELECT T1.title FROM paper AS T1 JOIN citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.paper_id HAVING count(*) > 50	aan_1;
SELECT count(*) FROM author_list WHERE author_id NOT IN ( SELECT author_id FROM citation WHERE cited_paper_id > 50 )	aan_1;
SELECT count(*) FROM author_list WHERE author_id NOT IN ( SELECT author_id FROM citation WHERE cited_paper_id > 50 )	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.venue = 'NAACL' INTERSECT SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.venue = 'ACL' AND T2.year = 2009	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.venue = 'NAACL' INTERSECT SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.venue = 'ACL' AND YEAR = 2009	aan_1;
SELECT name FROM author EXCEPT SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.venue = 'ACL'	aan_1;
SELECT name FROM author EXCEPT SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.venue = 'ACL'	aan_1;
SELECT count(*) FROM conference	conference;
SELECT count(*) FROM conference	conference;
SELECT DISTINCT Conference_Name FROM conference	conference;
SELECT DISTINCT Conference_Name FROM conference	conference;
SELECT Conference_Name, YEAR, LOCATION FROM conference	conference;
SELECT Conference_Name, YEAR, LOCATION FROM conference	conference;
SELECT Conference_Name, COUNT(*) FROM conference GROUP BY Conference_Name	conference;
SELECT Conference_Name, COUNT(*) FROM conference GROUP BY Conference_Name	conference;
SELECT YEAR, count(*) FROM conference GROUP BY YEAR	conference;
SELECT YEAR, count(*) FROM conference GROUP BY YEAR	conference;
SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) ASC LIMIT 1	conference;
SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) ASC LIMIT 1	conference;
SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*) >= 2	conference;
SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*) >= 2	conference;
SELECT institution_name, LOCATION, founded FROM institution	conference;
SELECT institution_name, LOCATION, founded FROM institution	conference;
SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900	conference;
SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900	conference;
SELECT institution_name, LOCATION FROM institution ORDER BY founded DESC LIMIT 1	conference;
SELECT institution_name, LOCATION FROM institution ORDER BY founded DESC LIMIT 1	conference;
SELECT institution_name, count(*) FROM institution WHERE founded > 1800 GROUP BY institution_name	conference;
SELECT T2.name, count(*), T1.institution_id FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1800 GROUP BY T1.institution_id	conference;
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)	conference;
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)	conference;
SELECT name FROM staff WHERE age > (SELECT avg(age) FROM staff)	conference;
SELECT name FROM staff WHERE age > (SELECT avg(age) FROM staff)	conference;
SELECT max(age), min(age) FROM staff WHERE Nationality = "United States"	conference;
SELECT max(age), min(age) FROM staff	conference;
SELECT T3.Conference_Name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id JOIN conference AS T3 ON T2.conference_id = T3.conference_id WHERE T1.Nationality = "Canada"	conference;
SELECT T3.Conference_Name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id JOIN conference AS T3 ON T2.conference_id = T3.conference_id WHERE T1.Nationality = "Canada"	conference;
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id WHERE T2.role = 'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id WHERE T2.role = 'Sponsor'	conference;
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id WHERE T2.role = 'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id WHERE T2.role = 'Sponsor'	conference;
SELECT T1.name FROM staff AS T1 JOIN conference AS T2 ON T1.staff_id = T2.staff_id WHERE T2.Conference_Name = "ACL" INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference AS T2 ON T1.staff_id = T2.staff_id WHERE T2.Conference_Name = "Naccl"	conference;
SELECT T3.name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id JOIN conference AS T3 ON T1.conference_id = T3.conference_id WHERE T3.Conference_Name = 'ACL' INTERSECT SELECT T3.name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id JOIN conference AS T3 ON T1.	conference;
SELECT T2.name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.year = 2003 OR T1.year = 2004	conference;
SELECT T2.name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.year = 2003 OR T1.year = 2004	conference;
SELECT T1.Conference_Name, T1.Year, count(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID	conference;
SELECT T1.Conference_Name, T1.Year, count(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID	conference;
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY count(*) DESC LIMIT 2	conference;
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY count(*) DESC LIMIT 2	conference;
SELECT name, nationality FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE conference_name = 'ACL')	conference;
SELECT name, nationality FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE conference_name = 'ACL')	conference;
SELECT institution_name, LOCATION FROM institution EXCEPT SELECT T1.institution_name, T1.location FROM institution AS T1 JOIN conference_participation AS T2 ON T1.institution_id = T2.institution_id WHERE T2.year = 2004	conference;
SELECT institution_name, LOCATION FROM institution EXCEPT SELECT T1.institution_name, T1.location FROM institution AS T1 JOIN conference_participation AS T2 ON T1.institution_id = T2.institution_id WHERE T2.year = 2004	conference;
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1	pilot_1;
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE age  (SELECT avg(age) FROM PilotSkills) ORDER BY age	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE age  (SELECT avg(age) FROM PilotSkills) ORDER BY age	pilot_1;
SELECT * FROM PilotSkills WHERE age  30	pilot_1;
SELECT * FROM PilotSkills WHERE age  30	pilot_1;
SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = "Piper Cub" AND age  35	pilot_1;
SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = "Piper Cub" AND age  35	pilot_1;
SELECT LOCATION FROM Hangar WHERE plane_name = 'F-14 Fighter'	pilot_1;
SELECT LOCATION FROM Hangar WHERE plane_name = 'F-14 Fighter'	pilot_1;
SELECT count(DISTINCT LOCATION) FROM Hangar	pilot_1;
SELECT count(DISTINCT LOCATION) FROM hangar	pilot_1;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32	pilot_1;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age > 40	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age > 40	pilot_1;
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.Plane_name = T2.Plane_name WHERE T1.age  35 AND T2.plane_name = "B-52 Bomber"	pilot_1;
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age  35 AND T2.plane_name = "B-52 Bomber"	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE plane_name = "Piper Cub" AND age = (SELECT min(age) FROM PilotSkills WHERE plane_name = "Piper Cub")	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE plane_name = "Piper Cub" ORDER BY age LIMIT 1	pilot_1;
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1	pilot_1;
SELECT plane_name FROM FlightGear GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1	pilot_1;
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) ASC LIMIT 1	pilot_1;
SELECT plane_name FROM PlaneSkills GROUP BY plane_name ORDER BY count(*) ASC LIMIT 1	pilot_1;
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.Plane_name = T2.Plane_Name WHERE T2.location = "Chicago"	pilot_1;
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.Plane_name = T2.Plane_Name WHERE T2.location = "Chicago"	pilot_1;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41	pilot_1;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41	pilot_1;
SELECT count(DISTINCT plane_name) FROM PilotSkills	pilot_1;
SELECT count(DISTINCT plane_name) FROM PilotSkills	pilot_1;
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = 'Smith'	pilot_1;
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = 'Smith'	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age > 40	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age > 40	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age	pilot_1;
SELECT pilot_name FROM PilotSkills ORDER BY age DESC	pilot_1;
SELECT pilot_name FROM PilotSkills ORDER BY age DESC	pilot_1;
SELECT LOCATION FROM Hangar ORDER BY plane_name	pilot_1;
SELECT DISTINCT LOCATION FROM Hangar ORDER BY plane_name	pilot_1;
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name	pilot_1;
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age  30 OR age > 40	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age > 40 OR age  30	pilot_1;
SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 UNION SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'F-14 Fighter' AND age  30	pilot_1;
SELECT DISTINCT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Pilot AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" AND T1.age > 35 OR T2.plane_name = "F-14 Fighter" AND T1.age  30	pilot_1;
SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" EXCEPT SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "B-52 Bomber"	pilot_1;
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN PlaneSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" EXCEPT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN PlaneSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "B-52 Bomber"	pilot_1;
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'Piper Cub' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'B-52 Bomber'	pilot_1;
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'Piper Cub' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'B-52 Bomber'	pilot_1;
SELECT avg(age), min(age) FROM PilotSkills	pilot_1;
SELECT avg(age), min(age) FROM PilotSkills	pilot_1;
SELECT T3.pilot_name FROM hangar AS T1 JOIN pilot_skills AS T2 ON T1.plane_name = T2.plane_name JOIN pilot_skills AS T3 ON T2.pilot_name = T3.pilot_name WHERE T1.location = 'Austin' INTERSECT SELECT T3.pilot_name FROM hangar AS T1 JOIN pilot_skills AS T2 ON T1.plane_name = T2.pilot_name WHERE T	pilot_1;
SELECT T3.pilot_name FROM hangar AS T1 JOIN pilot_skills AS T2 ON T1.plane_name = T2.plane_name JOIN pilot_skills AS T3 ON T2.pilot_name = T3.pilot_name WHERE T1.location = 'Austin' INTERSECT SELECT T3.pilot_name FROM hangar AS T1 JOIN pilot_skills AS T2 ON T1.plane_name = T2.pilot_name WHERE T	pilot_1;
SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" OR T2.plane_name = "F-14 Fighter"	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter'	pilot_1;
SELECT avg(age), plane_name FROM PilotSkills GROUP BY plane_name	pilot_1;
SELECT avg(age), plane_name FROM PilotSkills GROUP BY plane_name	pilot_1;
SELECT plane_name, count(*) FROM Hangar GROUP BY plane_name	pilot_1;
SELECT count(*), plane_name FROM PilotSkills GROUP BY plane_name	pilot_1;
SELECT pilot_name, plane_name FROM PilotSkills GROUP BY plane_name ORDER BY plane_name	pilot_1;
SELECT DISTINCT plane_name, pilot_name FROM PilotSkills ORDER BY plane_name	pilot_1;
SELECT plane_name, max(age) FROM PilotSkills GROUP BY plane_name	pilot_1;
SELECT plane_name, pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1	pilot_1;
SELECT max(age), pilot_name FROM PilotSkills GROUP BY pilot_name	pilot_1;
SELECT max(age), pilot_name FROM PilotSkills GROUP BY pilot_name	pilot_1;
SELECT count(*), avg(age), LOCATION FROM Hangar GROUP BY LOCATION	pilot_1;
SELECT avg(T1.age), T2.location FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name GROUP BY T2.location	pilot_1;
SELECT plane_name, count(*) FROM PilotSkills GROUP BY plane_name HAVING avg(age)  35	pilot_1;
SELECT plane_name, avg(age) FROM PilotSkills GROUP BY plane_name HAVING avg(age)  35	pilot_1;
SELECT T2.location FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name ORDER BY T1.age LIMIT 1	pilot_1;
SELECT T2.location FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name ORDER BY T1.age ASC LIMIT 1	pilot_1;
SELECT DISTINCT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'	pilot_1;
SELECT DISTINCT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT min(age) FROM PilotSkills WHERE plane_name = "Piper Cub") ORDER BY pilot_name	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT min(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age  (SELECT min(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age  (SELECT max(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')	pilot_1;
SELECT DISTINCT plane_name FROM PlaneSkills WHERE plane_name LIKE '%Bomber%'	pilot_1;
SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name LIKE "%Bomber%"	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age > (SELECT min(age) FROM PilotSkills WHERE plane_name = "Piper Cub")	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age > (SELECT min(age) FROM PilotSkills WHERE plane_name = "Piper Cub")	pilot_1;
SELECT name FROM district ORDER BY area_km DESC LIMIT 1	district_spokesman;
SELECT Area_km, Government_website FROM district ORDER BY Population ASC LIMIT 1	district_spokesman;
SELECT name, population FROM district WHERE area_km > (SELECT avg(area_km) FROM district)	district_spokesman;
SELECT max(Area_km), avg(Area_km) FROM district	district_spokesman;
SELECT sum(population) FROM district ORDER BY Area_km DESC LIMIT 3	district_spokesman;
SELECT District_ID, Name, Government_website FROM district ORDER BY Population	district_spokesman;
SELECT name FROM district WHERE government_website LIKE 'linke.gov'	district_spokesman;
SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000	district_spokesman;
SELECT Name, Speach_title FROM spokesman	district_spokesman;
SELECT avg(Points), avg(Age) FROM spokesman WHERE rank_position = 1	district_spokesman;
SELECT Name, Points FROM spokesman WHERE Age  40	district_spokesman;
SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1	district_spokesman;
SELECT Name FROM spokesman WHERE Points  (SELECT avg(Points) FROM spokesman)	district_spokesman;
SELECT T2.Name FROM spokesman_district AS T1 JOIN district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.District_ID ORDER BY count(*) DESC LIMIT 1	district_spokesman;
SELECT T2.Name FROM spokesman_district AS T1 JOIN spokesman AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID WHERE T1.Start_year  2004	district_spokesman;
SELECT T2.Name, COUNT(*) FROM spokesman_district AS T1 JOIN district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.District_ID	district_spokesman;
SELECT T2.Name FROM spokesman_district AS T1 JOIN district AS T2 ON T1.District_ID = T2.District_ID WHERE T1.Rank_position = 1 INTERSECT SELECT T2.Name FROM spokesman_district AS T1 JOIN district AS T2 ON T1.District_ID = T2.District_ID WHERE T1.Rank_position = 2	district_spokesman;
SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.District_ID HAVING COUNT(*) > 1	district_spokesman;
SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)	district_spokesman;
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)	district_spokesman;
SELECT sum(population), avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)	district_spokesman;
SELECT title FROM sculptures ORDER BY YEAR DESC LIMIT 1	art_1;
SELECT title FROM sculptures ORDER BY YEAR DESC LIMIT 1	art_1;
SELECT title, LOCATION FROM paintings ORDER BY YEAR ASC LIMIT 1	art_1;
SELECT title, LOCATION FROM paintings ORDER BY YEAR ASC LIMIT 1	art_1;
SELECT title FROM sculptures WHERE LOCATION = "Gallery 226"	art_1;
SELECT title FROM sculptures WHERE LOCATION = "Gallery 226"	art_1;
SELECT title, LOCATION FROM paintings	art_1;
SELECT title, LOCATION FROM paintings	art_1;
SELECT title, LOCATION FROM Sculptures	art_1;
SELECT title, LOCATION FROM Sculptures	art_1;
SELECT medium FROM paintings WHERE paintingid = 80	art_1;
SELECT medium FROM paintings WHERE paintingID = 80	art_1;
SELECT fname, lname FROM Artists WHERE birthYear > 1850	art_1;
SELECT fname, lname FROM Artists WHERE birthYear > 1850	art_1;
SELECT title, YEAR FROM sculptures WHERE LOCATION!= "Gallery 226"	art_1;
SELECT title, YEAR FROM sculptures WHERE LOCATION!= "Gallery 226"	art_1;
SELECT DISTINCT T1.fname, T1.lname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid = T2.sculptorid WHERE T2.year  1900	art_1;
SELECT DISTINCT T1.fname, T1.lname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid = T2.sculptorid WHERE T2.year  1900	art_1;
SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid = T2.sculptorid WHERE T2.year > 1920	art_1;
SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid = T2.sculptorid WHERE T2.year > 1920	art_1;
SELECT fname, lname FROM Artists ORDER BY deathYear DESC LIMIT 1	art_1;
SELECT fname, lname FROM Artists ORDER BY deathYear DESC LIMIT 1	art_1;
SELECT birthYear FROM Artists ORDER BY deathYear ASC LIMIT 1	art_1;
SELECT birthYear FROM Artists ORDER BY deathYear ASC LIMIT 1	art_1;
SELECT fname, birthYear FROM Artists ORDER BY deathYear DESC LIMIT 1	art_1;
SELECT fname, birthYear FROM Artists ORDER BY deathYear DESC LIMIT 1	art_1;
SELECT count(*) FROM paintings WHERE LOCATION = "Gallery 240"	art_1;
SELECT count(*) FROM paintings WHERE LOCATION = "Gallery 240"	art_1;
SELECT count(*) FROM Paintings AS T1 JOIN Artists AS T2 ON T1.artistid = T2.artistid ORDER BY T2.deathYear DESC LIMIT 1	art_1;
SELECT count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid ORDER BY T1.deathyear DESC LIMIT 1	art_1;
SELECT T2.title, T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid WHERE T1.fname = "Mary"	art_1;
SELECT T2.title, T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.painterid WHERE T1.fname = "Mary"	art_1;
SELECT DISTINCT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid WHERE T1.birthYear  1850	art_1;
SELECT avg(width_mm) FROM paintings AS T1 JOIN artists AS T2 ON T1.paintingid = T2.artistid WHERE T2.birthyear  1850	art_1;
SELECT DISTINCT T2.location, T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid WHERE T1.fname = "Pablo"	art_1;
SELECT T2.location, T2.mediumOn FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid WHERE T1.fname = "Pablo"	art_1;
SELECT T2.fname, T2.lname FROM paintings AS T1 JOIN sculptures AS T2 ON T1.paintingid = T2.paintingid	art_1;
SELECT T1.fname, T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid INTERSECT SELECT T1.fname, T1.lname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid = T2.sculptorid	art_1;
SELECT T1.fname, T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid WHERE T2.medium = "oil" INTERSECT SELECT T1.fname, T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid WHERE T2.medium = "lithograph"	art_1;
SELECT T2.fname, T2.lname FROM paintings AS T1 JOIN artists AS T2 ON T1.paintingid = T2.artistid WHERE T1.medium = "oil" INTERSECT SELECT T2.fname, T2.lname FROM paintings AS T1 JOIN artists AS T2 ON T1.paintingid = T2.artistid WHERE T1.medium = "lithograph"	art_1;
SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid WHERE T2.year = 1884 AND T2.mediumOn = "canvas"	art_1;
SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid WHERE T2.year = 1884	art_1;
SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid WHERE T2.medium = "oil" AND T2.location = "Gallery 241"	art_1;
SELECT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid WHERE T2.medium = "oil" AND T2.location = "Gallery 241"	art_1;
SELECT medium, count(*) FROM Paintings GROUP BY medium	art_1;
SELECT medium, count(*) FROM paintings GROUP BY medium	art_1;
SELECT avg(height_mm), medium FROM paintings GROUP BY medium	art_1;
SELECT avg(height_mm), medium FROM paintings GROUP BY medium	art_1;
SELECT count(*), LOCATION FROM paintings WHERE YEAR  1900 GROUP BY LOCATION	art_1;
SELECT count(*), LOCATION FROM paintings WHERE YEAR  1900 GROUP BY LOCATION	art_1;
SELECT title FROM paintings WHERE YEAR > 1910 AND medium = "oil"	art_1;
SELECT title FROM paintings WHERE medium = "oil" AND YEAR > 1910	art_1;
SELECT DISTINCT painterid FROM paintings WHERE medium = "oil" AND LOCATION = "Gallery 240"	art_1;
SELECT DISTINCT painterid FROM paintings WHERE medium = "oil" AND LOCATION = "Gallery 240"	art_1;
SELECT DISTINCT title FROM paintings WHERE height_mm > (SELECT min(height_mm) FROM paintings WHERE mediumOn = "canvas")	art_1;
SELECT DISTINCT title FROM paintings WHERE height_mm > (SELECT min(height_mm) FROM paintings WHERE mediumOn = "canvas")	art_1;
SELECT DISTINCT paintingID FROM paintings WHERE YEAR > (SELECT min(YEAR) FROM paintings WHERE LOCATION = "Gallery 240")	art_1;
SELECT DISTINCT paintingID FROM paintings WHERE YEAR > (SELECT min(YEAR) FROM paintings WHERE LOCATION = "Gallery 240")	art_1;
SELECT paintingID FROM paintings ORDER BY YEAR ASC LIMIT 1	art_1;
SELECT paintingID FROM paintings ORDER BY YEAR ASC LIMIT 1	art_1;
SELECT T2.fname, T2.lname FROM Sculptures AS T1 JOIN Artists AS T2 ON T1.sculptorID = T2.artistID WHERE T1.title LIKE "%female%"	art_1;
SELECT T1.fname, T1.lname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid = T2.sculptorid WHERE T2.title LIKE "%female%"	art_1;
SELECT DISTINCT title FROM paintings ORDER BY title	art_1;
SELECT DISTINCT title FROM paintings ORDER BY title	art_1;
SELECT DISTINCT title FROM paintings ORDER BY width_mm	art_1;
SELECT DISTINCT title FROM paintings ORDER BY height_mm LIMIT 1	art_1;
SELECT title FROM paintings INTERSECT SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950	art_1;
SELECT title FROM paintings AND sculptures WHERE YEAR BETWEEN 1900 AND 1950	art_1;
SELECT T1.title FROM paintings AS T1 JOIN sculptures AS T2 ON T1.paintingid = T2.paintingid WHERE T2.sculptorid = 222	art_1;
SELECT T1.title FROM paintings AS T1 JOIN sculptures AS T2 ON T1.paintingid = T2.paintingid WHERE T2.sculptorid = 222	art_1;
SELECT painterid FROM Paintings WHERE YEAR  1900 GROUP BY painterid ORDER BY count(*) DESC LIMIT 1	art_1;
SELECT painterid FROM paintings WHERE YEAR  1900 GROUP BY painterid ORDER BY count(*) DESC LIMIT 1	art_1;
SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid = T2.sculptorid GROUP BY T2.sculptorid ORDER BY count(*) DESC LIMIT 1	art_1;
SELECT t1.fname FROM artists AS t1 JOIN sculptures AS t2 ON t1.artistid = t2.sculptorid GROUP BY t2.sculptorid ORDER BY count(*) DESC LIMIT 1	art_1;
SELECT title FROM paintings WHERE width_mm  600 OR height_mm > 800	art_1;
SELECT title FROM paintings WHERE width_mm  600 OR height_mm > 800	art_1;
SELECT LOCATION FROM paintings WHERE YEAR  1885 OR YEAR > 1930	art_1;
SELECT LOCATION FROM paintings WHERE YEAR  1885 OR YEAR > 1930	art_1;
SELECT paintingid FROM paintings WHERE height_mm > 500 INTERSECT SELECT paintingid FROM paintings WHERE height_mm  2000	art_1;
SELECT paintingID FROM paintings WHERE height_mm > 500 AND width_mm  2000	art_1;
SELECT LOCATION FROM paintings WHERE mediumOn = "panel" INTERSECT SELECT LOCATION FROM paintings WHERE mediumOn = "canvas"	art_1;
SELECT LOCATION FROM paintings WHERE mediumOn = "panel" INTERSECT SELECT LOCATION FROM paintings WHERE mediumOn = "canvas"	art_1;
SELECT LOCATION FROM paintings WHERE YEAR  1885 INTERSECT SELECT LOCATION FROM paintings WHERE YEAR > 1930	art_1;
SELECT LOCATION FROM paintings WHERE YEAR  1885 INTERSECT SELECT LOCATION FROM paintings WHERE YEAR > 1930	art_1;
SELECT avg(height_mm), avg(width_mm) FROM paintings WHERE LOCATION = "Gallery 241" AND medium = "oil"	art_1;
SELECT avg(height_mm), avg(width_mm) FROM paintings WHERE location = "Gallery 241" AND medium = "oil"	art_1;
SELECT max(height_mm), paintingID FROM paintings WHERE YEAR  1900	art_1;
SELECT max(height_mm), paintingID FROM paintings WHERE YEAR  1900	art_1;
SELECT max(height_mm), max(width_mm), YEAR FROM paintings GROUP BY YEAR	art_1;
SELECT max(height_mm), max(width_mm), YEAR FROM paintings GROUP BY YEAR	art_1;
SELECT avg(height_mm), avg(width_mm), painterID FROM paintings GROUP BY painterID ORDER BY fname	art_1;
SELECT avg(height_mm), avg(width_mm), painterID FROM paintings GROUP BY painterID ORDER BY fname	art_1;
SELECT T2.fname, count(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.paintingid = T2.artistid GROUP BY T1.paintingid HAVING count(*) >= 2	art_1;
SELECT T2.fname, count(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.paintingid = T2.artistid GROUP BY T1.paintingid HAVING count(*) >= 2	art_1;
SELECT T1.deathYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid GROUP BY T2.artistid HAVING count(*) = 3	art_1;
SELECT T1.deathYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid GROUP BY T2.artistid HAVING count(*)  4	art_1;
SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid = T2.sculptorid GROUP BY T2.sculptorid ORDER BY count(*) LIMIT 1	art_1;
SELECT T2.deathYear FROM sculptures AS T1 JOIN artists AS T2 ON T1.sculptorID = T2.artistID GROUP BY T1.sculptorID ORDER BY count(*) LIMIT 1	art_1;
SELECT paintingid, height_mm FROM paintings WHERE LOCATION = "Gallery 240" ORDER BY width_mm DESC LIMIT 1	art_1;
SELECT max(height_mm), paintingID FROM paintings WHERE LOCATION = "Gallery 240"	art_1;
SELECT paintingid FROM paintings WHERE YEAR  (SELECT min(YEAR) FROM paintings WHERE LOCATION = "Gallery 240")	art_1;
SELECT paintingid FROM paintings WHERE YEAR  (SELECT max(year) FROM paintings WHERE gallery = 240)	art_1;
SELECT paintingID FROM paintings WHERE height_mm > (SELECT max(height_mm) FROM paintings WHERE YEAR > 1900)	art_1;
SELECT paintingid FROM paintings WHERE height_mm > (SELECT max(height_mm) FROM paintings WHERE YEAR > 1900)	art_1;
SELECT T2.fname, T2.lname FROM paintings AS T1 JOIN artists AS T2 ON T1.painterid = T2.artistid WHERE T1.medium = "oil" GROUP BY T2.artistid ORDER BY count(*) DESC LIMIT 3	art_1;
SELECT T1.fname, T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.painterid WHERE T2.medium = "oil" GROUP BY T2.artistid ORDER BY count(*) DESC LIMIT 1	art_1;
SELECT paintingid, LOCATION, title FROM paintings WHERE medium = "oil" ORDER BY YEAR	art_1;
SELECT paintingid, LOCATION, title FROM paintings WHERE medium = "oil" ORDER BY YEAR	art_1;
SELECT year, LOCATION, title FROM paintings WHERE height_mm > 1000 ORDER BY title	art_1;
SELECT year, LOCATION, title FROM paintings WHERE height_mm > 1000 ORDER BY title	art_1;
SELECT fname, lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid EXCEPT SELECT T1.fname, T1.lname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid = T2.sculptorid	art_1;
SELECT fname, lname FROM artists WHERE artistID NOT IN (SELECT artistID FROM sculptures) INTERSECT SELECT T1.fname, T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.paintingid	art_1;
SELECT LOCATION FROM paintings WHERE YEAR  1885 EXCEPT SELECT LOCATION FROM paintings WHERE mediumOn = "canvas"	art_1;
SELECT LOCATION FROM paintings WHERE YEAR  1885 AND medium!= "canvas"	art_1;
SELECT count(*) FROM race	car_road_race;
SELECT count(*) FROM race	car_road_race;
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC	car_road_race;
SELECT Winning_driver, Winning_team FROM race ORDER BY winning_team	car_road_race;
SELECT Winning_driver FROM race WHERE Pole_Position!= "Junior Strous"	car_road_race;
SELECT Winning_driver FROM race WHERE Pole_Position!= "Junior Strous"	car_road_race;
SELECT Constructor FROM driver ORDER BY Age ASC	car_road_race;
SELECT DISTINCT constructor FROM driver ORDER BY age	car_road_race;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20	car_road_race;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20	car_road_race;
SELECT max(age), min(age) FROM driver	car_road_race;
SELECT max(age), min(age) FROM driver	car_road_race;
SELECT count(DISTINCT engine) FROM driver WHERE age  20 OR age > 30	car_road_race;
SELECT count(DISTINCT engine) FROM driver WHERE age > 30 OR age  20	car_road_race;
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC	car_road_race;
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC	car_road_race;
SELECT T3.Driver_Name, T2.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN event AS T3 ON T1.Race_ID = T3.Race_ID	car_road_race;
SELECT T3.Driver_Name, T2.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN event AS T3 ON T1.Race_ID = T3.Race_ID	car_road_race;
SELECT T2.Driver_Name, COUNT(*) FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID	car_road_race;
SELECT T2.Driver_name, count(*) FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.driver_id GROUP BY T1.driver_id	car_road_race;
SELECT T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id GROUP BY T1.driver_id ORDER BY count(*) DESC LIMIT 1	car_road_race;
SELECT T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id GROUP BY T1.driver_id ORDER BY count(*) DESC LIMIT 1	car_road_race;
SELECT T2.driver_name, T2.age FROM race AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T1.driver_id HAVING count(*) >= 2	car_road_race;
SELECT T2.driver_name, T2.age FROM race AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T1.driver_id HAVING count(*) >= 2	car_road_race;
SELECT DISTINCT T1.race_name FROM race AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.age >= 26	car_road_race;
SELECT DISTINCT T1.race_name FROM race AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.age >= 26	car_road_race;
SELECT driver_name FROM driver WHERE constructor!= 'Bugatti'	car_road_race;
SELECT Driver_Name FROM driver WHERE Constructor!= "Bugatti"	car_road_race;
SELECT count(*), Constructor FROM driver GROUP BY Constructor	car_road_race;
SELECT count(*), Constructor FROM driver GROUP BY Constructor	car_road_race;
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1	car_road_race;
SELECT engine FROM car GROUP BY engine ORDER BY count(*) DESC LIMIT 1	car_road_race;
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2	car_road_race;
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2	car_road_race;
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)	car_road_race;
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)	car_road_race;
SELECT Constructor FROM driver WHERE Age  20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30	car_road_race;
SELECT Constructor FROM driver WHERE Age  20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30	car_road_race;
SELECT winning_team FROM race GROUP BY winning_team HAVING count(*) > 1	car_road_race;
SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*) > 1	car_road_race;
SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.Pole_Position = "James Hinchcliffe" INTERSECT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.Pole_Position = "Carl Skerlong"	car_road_race;
SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.pole_position = "James Hinchcliffe" INTERSECT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.pole_position = "Carl Skerlong"	car_road_race;
SELECT driver_name FROM driver EXCEPT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.pole_position = "James Hinchcliffe"	car_road_race;
SELECT driver_name FROM driver EXCEPT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.pole_position = "James Hinchcliffe"	car_road_race;
SELECT count(*) FROM languages	country_language;
SELECT count(*) FROM languages	country_language;
SELECT name FROM languages ORDER BY name ASC	country_language;
SELECT name FROM languages ORDER BY name	country_language;
SELECT name FROM languages WHERE name LIKE "%ish%"	country_language;
SELECT name FROM languages WHERE name LIKE "%ish%"	country_language;
SELECT name FROM countries ORDER BY overall_score DESC	country_language;
SELECT name FROM countries ORDER BY overall_score DESC	country_language;
SELECT avg(justice_score) FROM countries	country_language;
SELECT avg(justice_score) FROM countries	country_language;
SELECT max(health_score), min(health_score) FROM countries WHERE name!= 'Norway'	country_language;
SELECT max(health_score), min(health_score) FROM countries WHERE name!= 'Norway'	country_language;
SELECT count(DISTINCT language_id) FROM official_languages	country_language;
SELECT count(DISTINCT language_id) FROM official_languages	country_language;
SELECT name FROM countries ORDER BY education_score DESC	country_language;
SELECT name FROM countries ORDER BY education_score DESC	country_language;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1	country_language;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1	country_language;
SELECT T1.name, T2.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id	country_language;
SELECT T1.name, T2.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id	country_language;
SELECT T2.name, count(*) FROM official_languages AS T1 JOIN countries AS T2 ON T1.country_id = T2.id GROUP BY T1.language_id	country_language;
SELECT T1.name, count(*) FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.id	country_language;
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id ORDER BY count(*) DESC LIMIT 1	country_language;
SELECT t1.name FROM languages AS t1 JOIN official_languages AS t2 ON t1.id = t2.language_id GROUP BY t2.language_id ORDER BY count(*) DESC LIMIT 1	country_language;
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id HAVING count(*) >= 2	country_language;
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id HAVING count(*) >= 2	country_language;
SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id WHERE T2.name = "English"	country_language;
SELECT avg(T2.overall_score) FROM official_languages AS T1 JOIN countries AS T2 ON T1.country_id = T2.id WHERE T1.name = 'English'	country_language;
SELECT T2.name, T1.id FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 3	country_language;
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id ORDER BY count(*) DESC LIMIT 3	country_language;
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id JOIN countries AS T3 ON T2.country_id = T3.id ORDER BY avg(T3.overall_score) DESC	country_language;
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id JOIN countries AS T3 ON T2.country_id = T3.id GROUP BY T2.country_id ORDER BY avg(T3.overall_score) DESC	country_language;
SELECT T1.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1	country_language;
SELECT T1.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1	country_language;
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)	country_language;
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)	country_language;
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)	country_language;
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)	country_language;
SELECT T3.name FROM official_languages AS T1 JOIN countries AS T2 ON T1.country_id = T2.id JOIN languages AS T3 ON T1.language_id = T3.id WHERE T2.overall_score > 95 INTERSECT SELECT T3.name FROM official_languages AS T1 JOIN countries AS T2 ON T1.country_id = T2.id JOIN languages AS T3 ON T1.language_id = T3.	country_language;
SELECT T3.name FROM official_languages AS T1 JOIN countries AS T2 ON T1.country_id = T2.id JOIN languages AS T3 ON T1.language_id = T3.id WHERE T2.overall_score > 95 INTERSECT SELECT T3.name FROM official_languages AS T1 JOIN countries AS T2 ON T1.country_id = T2.id JOIN languages AS T3 ON T1.language_id = T3.	country_language;
SELECT country, town_city FROM addresses	real_estate_rentals;
SELECT country, town_city FROM addresses	real_estate_rentals;
SELECT county_state_province FROM addresses	real_estate_rentals;
SELECT county_state_province FROM addresses	real_estate_rentals;
SELECT feature_description FROM features WHERE feature_name = "rooftop"	real_estate_rentals;
SELECT feature_description FROM features WHERE feature_name = 'rooftop'	real_estate_rentals;
SELECT T1.feature_name, T1.feature_description FROM features AS T1 JOIN features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T2.feature_id ORDER BY count(*) DESC LIMIT 1	real_estate_rentals;
SELECT T1.feature_name, T1.feature_description FROM features AS T1 JOIN features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T2.feature_id ORDER BY count(*) DESC LIMIT 1	real_estate_rentals;
SELECT min(room_count) FROM properties	real_estate_rentals;
SELECT min(room_count) FROM properties	real_estate_rentals;
SELECT count(*) FROM parking_lots UNION SELECT count(*) FROM garages	real_estate_rentals;
SELECT count(*) FROM parking_lots UNION SELECT count(*) FROM garages	real_estate_rentals;
SELECT age_category_code FROM Ref_user_categories WHERE user_category_description LIKE '%Mother%'	real_estate_rentals;
SELECT age_category_code FROM ref_user_categories WHERE user_category_description LIKE '%Mother%'	real_estate_rentals;
SELECT T1.user_name FROM users AS T1 JOIN properties AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1	real_estate_rentals;
SELECT T1.user_name FROM users AS T1 JOIN properties AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1	real_estate_rentals;
SELECT avg(T2.room_count) FROM features AS T1 JOIN properties AS T2 ON T1.feature_id = T2.feature_id WHERE T1.feature_name = "garden"	real_estate_rentals;
SELECT avg(T2.room_count) FROM features AS T1 JOIN properties AS T2 ON T1.feature_id = T2.feature_id WHERE T1.feature_name = "garden"	real_estate_rentals;
SELECT DISTINCT T1.town_city FROM addresses AS T1 JOIN features AS T2 ON T1.address_id = T2.address_id WHERE T2.feature_name ='swimming pool'	real_estate_rentals;
SELECT DISTINCT T1.town_city FROM addresses AS T1 JOIN features AS T2 ON T1.address_id = T2.address_id WHERE T2.feature_name ='swimming pool'	real_estate_rentals;
SELECT T2.property_id, T1.price FROM real_estate_rentals AS T1 JOIN properties AS T2 ON T1.property_id = T2.property_id ORDER BY T1.price_requested_by_vendor LIMIT 1	real_estate_rentals;
SELECT T2.property_id, T1.price FROM real_estate_rentals AS T1 JOIN properties AS T2 ON T1.property_id = T2.property_id ORDER BY T1.price_requested_by_vendor LIMIT 1	real_estate_rentals;
SELECT avg(room_count) FROM properties	real_estate_rentals;
SELECT avg(room_count) FROM properties	real_estate_rentals;
SELECT count(*) FROM ref_room_sizes	real_estate_rentals;
SELECT count(DISTINCT room_size) FROM Ref_Room_Sizes	real_estate_rentals;
SELECT T2.user_id, T1.search_text FROM searches AS T1 JOIN users AS T2 ON T1.user_id = T2.user_id GROUP BY T2.user_id HAVING count(*) >= 2	real_estate_rentals;
SELECT user_id, search_sequence FROM users_search_events GROUP BY user_id HAVING count(*) >= 2	real_estate_rentals;
SELECT max(T1.search_time) FROM searches AS T1 JOIN timed_searches AS T2 ON T1.search_id = T2.search_id ORDER BY T1.search_time DESC LIMIT 1	real_estate_rentals;
SELECT max(time_search_date) FROM searches	real_estate_rentals;
SELECT T1.user_search_date, T1.content FROM user_searches AS T1 JOIN results AS T2 ON T1.user_search_id = T2.search_id ORDER BY T1.content DESC	real_estate_rentals;
SELECT search_string, T1.time_stamp FROM user_searches AS T1 JOIN user_search_engines AS T2 ON T1.user_search_engine_id = T2.user_search_engine_id ORDER BY T1.search_string DESC	real_estate_rentals;
SELECT zip_postcode FROM addresses WHERE address_id NOT IN (SELECT T1.zip_postcode FROM addresses AS T1 JOIN user_address_details AS T2 ON T1.address_id = T2.address_id GROUP BY T2.user_address_code HAVING count(*) = 2	real_estate_rentals;
SELECT zip_postcode FROM addresses WHERE address_id NOT IN (SELECT T1.zip_postcode FROM addresses AS T1 JOIN user_address_details AS T2 ON T1.user_address_id = T2.user_address_id GROUP BY T2.user_address_id HAVING count(*) = 2	real_estate_rentals;
SELECT T1.user_category_code, T1.user_id FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code = T2.user_category_code GROUP BY T1.user_id HAVING count(*) = 1	real_estate_rentals;
SELECT T1.user_id, T1.user_category_code FROM users AS T1 JOIN searches AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*) = 1	real_estate_rentals;
SELECT T1.age_category_code FROM Ref_Age_Categories AS T1 JOIN User_Categories AS T2 ON T1.age_category_code = T2.user_category_code ORDER BY T2.user_category_code ASC LIMIT 1	real_estate_rentals;
SELECT T1.age_category_code FROM Ref_Age_Categories AS T1 JOIN User_Categories AS T2 ON T1.age_category_code = T2.user_category_code ORDER BY T2.search_date ASC LIMIT 1	real_estate_rentals;
SELECT login_name FROM users WHERE user_category_code = 'Senior Citizen' ORDER BY first_name	real_estate_rentals;
SELECT login_name FROM users_categories WHERE user_category_code = 'Senior Citizen' ORDER BY first_name	real_estate_rentals;
SELECT count(*) FROM searches AS T1 JOIN buyers AS T2 ON T1.buyer_id = T2.user_id	real_estate_rentals;
SELECT count(*) FROM BUYERS	real_estate_rentals;
SELECT login_date FROM Users WHERE login_name = 'ratione'	real_estate_rentals;
SELECT reg_date FROM users WHERE login_name = 'ratione'	real_estate_rentals;
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.login_name FROM users AS T1 JOIN seller_users AS T2 ON T1.user_id = T2.user_id WHERE T2.seller_value = 1	real_estate_rentals;
SELECT T1.first_name_middle_last_name, T1.login_name FROM users AS T1 JOIN REFS AS T2 ON T1.user_id = T2.user_id WHERE T2.user_category_code = "Seller"	real_estate_rentals;
SELECT T1.building, T1.number_street, T1.town_city FROM Addresses AS T1 JOIN Ref_User_Categories AS T2 ON T1.address_id = T2.address_id WHERE T2.user_category_code = "Senior Citizen"	real_estate_rentals;
SELECT T1.number_building, T1.number_street, T1.town_city FROM Addresses AS T1 JOIN Ref_User_Categories AS T2 ON T1.address_id = T2.address_id WHERE T2.user_category_code = "Senior Citizen"	real_estate_rentals;
SELECT count(*) FROM features GROUP BY T1.property_id HAVING count(*) >= 2	real_estate_rentals;
SELECT count(*) FROM features GROUP BY T1.property_id HAVING count(*) >= 2	real_estate_rentals;
SELECT count(*), T1.property_id FROM properties AS T1 JOIN photo_property AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id	real_estate_rentals;
SELECT count(*), T1.property_id FROM properties AS T1 JOIN property_photos AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id	real_estate_rentals;
SELECT T1.user_id, count(*) FROM users AS T1 JOIN photos AS T2 ON T1.user_id = T2.owner_id GROUP BY T1.user_id	real_estate_rentals;
SELECT count(*), T1.user_id FROM property_owners AS T1 JOIN property_photos AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id	real_estate_rentals;
SELECT sum(T1.price) FROM properties AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code WHERE T2.user_category_code = 'Single Mother' OR T2.user_category_code = 'Student'	real_estate_rentals;
SELECT sum(T1.price) FROM properties AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code WHERE T2.user_category_code = 'Single Mother' OR T2.user_category_code = 'Student'	real_estate_rentals;
SELECT date_stamped, T1.property_name FROM Property_History AS T1 JOIN Items AS T2 ON T1.property_id = T2.property_id ORDER BY T1.date_stamped	real_estate_rentals;
SELECT T1.date_stamped, T2.property_name FROM Property_History AS T1 JOIN Properties AS T2 ON T1.property_id = T2.property_id ORDER BY T1.date_stamped	real_estate_rentals;
SELECT property_type_description, property_type_code FROM Ref_property_types GROUP BY property_type_code ORDER BY count(*) DESC LIMIT 1	real_estate_rentals;
SELECT T1.property_type_description, T2.property_type_code FROM Ref_property_types AS T1 JOIN Ref_property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T2.property_type_code ORDER BY count(*) DESC LIMIT 1	real_estate_rentals;
SELECT age_category_description FROM Ref_age_categories WHERE age_category_code = 'Over 60'	real_estate_rentals;
SELECT age_category_description FROM Ref_age_categories WHERE age_category_code = "Over 60"	real_estate_rentals;
SELECT count(*), T2.room_type_code FROM rooms AS T1 JOIN Ref_Room_Types AS T2 ON T1.room_type_code = T2.room_type_code GROUP BY T2.room_type_code	real_estate_rentals;
SELECT room_size, count(*) FROM rooms GROUP BY room_size	real_estate_rentals;
SELECT country FROM addresses AS T1 JOIN users AS T2 ON T1.user_address_id = T2.user_address_id WHERE T2.user_name_first = 'Robbie'	real_estate_rentals;
SELECT T2.country FROM users AS T1 JOIN addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.user_name_first = 'Robbie'	real_estate_rentals;
SELECT T1.first_name_child, T1.middle_name, T1.last_name FROM users AS T1 JOIN addresses AS T2 ON T1.user_id = T2.user_id WHERE T2.address_id IN (SELECT T2.address_id FROM addresses AS T3 JOIN users AS T4 ON T3.user_id = T4.user_id WHERE T4.property_type_code = T4.property_type_code)	real_estate_rentals;
SELECT DISTINCT T1.user_name_description FROM Ref_user_categories AS T1 JOIN Addresses AS T2 ON T1.user_category_code = T2.user_category_code WHERE T2.address_id IN (SELECT T2.address_id FROM Addresses AS T3 JOIN User_Property_Assignments AS T4 ON T3.user_category_code = T4.user_category_	real_estate_rentals;
SELECT search_content FROM users WHERE user_id NOT IN (SELECT user_id FROM users_who_own_property)	real_estate_rentals;
SELECT search_strings FROM users WHERE user_id NOT IN (SELECT user_id FROM users_who_own_property)	real_estate_rentals;
SELECT T2.last_name, T1.user_id FROM users AS T1 JOIN users AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*) >= 2 INTERSECT SELECT T2.last_name, T1.user_id FROM users AS T1 JOIN users AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*) = 2	real_estate_rentals;
SELECT T2.last_name, T1.user_id FROM users AS T1 JOIN search AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*) = 2 INTERSECT SELECT T2.last_name, T1.user_id FROM users AS T1 JOIN own_property AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*	real_estate_rentals;
SELECT count(*) FROM bike WHERE weight > 780	bike_racing;
SELECT product_name, weight FROM bike ORDER BY price ASC	bike_racing;
SELECT heat, name, nation FROM cyclist	bike_racing;
SELECT max(weight), min(weight) FROM bike	bike_racing;
SELECT avg(price) FROM bike WHERE material = 'Carbon CC'	bike_racing;
SELECT name, result FROM cyclist WHERE nation!= 'Russia'	bike_racing;
SELECT DISTINCT T1.id, T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.purchase_year > 2015	bike_racing;
SELECT T1.id, T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id GROUP BY T1.id HAVING count(*) >= 4	bike_racing;
SELECT T1.id, T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1	bike_racing;
SELECT DISTINCT T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.nation = 'Russia' OR T2.nation = 'Great Britain'	bike_racing;
SELECT count(DISTINCT heat) FROM cyclist	bike_racing;
SELECT count(*) FROM cyclists_own_bikes WHERE bike_id NOT IN (SELECT bike_id FROM cyclists_own_bikes WHERE purchase_year > 2015)	bike_racing;
SELECT DISTINCT T3.product_name FROM cyclists_own_bikes AS T1 JOIN bike AS T2 ON T1.bike_id = T2.id JOIN cyclist AS T3 ON T1.cyclist_id = T3.id WHERE T3.result > '4:21.558'	bike_racing;
SELECT T3.product_name, T3.price FROM cyclists_own_bikes AS T1 JOIN bike AS T2 ON T1.bike_id = T2.id JOIN cyclist AS T3 ON T1.cyclist_id = T3.id WHERE T3.name = 'Bradley Wiggins' INTERSECT SELECT T3.product_name, T3.price FROM cyclists_own_bikes AS T1 JOIN bike AS T2 ON T1.bike_id = T	bike_racing;
SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes)	bike_racing;
SELECT product_name FROM bike WHERE material LIKE "%fiber%"	bike_racing;
SELECT count(*), cyclist_id FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id	bike_racing;
SELECT Flavor, Price FROM goods ORDER BY Price DESC LIMIT 1	bakery_1;
SELECT id, flavor FROM goods ORDER BY price DESC LIMIT 1	bakery_1;
SELECT Flavor, Price FROM goods ORDER BY Price ASC LIMIT 1	bakery_1;
SELECT id, flavor FROM goods ORDER BY price ASC LIMIT 1	bakery_1;
SELECT Id FROM goods WHERE Flavor = "Apple"	bakery_1;
SELECT Id FROM goods WHERE Flavor = "Apple"	bakery_1;
SELECT Id FROM goods WHERE Price  3	bakery_1;
SELECT Id FROM goods WHERE Price  3	bakery_1;
SELECT DISTINCT T1.CustomerId FROM receipts AS T1 JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Flavor = "Lemon"	bakery_1;
SELECT DISTINCT T1.CustomerId FROM receipts AS T1 JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Flavor = "Lemon" AND T2.Food = "Cake"	bakery_1;
SELECT count(*), T1.Food FROM goods AS T1 JOIN receipts AS T2 ON T1.Id = T2.GoodsId GROUP BY T1.Food	bakery_1;
SELECT Food, COUNT(*) FROM receipts AS T1 JOIN goods AS T2 ON T1.id = T2.goods GROUP BY T2.Food	bakery_1;
SELECT customerid FROM receipts GROUP BY customerid HAVING count(*) >= 15	bakery_1;
SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) >= 15	bakery_1;
SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T1.CustomerId HAVING count(*) > 10	bakery_1;
SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T1.CustomerId HAVING COUNT(*) > 10	bakery_1;
SELECT count(*) FROM goods WHERE Food = "Cake"	bakery_1;
SELECT count(*) FROM goods WHERE Food = "Cake"	bakery_1;
SELECT Flavor FROM goods WHERE Food = "Croissant"	bakery_1;
SELECT Flavor FROM goods WHERE Food = "Crisp"	bakery_1;
SELECT DISTINCT T2.Item FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.ReceiptNumber WHERE T1.CustomerId = 15	bakery_1;
SELECT DISTINCT T2.Item FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.ReceiptNumber WHERE T1.CustomerId = 15	bakery_1;
SELECT food, avg(price), max(price), min(price) FROM goods GROUP BY food	bakery_1;
SELECT food, avg(price), min(price), max(price) FROM goods GROUP BY food	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN goods AS T2 ON T1.Goods = T2.Id WHERE T2.Food = "Cake" INTERSECT SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN goods AS T2 ON T1.Goods = T2.Id WHERE T2.Food = "Cookie"	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN goods AS T2 ON T1.Goods = T2.Id WHERE T2.Food = "Cake" INTERSECT SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN goods AS T2 ON T1.Goods = T2.Id WHERE T2.Food = "Cookie"	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Item = T2.Item JOIN customers AS T3 ON T1.CustomerId = T3.Id WHERE T3.LastName = "LOGAN" AND T2.Flavor = "Croissant"	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Item = T2.Item JOIN customers AS T3 ON T1.CustomerId = T3.Id WHERE T3.LastName = "LOGAN" AND T2.Item = "Crisp"	bakery_1;
SELECT T1.ReceiptNumber, T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt ORDER BY T2.Price DESC LIMIT 1	bakery_1;
SELECT T1.ReceiptNumber, T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt ORDER BY T2.Price DESC LIMIT 1	bakery_1;
SELECT item FROM items GROUP BY item ORDER BY count(*) ASC LIMIT 1	bakery_1;
SELECT item FROM items GROUP BY item ORDER BY count(*) ASC LIMIT 1	bakery_1;
SELECT Food, COUNT(*) FROM goods GROUP BY Food	bakery_1;
SELECT count(*), Food FROM goods GROUP BY Food	bakery_1;
SELECT food, avg(price) FROM goods GROUP BY food	bakery_1;
SELECT avg(Price), Food FROM goods GROUP BY Food	bakery_1;
SELECT Id FROM goods WHERE Flavor = "Apricot" AND Price  5	bakery_1;
SELECT Id FROM goods WHERE Flavor = "Apricot" AND Price  5	bakery_1;
SELECT Flavor FROM goods WHERE Price > 10	bakery_1;
SELECT Flavor FROM goods WHERE Price > 10	bakery_1;
SELECT DISTINCT id, price FROM goods WHERE price  (SELECT avg(price) FROM goods)	bakery_1;
SELECT DISTINCT Id, Price FROM goods WHERE Price  (SELECT avg(Price) FROM goods)	bakery_1;
SELECT DISTINCT Id FROM goods WHERE Price  (SELECT min(Price) FROM goods WHERE Food = "Tart")	bakery_1;
SELECT DISTINCT Id FROM goods WHERE Price  (SELECT min(Price) FROM goods WHERE Food = "Tart")	bakery_1;
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Item = T2.Item WHERE T2.Price > 13	bakery_1;
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Item = T2.Item WHERE T2.Price > 13	bakery_1;
SELECT T1.Date FROM receipts AS T1 JOIN goods AS T2 ON T1.GoodId = T2.GoodId WHERE T2.Price > 15	bakery_1;
SELECT T1.Date FROM receipts AS T1 JOIN goods AS T2 ON T1.GoodId = T2.GoodId WHERE T2.Price > 15	bakery_1;
SELECT DISTINCT Id FROM goods WHERE Id LIKE "%APP%"	bakery_1;
SELECT DISTINCT Id FROM goods WHERE Id LIKE "%APP%"	bakery_1;
SELECT good, price FROM goods WHERE id LIKE "%70%"	bakery_1;
SELECT DISTINCT T1.id, T1.price FROM goods AS T1 JOIN items AS T2 ON T1.id = T2.item WHERE T2.item LIKE "%70%"	bakery_1;
SELECT lastname FROM customers ORDER BY lastname	bakery_1;
SELECT LastName FROM customers ORDER BY LastName ASC	bakery_1;
SELECT DISTINCT Id FROM goods ORDER BY Id ASC	bakery_1;
SELECT DISTINCT Id FROM goods ORDER BY Id DESC	bakery_1;
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.ReceiptNumber WHERE T2.Flavor = "Apple Pie" OR T1.CustomerId = 12	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Item = T2.Item WHERE T2.Flavor = "Apple" OR T1.CustomerId = 12	bakery_1;
SELECT Date, ReceiptNumber FROM receipts ORDER BY Date DESC LIMIT 1	bakery_1;
SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.ReceiptNumber JOIN goods AS T3 ON T2.Goods = T3.Id WHERE T3.Price > 10 ORDER BY T1.Date ASC LIMIT 1	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Item = T2.Item WHERE T2.Price > 10 OR T1.Date = (SELECT min(Date) FROM receipts)	bakery_1;
SELECT Id FROM goods WHERE Food = "Cookie" INTERSECT SELECT Id FROM goods WHERE Price BETWEEN 3 AND 7	bakery_1;
SELECT Id FROM goods WHERE Food = "Cookie" OR Food = "Cake" AND Price BETWEEN 3 AND 7	bakery_1;
SELECT T1.firstname, T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid ORDER BY T2.Date ASC LIMIT 1	bakery_1;
SELECT T1.firstname, T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid ORDER BY T2.Date ASC LIMIT 1	bakery_1;
SELECT avg(price) FROM goods WHERE Flavor = "Blackberry" OR Flavor = "Blueberry"	bakery_1;
SELECT avg(price) FROM goods WHERE Flavor = "Blackberry" OR Flavor = "Blueberry"	bakery_1;
SELECT min(price) FROM goods WHERE Flavor = "Cheese"	bakery_1;
SELECT min(price) FROM goods WHERE Flavor = "Cheese"	bakery_1;
SELECT max(price), avg(price), min(price), flavor FROM goods GROUP BY flavor ORDER BY flavor	bakery_1;
SELECT max(price), min(price), avg(price), flavor FROM goods GROUP BY flavor ORDER BY flavor	bakery_1;
SELECT min(price), max(price), Food FROM goods GROUP BY Food ORDER BY food	bakery_1;
SELECT min(price), max(price), Food FROM goods ORDER BY Food	bakery_1;
SELECT Date FROM receipts GROUP BY Date ORDER BY count(*) DESC LIMIT 3	bakery_1;
SELECT Date FROM receipts GROUP BY Date ORDER BY count(*) DESC LIMIT 3	bakery_1;
SELECT customerid, count(*) FROM receipts GROUP BY customerid ORDER BY count(*) DESC LIMIT 1	bakery_1;
SELECT customerid, count(*) FROM receipts GROUP BY customerid ORDER BY count(*) DESC LIMIT 1	bakery_1;
SELECT Date, COUNT(DISTINCT customerId) FROM receipts GROUP BY Date	bakery_1;
SELECT Date, COUNT(*) FROM receipts GROUP BY Date	bakery_1;
SELECT T1.firstname, T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid JOIN goods AS T3 ON T2.goods = T3.id WHERE T3.Flavor = "Apple" AND T3.Food = "Tart"	bakery_1;
SELECT T1.firstname, T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid JOIN goods AS T3 ON T2.goods = T3.id WHERE T3.Flavor = "Apple" AND T3.Food = "Tart"	bakery_1;
SELECT Id FROM goods WHERE Price  (SELECT min(Price) FROM goods WHERE Food = "Croissant")	bakery_1;
SELECT Id FROM goods WHERE Price  (SELECT max(Price) FROM goods WHERE Food = "Crisp")	bakery_1;
SELECT Id FROM goods WHERE Price >= (SELECT avg(Price) FROM goods WHERE Food = "Tart")	bakery_1;
SELECT Id FROM goods WHERE Price >= (SELECT avg(Price) FROM goods WHERE Food = "Cake")	bakery_1;
SELECT Id FROM goods WHERE Price > (SELECT avg(Price) FROM goods)	bakery_1;
SELECT Id FROM goods WHERE Price > 2 (SELECT avg(Price) FROM goods)	bakery_1;
SELECT Id, Flavor, Food FROM goods ORDER BY price	bakery_1;
SELECT Id, Flavor, Food FROM goods ORDER BY price	bakery_1;
SELECT id, Flavor FROM goods WHERE Food = "Cake" ORDER BY Flavor	bakery_1;
SELECT id, Flavor FROM goods WHERE Food = "Cake" ORDER BY Flavor	bakery_1;
SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item = T2.id WHERE T2.flavor = "Chocolate" EXCEPT SELECT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item = T2.id GROUP BY T1.item HAVING count(*) > 10	bakery_1;
SELECT DISTINCT T2.Item FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Item WHERE T1.Flavor = "Chocolate" GROUP BY T2.Item HAVING COUNT(*) = 10	bakery_1;
SELECT Flavor FROM goods WHERE Food = "Cake" EXCEPT SELECT Flavor FROM goods WHERE Food = "Tart"	bakery_1;
SELECT Flavor FROM goods WHERE Food = "Cake" EXCEPT SELECT Flavor FROM goods WHERE Food = "Tart"	bakery_1;
SELECT T2.Flavor, T1.Price FROM items AS T1 JOIN goods AS T2 ON T1.Item = T2.Id GROUP BY T1.Item ORDER BY count(*) DESC LIMIT 3	bakery_1;
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) DESC LIMIT 3	bakery_1;
SELECT customerid FROM receipts GROUP BY customerid HAVING sum(total) > 150	bakery_1;
SELECT customerid FROM receipts GROUP BY customerid HAVING sum(total) > 150	bakery_1;
SELECT customerid FROM receipts GROUP BY customerid HAVING avg(total) > 5	bakery_1;
SELECT avg(T1.Price), T1.CustomerId FROM receipts AS T1 JOIN goods AS T2 ON T1.Good = T2.Id GROUP BY T1.CustomerId HAVING avg(T1.Price) > 5	bakery_1;
SELECT date FROM receipts GROUP BY date HAVING sum(total) > 100	bakery_1;
SELECT T1.Date FROM receipts AS T1 JOIN sales AS T2 ON T1.ReceiptNumber = T2.ReceiptNumber GROUP BY T1.Date HAVING sum(T1.ReceiptNumber) > 100	bakery_1;
SELECT count(*) FROM driver	car_racing;
SELECT count(*) FROM driver	car_racing;
SELECT count(*), Make FROM driver WHERE points > 150 GROUP BY Make	car_racing;
SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make	car_racing;
SELECT avg(Age), Make FROM driver GROUP BY Make	car_racing;
SELECT avg(Age), Make FROM driver GROUP BY make	car_racing;
SELECT avg(Laps) FROM driver WHERE Age  20	car_racing;
SELECT avg(Laps) FROM driver WHERE Age  20	car_racing;
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner	car_racing;
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner	car_racing;
SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1	car_racing;
SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1	car_racing;
SELECT Make FROM team WHERE Car_Owner = "Buddy Arrington"	car_racing;
SELECT Make FROM team WHERE Car_Owner = "Buddy Arrington"	car_racing;
SELECT max(Points), min(Points) FROM driver	car_racing;
SELECT max(Points), min(Points) FROM driver	car_racing;
SELECT count(*) FROM driver WHERE points  150	car_racing;
SELECT count(*) FROM driver WHERE points  150	car_racing;
SELECT Driver FROM driver ORDER BY Age ASC	car_racing;
SELECT Driver FROM driver ORDER BY Age ASC	car_racing;
SELECT Driver FROM driver ORDER BY Points DESC	car_racing;
SELECT Driver FROM driver ORDER BY Points DESC	car_racing;
SELECT Driver, Country FROM driver	car_racing;
SELECT Driver, Country FROM driver	car_racing;
SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = "Dublin"	car_racing;
SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = "Dublin"	car_racing;
SELECT avg(age) FROM driver WHERE country = "English"	car_racing;
SELECT avg(age) FROM driver WHERE country = "English"	car_racing;
SELECT Country FROM driver WHERE Points > 150	car_racing;
SELECT DISTINCT Country FROM driver WHERE Points > 150	car_racing;
SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country ORDER BY T2.Points DESC LIMIT 1	car_racing;
SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country ORDER BY T2.Points DESC LIMIT 1	car_racing;
SELECT Make, COUNT(*) FROM driver GROUP BY Make	car_racing;
SELECT Make, COUNT(*) FROM driver GROUP BY Make	car_racing;
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1	car_racing;
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1	car_racing;
SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3	car_racing;
SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3	car_racing;
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)	car_racing;
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)	car_racing;
SELECT country FROM driver WHERE make = "Dodge" INTERSECT SELECT country FROM driver WHERE make = "Chevrolet"	car_racing;
SELECT country FROM driver WHERE make = "Dodge" INTERSECT SELECT country FROM driver WHERE make = "Chevrolet"	car_racing;
SELECT sum(points), avg(points) FROM driver	car_racing;
SELECT sum(points), avg(points) FROM driver	car_racing;
SELECT country FROM country EXCEPT SELECT country FROM driver	car_racing;
SELECT Country FROM country EXCEPT SELECT Country FROM driver	car_racing;
SELECT T2.Manager, T2.Sponsor FROM team_driver AS T1 JOIN team AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID ORDER BY count(*) DESC LIMIT 1	car_racing;
SELECT T2.Manager, T2.Sponsor FROM team_driver AS T1 JOIN team AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID ORDER BY count(*) DESC LIMIT 1	car_racing;
SELECT T2.Manager, T2.Car_Owner FROM team_driver AS T1 JOIN team AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(*) >= 2	car_racing;
SELECT T2.Manager, T2.Car_Owner FROM team_driver AS T1 JOIN team AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(*) >= 2	car_racing;
SELECT count(*) FROM institution	institution_sports;
SELECT count(*) FROM institution	institution_sports;
SELECT Name FROM institution ORDER BY Name ASC	institution_sports;
SELECT Name FROM institution ORDER BY Name ASC	institution_sports;
SELECT Name FROM institution ORDER BY Founded ASC	institution_sports;
SELECT Name FROM institution ORDER BY Founded	institution_sports;
SELECT City, Province FROM institution	institution_sports;
SELECT City, Province FROM institution	institution_sports;
SELECT max(enrollment), min(enrollment) FROM institution	institution_sports;
SELECT max(enrollment), min(enrollment) FROM institution	institution_sports;
SELECT affiliation FROM institution WHERE city!= 'Vancouver'	institution_sports;
SELECT affiliation FROM institution WHERE city!= 'Vancouver'	institution_sports;
SELECT stadium FROM institution ORDER BY capacity DESC	institution_sports;
SELECT stadium FROM institution ORDER BY capacity DESC	institution_sports;
SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1	institution_sports;
SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1	institution_sports;
SELECT Name, Nickname FROM institution	institution_sports;
SELECT T1.Name, T2.Nickname FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID	institution_sports;
SELECT nickname FROM institution ORDER BY enrollment LIMIT 1	institution_sports;
SELECT nickname FROM institution ORDER BY enrollment LIMIT 1	institution_sports;
SELECT T1.Name FROM institution AS T1 JOIN championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC	institution_sports;
SELECT T1.Name FROM institution AS T1 JOIN championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC	institution_sports;
SELECT T1.Name FROM institution AS T1 JOIN championship AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T1.Institution_ID HAVING count(*) >= 1	institution_sports;
SELECT T1.Name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id HAVING count(*) >= 1	institution_sports;
SELECT sum(T1.Number_of_Championships) FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Affiliation = 'Public'	institution_sports;
SELECT sum(T1.Number_of_Championships) FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Affiliation = 'Public'	institution_sports;
SELECT count(*), affiliation FROM institution GROUP BY affiliation	institution_sports;
SELECT count(*), affiliation FROM institution GROUP BY affiliation	institution_sports;
SELECT affiliation FROM institution GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1	institution_sports;
SELECT affiliation FROM institution GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1	institution_sports;
SELECT founded FROM institution GROUP BY founded HAVING count(*) > 1	institution_sports;
SELECT founded, count(*) FROM institution GROUP BY founded HAVING count(*) > 1	institution_sports;
SELECT nickname FROM institution ORDER BY capacity DESC	institution_sports;
SELECT nickname FROM institution ORDER BY capacity DESC	institution_sports;
SELECT sum(enrollment) FROM institution WHERE city = ''Vancouver'' OR city = ''Calgary''	institution_sports;
SELECT Enrollment FROM institution WHERE City = "Vancouver" OR City = "Calgary"	institution_sports;
SELECT Province FROM institution WHERE Founded  1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950	institution_sports;
SELECT Province FROM institution WHERE Founded  1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950	institution_sports;
SELECT count(DISTINCT province) FROM institution	institution_sports;
SELECT count(DISTINCT province) FROM institution	institution_sports;
SELECT * FROM Warehouses	warehouse_1;
SELECT * FROM Warehouses	warehouse_1;
SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse = T2.code WHERE T2.location = 'New York'	warehouse_1;
SELECT DISTINCT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = "New York"	warehouse_1;
SELECT Contents FROM Boxes WHERE Value > 150	warehouse_1;
SELECT Contents FROM Boxes WHERE Value > 150	warehouse_1;
SELECT warehouse, avg(value) FROM boxes GROUP BY warehouse	warehouse_1;
SELECT avg(Value), Warehouse FROM Boxes GROUP BY Warehouse	warehouse_1;
SELECT avg(value), sum(value) FROM boxes	warehouse_1;
SELECT avg(value), sum(value) FROM boxes	warehouse_1;
SELECT avg(capacity), sum(capacity) FROM warehouses	warehouse_1;
SELECT avg(capacity), sum(capacity) FROM warehouses	warehouse_1;
SELECT Contents, avg(Value), max(Value) FROM Boxes GROUP BY Contents	warehouse_1;
SELECT Contents, avg(Value), max(Value) FROM Boxes GROUP BY Contents	warehouse_1;
SELECT Contents FROM Boxes GROUP BY Contents ORDER BY sum(Value) DESC LIMIT 1	warehouse_1;
SELECT Contents FROM Boxes ORDER BY Value DESC LIMIT 1	warehouse_1;
SELECT avg(Value) FROM Boxes	warehouse_1;
SELECT avg(Value) FROM Boxes	warehouse_1;
SELECT DISTINCT contents FROM boxes	warehouse_1;
SELECT DISTINCT contents FROM Boxes	warehouse_1;
SELECT count(DISTINCT contents) FROM boxes	warehouse_1;
SELECT count(DISTINCT contents) FROM boxes	warehouse_1;
SELECT DISTINCT LOCATION FROM Warehouses	warehouse_1;
SELECT DISTINCT LOCATION FROM Warehouses	warehouse_1;
SELECT DISTINCT T2.code FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.warehouse WHERE T1.location = 'Chicago' OR T1.location = 'New York'	warehouse_1;
SELECT DISTINCT T2.code FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.warehouse WHERE T1.location = 'Chicago' OR T1.location = 'New York'	warehouse_1;
SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse = T2.code WHERE T2.location = 'Chicago' OR T2.location = 'New York'	warehouse_1;
SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse = T2.code WHERE T2.location = 'Chicago' OR T2.location = 'New York'	warehouse_1;
SELECT content FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse = T2.code WHERE T2.location = 'Chicago' INTERSECT SELECT content FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse = T2.code WHERE T2.location = 'New York'	warehouse_1;
SELECT T1.contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.code WHERE T2.location = 'Chicago' INTERSECT SELECT T1.contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.code WHERE T2.location = 'New York'	warehouse_1;
SELECT DISTINCT contents FROM boxes AS t1 JOIN warehouses AS t2 ON t1.warehouse = t2.code WHERE t2.location!= 'New York'	warehouse_1;
SELECT DISTINCT contents FROM boxes EXCEPT SELECT DISTINCT contents FROM boxes AS t1 JOIN warehouses AS t2 ON t1.warehouse = t2.code WHERE t2.location = 'New York'	warehouse_1;
SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.warehouse WHERE T2.contents = 'Rocks' EXCEPT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.warehouse WHERE T2.contents = 'Scissors'	warehouse_1;
SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks' EXCEPT SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Scissors'	warehouse_1;
SELECT DISTINCT warehouse FROM boxes WHERE contents = 'Rocks' OR contents = 'Scissors'	warehouse_1;
SELECT DISTINCT warehouse FROM boxes WHERE contents = 'Rocks' OR contents = 'Scissors'	warehouse_1;
SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks' INTERSECT SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Scissors'	warehouse_1;
SELECT T2.Location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents = 'Rocks' INTERSECT SELECT T2.Location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents = 'Scissors'	warehouse_1;
SELECT code, contents FROM boxes ORDER BY value	warehouse_1;
SELECT code, contents FROM boxes ORDER BY value	warehouse_1;
SELECT code, contents FROM Boxes ORDER BY value ASC LIMIT 1	warehouse_1;
SELECT code, contents FROM Boxes ORDER BY value ASC LIMIT 1	warehouse_1;
SELECT DISTINCT contents FROM boxes WHERE value > (SELECT avg(value) FROM boxes)	warehouse_1;
SELECT DISTINCT contents FROM boxes WHERE value > (SELECT avg(value) FROM boxes)	warehouse_1;
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents	warehouse_1;
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC	warehouse_1;
SELECT code FROM boxes WHERE value > (SELECT max(value) FROM boxes WHERE contents = 'Rocks')	warehouse_1;
SELECT code FROM boxes WHERE value > (SELECT max(value) FROM boxes WHERE contents = 'Rocks')	warehouse_1;
SELECT code, contents FROM boxes WHERE value > (SELECT max(value) FROM boxes WHERE Contents = 'Scissors')	warehouse_1;
SELECT code, contents FROM Boxes WHERE value > (SELECT max(value) FROM Boxes WHERE contents = 'Scissors')	warehouse_1;
SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse = T2.code WHERE T2.capacity = (SELECT max(capacity) FROM warehouses)	warehouse_1;
SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse = T2.code WHERE T2.capacity = (SELECT max(capacity) FROM warehouses)	warehouse_1;
SELECT warehouse, avg(value) FROM boxes GROUP BY warehouse HAVING avg(value) > 150	warehouse_1;
SELECT warehouse, avg(value) FROM boxes GROUP BY warehouse HAVING avg(value) > 150	warehouse_1;
SELECT sum(value), count(*), Contents FROM Boxes GROUP BY Contents	warehouse_1;
SELECT sum(value), count(*), Contents FROM Boxes GROUP BY Contents	warehouse_1;
SELECT sum(capacity), avg(capacity), max(capacity), LOCATION FROM warehouses GROUP BY LOCATION	warehouse_1;
SELECT sum(capacity), avg(capacity), max(capacity), LOCATION FROM warehouses GROUP BY LOCATION	warehouse_1;
SELECT sum(capacity), LOCATION FROM warehouses GROUP BY LOCATION	warehouse_1;
SELECT sum(capacity) FROM warehouses	warehouse_1;
SELECT max(Value), LOCATION FROM boxes GROUP BY LOCATION	warehouse_1;
SELECT warehouse, max(value) FROM boxes GROUP BY warehouse	warehouse_1;
SELECT Warehouse, count(*) FROM Boxes GROUP BY Warehouse	warehouse_1;
SELECT warehouse, count(*) FROM boxes GROUP BY warehouse	warehouse_1;
SELECT count(DISTINCT LOCATION) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.warehouse WHERE T2.contents = 'Rocks'	warehouse_1;
SELECT count(DISTINCT warehouse) FROM boxes WHERE contents = 'Rocks'	warehouse_1;
SELECT T1.Code, T2.Location FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code	warehouse_1;
SELECT T1.Code, T2.Location FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code	warehouse_1;
SELECT DISTINCT T2.code FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.warehouse WHERE T1.location = 'Chicago'	warehouse_1;
SELECT DISTINCT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse = T2.code WHERE T2.location = 'Chicago'	warehouse_1;
SELECT count(*), warehouse FROM boxes GROUP BY warehouse	warehouse_1;
SELECT warehouse, count(*) FROM boxes GROUP BY warehouse	warehouse_1;
SELECT count(DISTINCT contents), warehouse FROM boxes GROUP BY warehouse	warehouse_1;
SELECT count(DISTINCT contents), warehouse FROM boxes GROUP BY warehouse	warehouse_1;
SELECT code FROM warehouses WHERE capacity > (SELECT max(capacity) FROM warehouses)	warehouse_1;
SELECT DISTINCT warehouse FROM boxes GROUP BY warehouse HAVING count(*) > (SELECT max(capacity) FROM warehouses)	warehouse_1;
SELECT sum(value) FROM boxes WHERE warehouse!= 'Chicago'	warehouse_1;
SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse = T2.code WHERE T2.location!= 'Chicago'	warehouse_1;
SELECT University_Name, City, State FROM university ORDER BY University_Name	university_rank;
SELECT University_Name, City, State FROM university ORDER BY University_Name	university_rank;
SELECT count(*) FROM university WHERE state = 'Illinois' OR state = 'Ohio'	university_rank;
SELECT count(*) FROM university WHERE state = 'Illinois' OR state = 'Ohio'	university_rank;
SELECT max(enrollment), avg(enrollment), min(enrollment) FROM university	university_rank;
SELECT max(enrollment), avg(enrollment), min(enrollment) FROM university	university_rank;
SELECT Team_Name FROM university WHERE Enrollment > (SELECT avg(Enrollment) FROM university)	university_rank;
SELECT team_name FROM university WHERE enrollment > (SELECT avg(enrollment) FROM university)	university_rank;
SELECT DISTINCT home_conference FROM university	university_rank;
SELECT DISTINCT home_conference FROM university	university_rank;
SELECT home_conference, count(*) FROM university GROUP BY home_conference	university_rank;
SELECT home_conference, count(*) FROM university GROUP BY home_conference	university_rank;
SELECT State FROM university GROUP BY State ORDER BY count(*) DESC LIMIT 1	university_rank;
SELECT State FROM university GROUP BY State ORDER BY count(*) DESC LIMIT 1	university_rank;
SELECT home_conference FROM university GROUP BY home_conference HAVING avg(enrollment) > 2000	university_rank;
SELECT home_conference FROM university GROUP BY home_conference HAVING avg(enrollment) > 2000	university_rank;
SELECT home_conference FROM university GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1	university_rank;
SELECT home_conference FROM university ORDER BY enrollment LIMIT 1	university_rank;
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code	university_rank;
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code	university_rank;
SELECT T2.Major_Name, T2.Rank FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.University_Name = "Augustana College"	university_rank;
SELECT T2.Rank, T3.Major_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T1.University_Name = "Augustana College"	university_rank;
SELECT T1.University_Name, T1.City, T1.State FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Major_Name = "Accounting" AND T2.Rank = 1	university_rank;
SELECT T1.University_Name, T1.City, T1.State FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Major_Name = "Accounting" ORDER BY T2.Rank 1	university_rank;
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY T1.University_ID ORDER BY count(*) DESC LIMIT 1	university_rank;
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY T1.University_ID ORDER BY count(*) DESC LIMIT 1	university_rank;
SELECT University_Name FROM university EXCEPT SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1	university_rank;
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking ORDER BY rank 1)	university_rank;
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Major_Name = "Accounting" INTERSECT SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Major_Name = "Urban Education"	university_rank;
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Major_Name = 'Accounting' INTERSECT SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Major_Name = 'Urban Education'	university_rank;
SELECT University_Name, overall_ranking FROM university WHERE State = "Wisconsin"	university_rank;
SELECT University_Name, rank FROM university WHERE State = "Wisconsin"	university_rank;
SELECT T1.University_Name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Research_point DESC LIMIT 1	university_rank;
SELECT T1.University_Name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Research_point DESC LIMIT 1	university_rank;
SELECT T1.University_Name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point ASC	university_rank;
SELECT T1.University_Name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point ASC	university_rank;
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Major_Name = "Accounting" AND T2.Rank >= 3	university_rank;
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Major_Name = "Accounting" AND T2.Rank >= 3	university_rank;
SELECT sum(enrollment) FROM university AS T1 JOIN overall_ranking AS T2 ON T1.university_id = T2.university_id WHERE T2.rank = 5	university_rank;
SELECT sum(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank = 5)	university_rank;
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Reputation_point >= 3	university_rank;
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point DESC LIMIT 3	university_rank;
SELECT state FROM university WHERE enrollment  3000 GROUP BY state HAVING count(*) > 2	university_rank;
SELECT state FROM university WHERE enrollment  3000 GROUP BY state HAVING count(*) > 2	university_rank;
SELECT Title FROM Movies WHERE Rating = "null"	movie_2;
SELECT Title FROM Movies WHERE Rating = "null"	movie_2;
SELECT Title FROM Movies WHERE Rating = 'G'	movie_2;
SELECT Title FROM Movies WHERE Rating = 'G'	movie_2;
SELECT T1.title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code = T2.movie WHERE T2.name = 'Odeon'	movie_2;
SELECT T1.title FROM movies AS T1 JOIN MovieTheaters AS T2 ON T1.code = T2.movie WHERE T2.name = 'Odeon'	movie_2;
SELECT T1.Title, T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.MovieTheater	movie_2;
SELECT T1.Title, T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.MovieTheater	movie_2;
SELECT count(*) FROM Movies WHERE Rating = 'G'	movie_2;
SELECT count(*) FROM Movies WHERE Rating = 'G'	movie_2;
SELECT count(*) FROM MovieTheaters	movie_2;
SELECT count(*) FROM MovieTheaters	movie_2;
SELECT count(DISTINCT movie) FROM movietheaters	movie_2;
SELECT count(DISTINCT title) FROM movies	movie_2;
SELECT count(DISTINCT name) FROM MovieTheaters	movie_2;
SELECT count(DISTINCT name) FROM MovieTheaters	movie_2;
SELECT Rating FROM Movies WHERE Title LIKE "%Citizen%"	movie_2;
SELECT Rating FROM Movies WHERE Title LIKE 'Citizen'	movie_2;
SELECT DISTINCT T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G' OR T1.Rating = 'PG'	movie_2;
SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Rating = 'G' OR T2.Rating = 'PG'	movie_2;
SELECT T1.title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code = T2.movie WHERE T2.name = 'Odeon' OR T2.name = 'Imperial'	movie_2;
SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code = T2.movie WHERE T2.name = 'Odeon' OR T2.name = 'Imperial'	movie_2;
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Odeon' INTERSECT SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Imperial'	movie_2;
SELECT T1.title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code = T2.movie WHERE T2.name = 'Odeon' INTERSECT SELECT T1.title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code = T2.movie WHERE T2.name = 'Imperial'	movie_2;
SELECT DISTINCT title FROM movies EXCEPT SELECT T2.title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.code = T2.movie WHERE T1.name = 'Odeon'	movie_2;
SELECT DISTINCT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN MovieTheaters AS T2 ON T1.code = T2.movie WHERE T2.name = 'Odeon'	movie_2;
SELECT Title FROM Movies ORDER BY Title	movie_2;
SELECT Title FROM Movies ORDER BY Title	movie_2;
SELECT Title FROM Movies ORDER BY Rating	movie_2;
SELECT title FROM Movies ORDER BY rating	movie_2;
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1	movie_2;
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1	movie_2;
SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Movie ORDER BY COUNT(*) DESC LIMIT 1	movie_2;
SELECT T2.Title, T1.Movie FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Movie ORDER BY COUNT(*) DESC LIMIT 1	movie_2;
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating	movie_2;
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating	movie_2;
SELECT count(*) FROM Movies WHERE Rating!= "null"	movie_2;
SELECT count(*) FROM Movies WHERE Rating!= "null"	movie_2;
SELECT DISTINCT name FROM movietheaters	movie_2;
SELECT Name FROM MovieTheaters WHERE Movie = 1	movie_2;
SELECT Name FROM MovieTheaters WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)	movie_2;
SELECT Name FROM MovieTheaters WHERE Movie = "null"	movie_2;
SELECT DISTINCT T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = "G"	movie_2;
SELECT DISTINCT T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = "G"	movie_2;
SELECT Title FROM Movies	movie_2;
SELECT Title FROM Movies	movie_2;
SELECT DISTINCT Rating FROM Movies	movie_2;
SELECT DISTINCT Rating FROM Movies	movie_2;
SELECT * FROM Movies WHERE Rating = "null"	movie_2;
SELECT * FROM Movies WHERE Rating = "null"	movie_2;
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)	movie_2;
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)	movie_2;
SELECT Recipient FROM Package ORDER BY Weight DESC LIMIT 1	planet_1;
SELECT T1.Name FROM CUSTOMER AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Recipient ORDER BY T2.Weight DESC LIMIT 1	planet_1;
SELECT sum(T1.weight) FROM package AS T1 JOIN client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.name = "Leo Wong"	planet_1;
SELECT sum(T1.weight) FROM package AS T1 JOIN client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.name = "Leo Wong"	planet_1;
SELECT POSITION FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Name = "Amy Wong"	planet_1;
SELECT POSITION FROM Employee WHERE Name = "Amy Wong"	planet_1;
SELECT salary, POSITION FROM Employee WHERE Name = "Turanga Leela"	planet_1;
SELECT salary, POSITION FROM Employee WHERE Name = "Turanga Leela"	planet_1;
SELECT avg(salary) FROM Employee WHERE POSITION = 'Intern'	planet_1;
SELECT avg(salary) FROM Employee WHERE POSITION = 'Intern'	planet_1;
SELECT LEVEL FROM Employee WHERE POSITION = "Physician"	planet_1;
SELECT LEVEL FROM Has_clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.Position = "Physician"	planet_1;
SELECT T1.PackageNumber FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = "Leo Wong"	planet_1;
SELECT count(*) FROM CUSTOMER AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = "Leo Wong"	planet_1;
SELECT T1.PackageNumber FROM Package AS T1 JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber WHERE T2.Name = "Leo Wong"	planet_1;
SELECT T1.PackageNumber FROM Package AS T1 JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber WHERE T2.Name = "Leo Wong"	planet_1;
SELECT T1.PackageNumber FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = "Leo Wong"	planet_1;
SELECT DISTINCT T1.PackageNumber FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = "Leo Wong"	planet_1;
SELECT count(*) FROM package AS T1 JOIN client AS T2 ON T1.Sender = T2.AccountNumber JOIN Recipient AS T3 ON T1.Recipient = T3.AccountNumber WHERE T2.Name = "Ogden Wernstrom" AND T3.Name = "Leo Wong"	planet_1;
SELECT count(*) FROM package AS T1 JOIN client AS T2 ON T1.Sender = T2.AccountNumber JOIN Recipient AS T3 ON T1.Recipient = T3.AccountNumber WHERE T2.Name = "Ogden Wernstrom" AND T3.Name = "Leo Wong"	planet_1;
SELECT T1.contents FROM package AS T1 JOIN Employee AS T2 ON T1.sender = T2.employeeid WHERE T2.name = "John Zoidfarb"	planet_1;
SELECT T1.contents FROM package AS T1 JOIN Employee AS T2 ON T1.sender = T2.employeeid WHERE T2.name = "John Zoidfarb"	planet_1;
SELECT max(T1.weight), T2.shipmentid FROM package AS T1 JOIN client AS T2 ON T1.sender = T2.accountnumber WHERE T2.name LIKE '%John%'	planet_1;
SELECT max(T1.weight), T2.shipmentid FROM package AS T1 JOIN client AS T2 ON T1.sender = T2.accountnumber WHERE T2.name = 'John' OR t2.name = 'John'	planet_1;
SELECT packagenumber, weight FROM package ORDER BY weight ASC LIMIT 3	planet_1;
SELECT packagenumber, weight FROM Package ORDER BY weight ASC LIMIT 3	planet_1;
SELECT T1.Name, count(*) FROM CUSTOMER AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1	planet_1;
SELECT T1.Name, count(*) FROM CUSTOMER AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1	planet_1;
SELECT T1.Name, count(*) FROM CUSTOMER AS T1 JOIN PACKAGE AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.Name ORDER BY count(*) ASC LIMIT 1	planet_1;
SELECT count(*), T1.name FROM Employee AS T1 JOIN Package AS T2 ON T1.EmployeeID = T2.Recipient GROUP BY T1.Recipient ORDER BY count(*) ASC LIMIT 1	planet_1;
SELECT T1.Name FROM CUSTOMER AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name HAVING COUNT(*) > 1	planet_1;
SELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name HAVING COUNT(*) > 1	planet_1;
SELECT Coordinates FROM Planet WHERE Name = "Mars"	planet_1;
SELECT Coordinates FROM Planet WHERE Name = "Mars"	planet_1;
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC	planet_1;
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC	planet_1;
SELECT DISTINCT shipmentid FROM shipment AS T1 JOIN Employee AS T2 ON T1.manager = T2.employeeid WHERE T2.name = "Phillip J. Fry"	planet_1;
SELECT ShipmentID FROM Shipment WHERE Manager = "Phillip J. Fry"	planet_1;
SELECT Date FROM Shipment	planet_1;
SELECT Date FROM Shipment	planet_1;
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = "Mars"	planet_1;
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = "Mars"	planet_1;
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = "Mars" AND T1.manager = "Turanga Leela"	planet_1;
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid JOIN employee AS T3 ON T1.manager = T3.employeeid WHERE T2.name = "Turanga Leela" AND T2.name = "Mars"	planet_1;
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = 'Mars' OR T1.manager = 'Turanga Leela'	planet_1;
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = 'Mars' AND T1.manager = T2.employeeid WHERE T2.name = 'Turanga Leela'	planet_1;
SELECT T2.name, sum(T1.shipmentID) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet	planet_1;
SELECT T2.name, count(*) FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid GROUP BY T1.planet	planet_1;
SELECT T2.name FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid GROUP BY T1.planet ORDER BY count(*) DESC LIMIT 1	planet_1;
SELECT T2.name FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid GROUP BY T1.planet ORDER BY count(*) DESC LIMIT 1	planet_1;
SELECT T2.name, count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager	planet_1;
SELECT count(*), T2.name FROM shipment AS T1 JOIN employee AS T2 ON T1.manager = T2.employeeid GROUP BY T1.manager	planet_1;
SELECT sum(T1.weight) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment = T2.shipmentid JOIN planet AS T3 ON T2.planet = T3.planetid WHERE T3.name = 'Mars'	planet_1;
SELECT sum(T1.weight) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment = T2.shipmentid JOIN planet AS T3 ON T2.planet = T3.planetid WHERE T3.name = 'Mars'	planet_1;
SELECT sum(T1.weight), T2.name FROM package AS T1 JOIN shipment AS T2 ON T1.shipment = T2.shipmentid JOIN planet AS T3 ON T2.planet = T3.planetid GROUP BY T2.name	planet_1;
SELECT sum(T1.weight), T2.name FROM package AS T1 JOIN planet AS T2 ON T1.planet = T2.planetID GROUP BY T1.planet	planet_1;
SELECT T2.name FROM package AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid GROUP BY T1.planet HAVING sum(T1.weight) > 30	planet_1;
SELECT T2.name FROM package AS T1 JOIN planet AS T2 ON T1.shipment = T2.shipmentid GROUP BY T1.planet HAVING sum(T1.weight) > 30	planet_1;
SELECT T1.packageNumber FROM package AS T1 JOIN shipment AS T2 ON T1.shipment = T2.shipmentid JOIN client AS T3 ON T1.sender = T3.accountnumber WHERE T3.name = 'Zapp Brannigan' AND T2.planet = 'Omicron Persei 8'	planet_1;
SELECT count(*) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment = T2.shipmentid JOIN planet AS T3 ON T2.planet = T3.planetid WHERE T3.name = "Omicron Persei 8" AND T1.sender = "Zapp Brannigan"	planet_1;
SELECT T1.packagenumber FROM package AS T1 JOIN shipment AS T2 ON T1.shipment = T2.shipmentid JOIN client AS T3 ON T1.sender = T3.accountnumber WHERE T3.name = 'Omicron Persei 8' OR T3.name = 'Zapp Brannigan'	planet_1;
SELECT count(*) FROM package AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = "Omicron Persei 8" OR T1.sender = "Zapp Brannigan"	planet_1;
SELECT packagenumber, weight FROM package WHERE weight BETWEEN 10 AND 30	planet_1;
SELECT packagenumber, weight FROM package WHERE weight BETWEEN 10 AND 30	planet_1;
SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.EmployeeID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.name = "Mars"	planet_1;
SELECT name FROM employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.EmployeeID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.name = 'Mars'	planet_1;
SELECT T1.name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.EmployeeID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = "Omega III"	planet_1;
SELECT T1.Name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.EmployeeID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = "Omega III"	planet_1;
SELECT T2.name FROM Has_clearance AS T1 JOIN Planet AS T2 ON T1.planet = T2.planetID GROUP BY T1.planet HAVING count(*) = 1	planet_1;
SELECT T2.Name FROM Has_clearance AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet HAVING COUNT(*) = 1	planet_1;
SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000	planet_1;
SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000	planet_1;
SELECT name FROM employee WHERE salary > (SELECT avg(salary) FROM Employee) OR salary > 5000	planet_1;
SELECT name FROM employee WHERE salary > (SELECT avg(salary) FROM Employee) OR salary > 5000	planet_1;
SELECT count(*) FROM Employee WHERE EmployeeID NOT IN ( SELECT Employee FROM Has_clearance AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name = "Mars")	planet_1;
SELECT count(*) FROM Employee WHERE EmployeeID NOT IN ( SELECT Employee FROM Has_clearance AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name = "Mars")	planet_1;
SELECT count(*) FROM game	video_game;
SELECT count(*) FROM game	video_game;
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC	video_game;
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC	video_game;
SELECT avg(Units_sold_Millions) FROM game WHERE Developers!= "Nintendo"	video_game;
SELECT avg(Units_sold_Millions) FROM game WHERE Developers!= "Nintendo"	video_game;
SELECT Platform_name, Market_district FROM platform	video_game;
SELECT Platform_name, Market_district FROM platform	video_game;
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1	video_game;
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1	video_game;
SELECT max(Rank_of_the_year), min(Rank_of_the_year) FROM player	video_game;
SELECT max(Rank_of_the_year), min(Rank_of_the_year) FROM player	video_game;
SELECT count(*) FROM player WHERE Rank_of_the_year  3	video_game;
SELECT count(*) FROM player WHERE rank_of_the_year = 3	video_game;
SELECT Player_name FROM player ORDER BY Player_name ASC	video_game;
SELECT Player_name FROM player ORDER BY Player_name ASC	video_game;
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC	video_game;
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC	video_game;
SELECT T3.Player_name, T2.rank_of_the_year FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T1.Game_ID = T3.Game_ID WHERE T3.Title = "Super Mario World"	video_game;
SELECT T3.Player_name, T2.rank_of_the_year FROM game_player AS T1 JOIN player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Title = "Super Mario World"	video_game;
SELECT DISTINCT T1.Developer FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = "Auburn"	video_game;
SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = "Auburn"	video_game;
SELECT avg(T2.Units_sold_Millions) FROM player AS T1 JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID WHERE T1.Position = "Guard"	video_game;
SELECT avg(T2.Units_sold_Millions) FROM player AS T1 JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID WHERE T1.Position = "Guard"	video_game;
SELECT T1.Title, T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID	video_game;
SELECT T1.Title, T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID	video_game;
SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Market_district = "Asia" OR T2.Market_district = "USA"	video_game;
SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Market_district = "Asia" OR T2.Market_district = "USA"	video_game;
SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise	video_game;
SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise	video_game;
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1	video_game;
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1	video_game;
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2	video_game;
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2	video_game;
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)	video_game;
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)	video_game;
SELECT T3.Title FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T1.Game_ID = T3.Game_ID WHERE T2.College = "Oklahoma" INTERSECT SELECT T3.Title FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T1.	video_game;
SELECT T3.Title FROM player AS T1 JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID JOIN game AS T3 ON T2.game_id = T3.game_id WHERE T1.College = "Oklahoma" OR T1.College = "Auburn"	video_game;
SELECT DISTINCT Franchise FROM game	video_game;
SELECT DISTINCT Franchise FROM game	video_game;
SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE POSITION = "Guard")	video_game;
SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE POSITION = "Guard")	video_game;
SELECT Name FROM press ORDER BY Year_Profits_billion DESC	book_press;
SELECT Name FROM press ORDER BY Year_Profits_billion DESC	book_press;
SELECT name FROM press WHERE year_profits_billion > 15 OR Month_Profits_billion > 1	book_press;
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1	book_press;
SELECT avg(Year_Profits_billion), max(Year_Profits_billion) FROM press	book_press;
SELECT avg(Year_Profits_billion), max(Year_Profits_billion) FROM press	book_press;
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1	book_press;
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1	book_press;
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1	book_press;
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1	book_press;
SELECT count(*) FROM author WHERE Age  30	book_press;
SELECT count(*) FROM author WHERE Age  30	book_press;
SELECT avg(Age), Gender FROM author GROUP BY Gender	book_press;
SELECT Gender, avg(Age) FROM author GROUP BY Gender	book_press;
SELECT count(*), gender FROM author WHERE age > 30 GROUP BY gender	book_press;
SELECT count(*), gender FROM author WHERE age > 30 GROUP BY gender	book_press;
SELECT Title FROM book ORDER BY Release_date DESC	book_press;
SELECT Title FROM book ORDER BY Release_date DESC	book_press;
SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series	book_press;
SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series	book_press;
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5	book_press;
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5	book_press;
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount  500	book_press;
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount  500	book_press;
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = "MM" INTERSECT SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = "LT"	book_press;
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = "MM" INTERSECT SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = "LT"	book_press;
SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)	book_press;
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)	book_press;
SELECT T2.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID HAVING COUNT(*) > 1	book_press;
SELECT T2.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID HAVING COUNT(*) > 1	book_press;
SELECT T1.Title, T2.Name, T3.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3	book_press;
SELECT T1.Title, T2.Author_ID, T2.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3	book_press;
SELECT T2.Name, sum(T1.Sale_Amount) FROM book AS T1 JOIN press AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Press_ID	book_press;
SELECT T2.Name, sum(T1.Sale_Amount) FROM book AS T1 JOIN press AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Press_ID	book_press;
SELECT T2.Name, COUNT(*) FROM book AS T1 JOIN press AS T2 ON T1.Press_ID = T2.Press_ID WHERE T1.Sale_Amount > 1000 GROUP BY T2.Name	book_press;
SELECT T2.Name, COUNT(*) FROM book AS T1 JOIN press AS T2 ON T1.Press_ID = T2.Press_ID WHERE T1.Sale_Amount > 1000 GROUP BY T2.Press_ID	book_press;
SELECT T2.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T1.Sale_Amount DESC LIMIT 1	book_press;
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T2.Sale_Amount DESC LIMIT 1	book_press;
SELECT T2.Name, T2.Gender FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID ORDER BY COUNT(*) DESC LIMIT 1	book_press;
SELECT T2.Name, T2.Gender FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID ORDER BY COUNT(*) DESC LIMIT 1	book_press;
SELECT name FROM author EXCEPT SELECT T2.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID JOIN press AS T3 ON T1.Press_ID = T3.Press_ID WHERE T3.Name = "Accor"	book_press;
SELECT name FROM author EXCEPT SELECT T2.Name FROM book AS T1 JOIN press AS T2 ON T1.Press_ID = T2.Press_ID WHERE T2.Name = "Accor"	book_press;
SELECT T2.Name, T2.Year_Profits_billion FROM book AS T1 JOIN press AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T2.Press_ID HAVING COUNT(*) > 2	book_press;
SELECT T2.Name, T2.Year_Profits_billion FROM book AS T1 JOIN press AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Press_ID HAVING COUNT(*) > 2	book_press;
SELECT count(*) FROM Authors	cre_Doc_Workflow;
SELECT author_name FROM Authors	cre_Doc_Workflow;
SELECT author_name, other_details FROM Authors	cre_Doc_Workflow;
SELECT other_details FROM Authors WHERE author_name = "Addison Denesik"	cre_Doc_Workflow;
SELECT count(*) FROM Documents	cre_Doc_Workflow;
SELECT author_name FROM Documents WHERE document_id = 4;	cre_Doc_Workflow;
SELECT author_name FROM Documents WHERE document_name = "Travel to Brazil"	cre_Doc_Workflow;
SELECT count(*) FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T2.author_name = "Era Kerluke"	cre_Doc_Workflow;
SELECT document_name, document_description FROM Documents	cre_Doc_Workflow;
SELECT document_id, document_name FROM Documents WHERE author_name = "Bianka Cummings"	cre_Doc_Workflow;
SELECT author_name, other_details FROM Documents WHERE document_name = "Travel to China"	cre_Doc_Workflow;
SELECT author_name, count(*) FROM Documents GROUP BY author_name	cre_Doc_Workflow;
SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1	cre_Doc_Workflow;
SELECT author_name FROM Documents GROUP BY author_name HAVING count(*) >= 2	cre_Doc_Workflow;
SELECT count(*) FROM Business_processes	cre_Doc_Workflow;
SELECT T1.process_id, T1.process_name, T1.process_description FROM Processes AS T1 JOIN Documents AS T2 ON T1.process_id = T2.process_id WHERE T1.process_id = 9	cre_Doc_Workflow;
SELECT T2.process_name FROM Process_Flow AS T1 JOIN Process_Outcomes AS T2 ON T1.process_outcome_code = T2.process_outcome_code WHERE T1.process_id = 9	cre_Doc_Workflow;
SELECT count(*) FROM Process_outcomes	cre_Doc_Workflow;
SELECT process_outcome_code, process_outcome_description FROM Process_outcomes	cre_Doc_Workflow;
SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code = "working"	cre_Doc_Workflow;
SELECT count(*) FROM Process_Status	cre_Doc_Workflow;
SELECT process_status_code, process_status_description FROM Process_Status	cre_Doc_Workflow;
SELECT process_status_description FROM Process_Status WHERE process_status_code = "ct"	cre_Doc_Workflow;
SELECT count(*) FROM Staff	cre_Doc_Workflow;
SELECT staff_id, staff_details FROM Staff	cre_Doc_Workflow;
SELECT staff_details FROM Staff WHERE staff_id = 100	cre_Doc_Workflow;
SELECT count(*) FROM Ref_staff_roles	cre_Doc_Workflow;
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles	cre_Doc_Workflow;
SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = "HR"	cre_Doc_Workflow;
SELECT count(*) FROM Documents AS T1 JOIN Process_Outcomes AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id	cre_Doc_Workflow;
SELECT process_id FROM Documents	cre_Doc_Workflow;
SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Processes	cre_Doc_Workflow;
SELECT process_id FROM Processes EXCEPT SELECT process_id FROM Documents	cre_Doc_Workflow;
SELECT T1.process_outcome_description, T2.process_status_description FROM Process_outcomes AS T1 JOIN Process_Status AS T2 ON T1.process_outcome_code = T2.process_outcome_code WHERE T1.document_id = 0	cre_Doc_Workflow;
SELECT T1.process_outcome_description FROM Process_outcomes AS T1 JOIN Documents AS T2 ON T1.process_outcome_code = T2.process_outcome_code WHERE T2.document_name = "Travel to Brazil"	cre_Doc_Workflow;
SELECT process_id, count(*) FROM Documents GROUP BY process_id	cre_Doc_Workflow;
SELECT count(*) FROM Documents AS T1 JOIN Processes AS T2 ON T1.document_id = T2.document_id WHERE T2.process_id = 9	cre_Doc_Workflow;
SELECT staff_id, count(*) FROM Documents GROUP BY staff_id	cre_Doc_Workflow;
SELECT staff_role_code, count(*) FROM Documents GROUP BY staff_role_code	cre_Doc_Workflow;
SELECT count(DISTINCT staff_role_code) FROM Ref_Staff_Roles AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.staff_id = 3	cre_Doc_Workflow;
SELECT count(*) FROM Agencies	advertising_agencies;
SELECT count(*) FROM Agencies	advertising_agencies;
SELECT agency_id, agency_details FROM Agencies	advertising_agencies;
SELECT agency_id, agency_details FROM Agencies	advertising_agencies;
SELECT count(*) FROM Clients	advertising_agencies;
SELECT count(*) FROM Clients	advertising_agencies;
SELECT client_id, client_details FROM Clients	advertising_agencies;
SELECT client_id, client_details FROM Clients	advertising_agencies;
SELECT agency_id, count(*) FROM Clients GROUP BY agency_id	advertising_agencies;
SELECT count(*), agency_id FROM Clients GROUP BY agency_id	advertising_agencies;
SELECT T2.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T2.agency_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT T2.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T2.agency_id HAVING count(*) >= 2	advertising_agencies;
SELECT T2.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T2.agency_id HAVING count(*) >= 2	advertising_agencies;
SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id WHERE T1.client_details = 'Mac'	advertising_agencies;
SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id WHERE T1.client_details = "Mac"	advertising_agencies;
SELECT client_details, agency_details FROM Clients JOIN Agencies ON Clients = Agency_id	advertising_agencies;
SELECT T1.client_details, T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id	advertising_agencies;
SELECT sic_code, count(*) FROM Clients GROUP BY sic_code	advertising_agencies;
SELECT sic_code, count(*) FROM Clients GROUP BY sic_code	advertising_agencies;
SELECT client_id, client_details FROM Clients WHERE sic_code = "Bad"	advertising_agencies;
SELECT client_details, client_ideas FROM Clients WHERE sic_code = "Bad"	advertising_agencies;
SELECT T2.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id	advertising_agencies;
SELECT T2.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id	advertising_agencies;
SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients	advertising_agencies;
SELECT agency_id FROM agencies EXCEPT SELECT agency_id FROM Clients	advertising_agencies;
SELECT count(*) FROM invoices	advertising_agencies;
SELECT count(*) FROM invoices	advertising_agencies;
SELECT invoice_id, invoice_status, invoice_details FROM invoices AS T1 JOIN clients AS T2 ON T1.client_id = T2.client_id	advertising_agencies;
SELECT invoice_id, invoice_status, invoice_details FROM invoices	advertising_agencies;
SELECT client_id, count(*) FROM invoices GROUP BY client_id	advertising_agencies;
SELECT client_id, count(*) FROM invoices GROUP BY client_id	advertising_agencies;
SELECT T1.client_id, T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT T1.client_id, T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT client_id FROM invoices GROUP BY client_id HAVING count(*) >= 2	advertising_agencies;
SELECT client_id FROM invoices GROUP BY client_id HAVING count(*) >= 2	advertising_agencies;
SELECT invoice_status, count(*) FROM Invoices GROUP BY invoice_status	advertising_agencies;
SELECT invoice_status, count(*) FROM Invoices GROUP BY invoice_status	advertising_agencies;
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT invoice_status, invoice_details, client_id, agency_id FROM invoices GROUP BY invoice_status	advertising_agencies;
SELECT invoice_status, invoice_details, client_id, agency_id, agency_details FROM invoices JOIN Clients ON invoice_id = client_id	advertising_agencies;
SELECT meeting_type, other_details FROM Meetings	advertising_agencies;
SELECT meeting_type, other_details FROM Meetings	advertising_agencies;
SELECT meeting_outcome, purpose_of_meeting FROM Meetings	advertising_agencies;
SELECT meeting_outcome, purpose_of_meeting FROM Meetings	advertising_agencies;
SELECT payment_id, invoice_details FROM invoices WHERE invoice_status = 'Working'	advertising_agencies;
SELECT payment_id, invoice_details FROM invoices WHERE invoice_status = "Working"	advertising_agencies;
SELECT invoice_id, invoice_status FROM invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM payments)	advertising_agencies;
SELECT invoice_id, invoice_status FROM invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM payments)	advertising_agencies;
SELECT count(*) FROM payments	advertising_agencies;
SELECT count(*) FROM payments	advertising_agencies;
SELECT payment_id, invoice_id, invoice_details FROM invoices	advertising_agencies;
SELECT payment_id, invoice_id, payment_details FROM payments	advertising_agencies;
SELECT DISTINCT invoice_id, invoice_status FROM payments	advertising_agencies;
SELECT DISTINCT invoice_id, invoice_status FROM payments	advertising_agencies;
SELECT invoice_id, count(*) FROM Payments GROUP BY invoice_id	advertising_agencies;
SELECT payment_id, count(*) FROM Payments GROUP BY payment_id	advertising_agencies;
SELECT invoice_id, invoice_status, invoice_details FROM Payments GROUP BY invoice_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE payment_date_time = (SELECT max(payment_date_time) FROM Invoices)	advertising_agencies;
SELECT count(*) FROM Staff	advertising_agencies;
SELECT count(*) FROM Staff	advertising_agencies;
SELECT agency_id, count(*) FROM Staff GROUP BY agency_id	advertising_agencies;
SELECT agency_id, count(*) FROM Staff GROUP BY agency_id	advertising_agencies;
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT meeting_outcome, count(*) FROM Meetings GROUP BY meeting_outcome	advertising_agencies;
SELECT meeting_outcome, count(*) FROM Meetings GROUP BY meeting_outcome	advertising_agencies;
SELECT client_id, count(*) FROM Meetings GROUP BY client_id	advertising_agencies;
SELECT client_id, count(*) FROM Meetings GROUP BY client_id	advertising_agencies;
SELECT meeting_type, count(*), client_id FROM Meetings GROUP BY client_id	advertising_agencies;
SELECT meeting_type, count(*) FROM Meetings GROUP BY meeting_type	advertising_agencies;
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings	advertising_agencies;
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings	advertising_agencies;
SELECT meeting_id, count(*) FROM Staff AS T1 JOIN Meetings AS T2 ON T1.meeting_id = T2.meeting_id GROUP BY T1.meeting_id	advertising_agencies;
SELECT count(*), T1.meeting_id FROM Meetings AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.meeting_id	advertising_agencies;
SELECT staff_id, count(*) FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1	advertising_agencies;
SELECT staff_id FROM Staff JOIN Meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1	advertising_agencies;
SELECT count(DISTINCT staff_id) FROM Meetings	advertising_agencies;
SELECT count(DISTINCT staff_id) FROM Meetings	advertising_agencies;
SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Meetings )	advertising_agencies;
SELECT count(*) FROM staff WHERE staff_id NOT IN ( SELECT staff_id FROM Meetings )	advertising_agencies;
SELECT DISTINCT T1.client_id, T1.client_details FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id = T2.client_id INTERSECT SELECT DISTINCT T1.client_id, T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id = T2.client_id	advertising_agencies;
SELECT client_id, client_details FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id = T2.client_id UNION SELECT client_id, client_details FROM Invoices AS T3 ON T3.client_id = T1.client_id	advertising_agencies;
SELECT T1.staff_id, T1.staff_details FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id = T2.staff_id WHERE T2.other_details LIKE '%s%' GROUP BY T1.staff_id HAVING count(*) >= 1	advertising_agencies;
SELECT T1.staff_id, T1.staff_details FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id = T2.staff_id WHERE T2.meeting_outcome_code = 1 AND T1.staff_details LIKE '%s%'	advertising_agencies;
SELECT T1.client_id, T1.sic_code, T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id HAVING count(*) = 1 INTERSECT SELECT T1.client_id, T1.sic_code, T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id	advertising_agencies;
SELECT T1.client_id, T1.sic_code, T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id HAVING count(*) = 1 INTERSECT SELECT T1.client_id, T1.sic_code, T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id	advertising_agencies;
SELECT T2.start_date_time, T2.end_date_time, T1.client_details, T1.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Staff AS T3 ON T1.staff_id = T3.staff_id	advertising_agencies;
SELECT T1.start_date_time, T1.end_date_time, T2.client_details, T2.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id INTERSECT SELECT T1.start_date_time, T1.end_date_time, T2.client_details FROM Meetings AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id	advertising_agencies;
