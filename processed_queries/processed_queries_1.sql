SELECT count(*) FROM club	soccer_3;
SELECT count(*) FROM club	soccer_3;
SELECT Name FROM club ORDER BY Name ASC	soccer_3;
SELECT Name FROM club ORDER BY Name ASC	soccer_3;
SELECT Manager, Captain FROM club	soccer_3;
SELECT Manager, Captain FROM club	soccer_3;
SELECT name FROM club WHERE manufacturer!= "Nike"	soccer_3;
SELECT name FROM club WHERE manufacturer!= 'Nike'	soccer_3;
SELECT Name FROM player ORDER BY Wins_count ASC	soccer_3;
SELECT Name FROM player ORDER BY Wins_count ASC	soccer_3;
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1	soccer_3;
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1	soccer_3;
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000	soccer_3;
SELECT Country FROM player WHERE Earnings > 1200000	soccer_3;
SELECT T1.Country FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count > 2 GROUP BY T1.Country ORDER BY DESC LIMIT 1	soccer_3;
SELECT T1.Country FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count > 2 GROUP BY T1.Country ORDER BY COUNT(*) DESC LIMIT 1	soccer_3;
SELECT T1.Name, T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID	soccer_3;
SELECT T1.Name, T2.Club_ID FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID	soccer_3;
SELECT T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Wins_count > 2	soccer_3;
SELECT T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Wins_count > 2	soccer_3;
SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Name = "Sam Allardyce"	soccer_3;
SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Name = "Sam Allardyce"	soccer_3;
SELECT T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Club_ID ORDER BY AVG(Earnings) DESC	soccer_3;
SELECT T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T1.Earnings) DESC	soccer_3;
SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer	soccer_3;
SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer	soccer_3;
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1	soccer_3;
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1	soccer_3;
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1	soccer_3;
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1	soccer_3;
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1	soccer_3;
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1	soccer_3;
SELECT Name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM Player)	soccer_3;
SELECT Name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM Player)	soccer_3;
SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings  1100000	soccer_3;
SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings  1100000	soccer_3;
SELECT count(DISTINCT Country) FROM player	soccer_3;
SELECT count(DISTINCT Country) FROM player	soccer_3;
SELECT Earnings FROM player WHERE Country = "Australia" OR Country = "Zimbabwe"	soccer_3;
SELECT Earnings FROM player WHERE Country = "Australia" OR Country = "Zimbabwe"	soccer_3;
SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2 INTERSECT SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name HAVING count(*) >	e_commerce;
SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2 INTERSECT SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM customers AS T1 JOIN products AS T2 ON T1.customer_i	e_commerce;
SELECT T1.order_id, T1.order_status, count(*) FROM orders AS T1 JOIN products AS T2 ON T1.order_id = T2.product_id GROUP BY T1.order_id	e_commerce;
SELECT T1.order_status, T2.order_id FROM orders AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.order_id	e_commerce;
SELECT order_date FROM orders ORDER BY order_date ASC LIMIT 1	e_commerce;
SELECT min(order_id), max(order_id) FROM products GROUP BY order_id HAVING count(*) > 1	e_commerce;
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM customers EXCEPT SELECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id	e_commerce;
SELECT customer_first_name, customer_last_name, customer_middle_initial FROM customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_middle_initial FROM customers AS T1 JOIN invoices AS T2 ON T1.customer_id = T2.customer_id	e_commerce;
SELECT product_id, product_name, product_price, product_color FROM products EXCEPT SELECT T1.product_id, T1.product_name, T1.product_price FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING count(*) >= 2	e_commerce;
SELECT product_id, product_name, product_price, product_color FROM products GROUP BY product_id HAVING count(*)  2	e_commerce;
SELECT T1.order_id, T1.date FROM orders AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id GROUP BY T1.order_id HAVING count(*) >= 2	e_commerce;
SELECT T1.order_id, T1.date FROM orders AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id GROUP BY T1.order_id HAVING count(*) >= 2	e_commerce;
SELECT T1.product_id, T1.product_name, T1.product_price FROM products AS T1 JOIN orders AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1	e_commerce;
SELECT product_id, product_name, product_price FROM products GROUP BY product_id ORDER BY count(*) DESC LIMIT 1	e_commerce;
SELECT order_id, sum(product_price) FROM products GROUP BY order_id ORDER BY sum(product_price) LIMIT 1	e_commerce;
SELECT order_total, sum(total_cost) FROM products GROUP BY order_total ORDER BY sum(total_cost) ASC LIMIT 1	e_commerce;
SELECT payment_method FROM products GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1	e_commerce;
SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1	e_commerce;
SELECT gender_code, count(*) FROM customers GROUP BY gender_code	e_commerce;
SELECT gender_code, count(*) FROM products GROUP BY gender_code	e_commerce;
SELECT gender_code, count(*) FROM customers GROUP BY gender_code	e_commerce;
SELECT gender_code, count(*) FROM customers GROUP BY gender_code	e_commerce;
SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_methods FROM customers	e_commerce;
SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method FROM customers	e_commerce;
SELECT status, date, date_shipment FROM invoices	e_commerce;
SELECT status_code, date_invoice, ship_date FROM invoices	e_commerce;
SELECT T2.product_name, T1.shipment_date FROM products AS T1 JOIN shipment AS T2 ON T1.product_id = T2.product_id	e_commerce;
SELECT T2.product_name, T1.shipping_date FROM products AS T1 JOIN inventory AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING count(*) >= 2	e_commerce;
SELECT order_status, ship_to_address FROM order_items WHERE order_date = (SELECT max(order_date) FROM shipment)	e_commerce;
SELECT order_status, ship_to, tracking_number FROM items WHERE order_date AND ship_to_date = (SELECT max(order_date) FROM items)	e_commerce;
SELECT T2.product_name, T2.product_color FROM order_items AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.order_date = (SELECT min(order_date) FROM order_items)	e_commerce;
SELECT T1.product_name, T1.product_color FROM products AS T1 JOIN inventory AS T2 ON T1.product_id = T2.product_id WHERE T2.product_shipped = 1	e_commerce;
SELECT DISTINCT T2.product_name, T2.product_price, T2.product_description FROM customers AS T1 JOIN products AS T2 ON T1.customer_id = T2.product_id WHERE T1.gender_code = "Female"	e_commerce;
SELECT DISTINCT T2.product_name, T2.product_price, T2.product_description FROM customers AS T1 JOIN products AS T2 ON T1.customer_id = T2.product_id WHERE T1.gender_code = "Female"	e_commerce;
SELECT invoice_status FROM orders WHERE order_id NOT IN (SELECT order_id FROM INVOICES)	e_commerce;
SELECT invoice_status FROM orders WHERE order_id NOT IN (SELECT order_id FROM INVOICES)	e_commerce;
SELECT order_id, date, sum(total_cost) FROM orders	e_commerce;
SELECT T1.order_id, T1.date, T2.total_amount FROM orders AS T1 JOIN invoices AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id	e_commerce;
SELECT count(DISTINCT customer_id) FROM orders	e_commerce;
SELECT count(DISTINCT customer_id) FROM order_items	e_commerce;
SELECT count(DISTINCT item_state) FROM orders	e_commerce;
SELECT count(DISTINCT status_code) FROM ordered_items	e_commerce;
SELECT count(DISTINCT payment_method) FROM e_commerce	e_commerce;
SELECT count(DISTINCT payment_method) FROM customers	e_commerce;
SELECT login_name, login_password FROM customers WHERE phone_number LIKE "%12%"	e_commerce;
SELECT login_name, login_password FROM customers WHERE phone_number LIKE "%12%"	e_commerce;
SELECT t2.product_size FROM products AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name LIKE "%Dell%"	e_commerce;
SELECT product_size FROM products WHERE product_name LIKE "%Dell%"	e_commerce;
SELECT product_price, product_size FROM products WHERE product_price > (SELECT avg(product_price) FROM products)	e_commerce;
SELECT product_price, product_size FROM products WHERE product_price > (SELECT avg(product_price) FROM products)	e_commerce;
SELECT count(*) FROM products WHERE product_id NOT IN (SELECT product_id FROM e_commerce)	e_commerce;
SELECT count(*) FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items)	e_commerce;
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM payment)	e_commerce;
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM payment)	e_commerce;
SELECT status, date FROM orders	e_commerce;
SELECT status_code, date_placed FROM orders	e_commerce;
SELECT address, town, county FROM customers WHERE country = 'USA'	e_commerce;
SELECT address_population, town_ship, county FROM customers WHERE country = 'United States'	e_commerce;
SELECT T1.customer_first_name, T2.product_name FROM products AS T1 JOIN customers AS T2 ON T1.product_id = T2.product_id	e_commerce;
SELECT T1.customer_first_name, T2.product_name FROM buyers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id	e_commerce;
SELECT count(*) FROM products WHERE product_id IN (SELECT product_id FROM shipping)	e_commerce;
SELECT count(*) FROM products WHERE product_shipping_date = (SELECT max(product_shipping_date) FROM products)	e_commerce;
SELECT avg(product_price) FROM products	e_commerce;
SELECT avg(product_price) FROM products	e_commerce;
SELECT avg(product_price) FROM products WHERE order_id IN (SELECT product_id FROM e_commerce)	e_commerce;
SELECT avg(product_price) FROM products	e_commerce;
SELECT email_address, town, county FROM customers WHERE gender_code = (SELECT gender_code FROM customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1)	e_commerce;
SELECT email_address, phone_number, city, county FROM customers WHERE gender_code = 'Female' ORDER BY count(*) LIMIT 1	e_commerce;
SELECT T2.order_date FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2	e_commerce;
SELECT T1.date FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2	e_commerce;
SELECT status FROM orders GROUP BY status ORDER BY count(*) DESC LIMIT 1	e_commerce;
SELECT status FROM orders GROUP BY status ORDER BY count(*) ASC LIMIT 1	e_commerce;
SELECT product_id, product_description FROM products WHERE product_price > 3	e_commerce;
SELECT T1.product_id, T1.product_description FROM products AS T1 JOIN e_commerce AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING count(*) > 3	e_commerce;
SELECT T1.invoice_date, T1.invoice_id FROM invoices AS T1 JOIN shipments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id HAVING count(*) >= 2	e_commerce;
SELECT T1.date_and_id FROM invoices AS T1 JOIN shipments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id HAVING count(*) >= 2	e_commerce;
SELECT tracking_number, shipping_date FROM shipments	e_commerce;
SELECT tracking_number, shipping_date FROM shipments	e_commerce;
SELECT product_color, product_description, product_size FROM products WHERE product_price  (SELECT max(product_price) FROM products)	e_commerce;
SELECT product_color, product_description, product_size FROM products WHERE product_price!= (SELECT max(product_price) FROM products)	e_commerce;
SELECT name FROM director WHERE age > (SELECT avg(age) FROM director)	bbc_channels;
SELECT name FROM director ORDER BY age DESC LIMIT 1	bbc_channels;
SELECT count(*) FROM channel WHERE internet LIKE "%bbc%"	bbc_channels;
SELECT count(DISTINCT digital_terrestrial_channel) FROM channel	bbc_channels;
SELECT title FROM program ORDER BY start_year DESC	bbc_channels;
SELECT T2.name FROM director_admin AS T1 JOIN program AS T2 ON T1.director_id = T2.director_id GROUP BY T2.director_id ORDER BY count(*) DESC LIMIT 1	bbc_channels;
SELECT T2.name, T2.age FROM director_admin AS T1 JOIN program AS T2 ON T1.director_id = T2.director_id GROUP BY T2.director_id ORDER BY count(*) DESC LIMIT 1	bbc_channels;
SELECT title FROM program ORDER BY start_year DESC LIMIT 1	bbc_channels;
SELECT T2.name, T3.internet FROM program AS T1 JOIN channel AS T2 ON T1.channel_id = T2.channel_id JOIN program AS T3 ON T1.program_id = T3.program_id GROUP BY T1.channel_id HAVING COUNT(*) > 1	bbc_channels;
SELECT count(*), T1.name FROM channel AS T1 JOIN program AS T2 ON T1.channel_id = T2.channel_id GROUP BY T1.channel_id	bbc_channels;
SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)	bbc_channels;
SELECT T2.name FROM program AS T1 JOIN director AS T2 ON T1.director_id = T2.director_id WHERE T1.title = "Dracula"	bbc_channels;
SELECT T2.name, T1.internet FROM channel AS T1 JOIN director_admin AS T2 ON T1.channel_id = T2.channel_id GROUP BY T2.channel_id ORDER BY count(*) DESC LIMIT 1	bbc_channels;
SELECT name FROM director WHERE age BETWEEN 30 AND 60	bbc_channels;
SELECT T2.name FROM director_admin AS T1 JOIN channel AS T2 ON T1.channel_id = T2.channel_id WHERE T1.age  40 INTERSECT SELECT T2.name FROM director_admin AS T1 JOIN channel AS T2 ON T1.channel_id = T2.channel_id WHERE T1.age > 60	bbc_channels;
SELECT name, channel_id FROM channel EXCEPT SELECT T1.channel_id, T1.name FROM channel AS T1 JOIN director AS T2 ON T1.channel_id = T2.channel_id WHERE T2.name = 'Hank Baskett'	bbc_channels;
SELECT count(*) FROM radio	tv_shows;
SELECT transmitter FROM radio ORDER BY erp_kW ASC	tv_shows;
SELECT tv_show_name, original_airdate FROM tv_show	tv_shows;
SELECT station_name FROM city_channel WHERE affiliation!= 'ABC'	tv_shows;
SELECT transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW  30	tv_shows;
SELECT transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1	tv_shows;
SELECT avg(ERP_kW) FROM radio	tv_shows;
SELECT affiliation, count(*) FROM city_channel GROUP BY affiliation	tv_shows;
SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1	tv_shows;
SELECT affiliation FROM city_channel GROUP BY affiliation HAVING count(*) > 3	tv_shows;
SELECT city, station_name FROM city_channel ORDER BY station_name	tv_shows;
SELECT T1.Transmitter, T2.City FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID = T2.Radio_ID	tv_shows;
SELECT T1.Transmitter, T2.station_name FROM radio AS T1 JOIN city_channel AS T2 ON T1.Radio_ID = T2.Radio_ID ORDER BY T1.ERP_kW DESC	tv_shows;
SELECT T1.Transmitter, COUNT(*) FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID GROUP BY T1.Transmitter	tv_shows;
SELECT DISTINCT transmitter FROM radio WHERE radio_id NOT IN (SELECT city_channel_id FROM city_channel_radio)	tv_shows;
SELECT Model FROM vehicle WHERE Power > 6000 AND Top_Speed > 120	vehicle_driver;
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1	vehicle_driver;
SELECT Name FROM driver WHERE Citizenship = 'United States'	vehicle_driver;
SELECT Name FROM driver WHERE Citizenship = 'United States'	vehicle_driver;
SELECT T1.Driverid, COUNT(*) FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driverid = T2.Driverid GROUP BY T1.Driverid ORDER BY COUNT(*) DESC LIMIT 1	vehicle_driver;
SELECT T1.Driver_ID, COUNT(*) FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1	vehicle_driver;
SELECT max(Power), avg(Power) FROM vehicle WHERE Builder = 'Zhuzhou'	vehicle_driver;
SELECT max(Power), avg(Power) FROM vehicle WHERE Builder = 'Zhuzhou'	vehicle_driver;
SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1	vehicle_driver;
SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1	vehicle_driver;
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996	vehicle_driver;
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996	vehicle_driver;
SELECT Build_Year, Model, Builder FROM vehicle	vehicle_driver;
SELECT Build_Year, Model, Builder FROM vehicle	vehicle_driver;
SELECT count(*) FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id = T2.vehicle_id WHERE T2.Build_Year = 2012	vehicle_driver;
SELECT COUNT(DISTINCT T1.Driver_ID) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Build_Year = 2012	vehicle_driver;
SELECT count(*) FROM driver WHERE Racing_Series = 'NASCAR'	vehicle_driver;
SELECT count(*) FROM driver WHERE Racing_Series = "NASCAR"	vehicle_driver;
SELECT avg(Top_Speed) FROM vehicle	vehicle_driver;
SELECT avg(Top_Speed) FROM vehicle	vehicle_driver;
SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000	vehicle_driver;
SELECT T2.Name FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T1.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000	vehicle_driver;
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150	vehicle_driver;
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150	vehicle_driver;
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE "%DJ%"	vehicle_driver;
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE "%DJ%"	vehicle_driver;
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)	vehicle_driver;
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)	vehicle_driver;
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Driver_ID = 2 UNION SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Driver_ID JOIN driver AS T3 ON T2.Driver_ID =	vehicle_driver;
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Driver_ID = 2 UNION SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Driver_ID JOIN driver AS T3 ON T2.Driver_ID =	vehicle_driver;
SELECT T2.vehicle_id, T2.Model FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id = T2.vehicle_id JOIN driver AS T3 ON T1.Driver_ID = T3.Driver_ID WHERE T3.Name = 'Jeff Gordon' GROUP BY T2.vehicle_id HAVING COUNT(*) > 2	vehicle_driver;
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID HAVING COUNT(*) > 2 UNION SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID HAVING COUNT(*) >	vehicle_driver;
SELECT count(*) FROM vehicle WHERE Top_Speed > (SELECT max(Top_Speed) FROM vehicle)	vehicle_driver;
SELECT count(*) FROM vehicle WHERE top_speed = (SELECT max(top_speed) FROM vehicle)	vehicle_driver;
SELECT Name FROM driver ORDER BY Name ASC	vehicle_driver;
SELECT Name FROM driver ORDER BY Name ASC	vehicle_driver;
SELECT Racing_Series, COUNT(*) FROM driver GROUP BY Racing_Series	vehicle_driver;
SELECT Racing_Series, COUNT(*) FROM driver GROUP BY Racing_Series	vehicle_driver;
SELECT T2.Name, T2.Citizenship FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T1.Vehicle_ID = T3.Vehicle_ID WHERE T3.Model = 'DJ1'	vehicle_driver;
SELECT T2.Name, T2.Citizenship FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T1.Vehicle_ID = T3.Vehicle_ID WHERE T3.Model = "DJ1"	vehicle_driver;
SELECT count(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver)	vehicle_driver;
SELECT count(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver)	vehicle_driver;
SELECT count(*) FROM exams	online_exams;
SELECT count(*) FROM exams	online_exams;
SELECT DISTINCT Subject_Code FROM exams ORDER BY Subject_Code ASC	online_exams;
SELECT DISTINCT Subject_Code FROM exams ORDER BY Subject_Code ASC	online_exams;
SELECT Exam_Name, Exam_Date FROM exams WHERE Subject_Code!= "Database"	online_exams;
SELECT Exam_Date, Exam_Name FROM exams WHERE Subject_Code!= "Database"	online_exams;
SELECT Exam_Date FROM exams WHERE Subject_Code LIKE "%data%" ORDER BY Exam_Date DESC	online_exams;
SELECT Exam_Date FROM exams WHERE Subject_Code LIKE "%data%" ORDER BY Exam_Date DESC	online_exams;
SELECT TYPE_of_question_code, count(*) FROM questions GROUP BY TYPE_of_question_code	online_exams;
SELECT TYPE_of_question_code, count(*) FROM questions GROUP BY TYPE_of_question_code	online_exams;
SELECT DISTINCT Question_Text FROM Questions WHERE Question_Text_Received_Comment_Code = "Normal"	online_exams;
SELECT DISTINCT Question_Text FROM Questions WHERE Question_Text LIKE "%Normal%"	online_exams;
SELECT count(DISTINCT T1.Comment_Code) FROM Exams AS T1 JOIN Questions AS T2 ON T1.Question_ID = T2.Question_ID	online_exams;
SELECT count(DISTINCT T1.Comment_Code) FROM Exams AS T1 JOIN Questions AS T2 ON T1.Question_ID = T2.Question_ID	online_exams;
SELECT Question_Text FROM Questions GROUP BY Question_Text ORDER BY COUNT(*) DESC	online_exams;
SELECT Question_Text FROM Questions GROUP BY Question_Text ORDER BY COUNT(*) DESC	online_exams;
SELECT T2.First_Name, T1.Exam_Date FROM exams AS T1 JOIN students AS T2 ON T1.Question_ID = T2.Student_ID	online_exams;
SELECT T2.First_Name, T1.Exam_Date FROM exams AS T1 JOIN students AS T2 ON T1.Question_ID = T2.Student_ID	online_exams;
SELECT T1.Email_Adress, T3.Exam_Date FROM questions AS T1 JOIN students AS T2 ON T1.Question_ID = T2.Student_ID JOIN exams AS T3 ON T1.Question_ID = T3.Question_ID ORDER BY T3.Exam_Date DESC	online_exams;
SELECT T2.Email_Adress, T1.Date_of_Ask FROM Exams AS T1 JOIN Students AS T2 ON T1.Question_ID = T2.Student_ID ORDER BY T1.Date_Ask DESC	online_exams;
SELECT T1.Question_Code FROM Exams AS T1 JOIN Students AS T2 ON T1.Question_ID = T2.Student_ID GROUP BY T1.Question_Code ORDER BY count(*) ASC LIMIT 1	online_exams;
SELECT Assessment_ID FROM Exams GROUP BY Assessment_ID ORDER BY count(*) ASC LIMIT 1	online_exams;
SELECT T2.First_Name FROM questions AS T1 JOIN students AS T2 ON T1.Question_ID = T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*) >= 2	online_exams;
SELECT T2.First_Name FROM exams AS T1 JOIN students AS T2 ON T1.Student_ID = T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*) >= 2	online_exams;
SELECT Question_Text FROM Questions GROUP BY Question_Text ORDER BY COUNT(*) DESC LIMIT 1	online_exams;
SELECT Question_Text FROM Questions GROUP BY Question_Text ORDER BY COUNT(*) DESC LIMIT 1	online_exams;
SELECT Last_Name FROM Students WHERE Gender_MFU!= "M"	online_exams;
SELECT Last_Name FROM Students WHERE Gender_MFU!= "M"	online_exams;
SELECT gender_MFU, COUNT(*) FROM students GROUP BY gender_MFU	online_exams;
SELECT gender_MFU, count(*) FROM students GROUP BY gender_MFU	online_exams;
SELECT Last_Name FROM Students WHERE Gender_MFU = "F" OR Gender_MFU = "M"	online_exams;
SELECT Last_Name FROM Students WHERE Gender_MFU = "F" OR Gender_MFU = "M"	online_exams;
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Questions)	online_exams;
SELECT First_Name FROM Students EXCEPT SELECT T2.First_Name FROM Exams AS T1 JOIN Students AS T2 ON T1.Question_ID = T2.Student_ID	online_exams;
SELECT T1.question_text FROM Questions AS T1 JOIN Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.Comment_Type = "Normal" INTERSECT SELECT T1.question_text FROM Questions AS T1 JOIN Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.Comment_Type = "Absent"	online_exams;
SELECT T1.Question_Text FROM Questions AS T1 JOIN Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T1.Question_Text = "Normal" INTERSECT SELECT T1.Question_Text FROM Questions AS T1 JOIN Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T1.Question_Text = "Absent"	online_exams;
SELECT TYPE_of_question_code FROM questions GROUP BY TYPE_of_question_code HAVING count(*) >= 3	online_exams;
SELECT TYPE_of_question_code FROM questions GROUP BY TYPE_of_question_code HAVING count(*) >= 3	online_exams;
SELECT * FROM students	online_exams;
SELECT * FROM students	online_exams;
SELECT count(*) FROM addresses	customers_and_orders;
SELECT count(*) FROM addresses	customers_and_orders;
SELECT address_id, address_details FROM addresses	customers_and_orders;
SELECT address_id, address_details FROM addresses	customers_and_orders;
SELECT count(*) FROM products	customers_and_orders;
SELECT count(*) FROM products	customers_and_orders;
SELECT product_id, product_type_code, product_name FROM products	customers_and_orders;
SELECT product_id, product_type_code, product_name FROM products	customers_and_orders;
SELECT product_price FROM products WHERE product_name = "Monitor"	customers_and_orders;
SELECT product_price FROM products WHERE product_name = "Monitor"	customers_and_orders;
SELECT min(product_price), avg(product_price), max(product_price) FROM products	customers_and_orders;
SELECT min(product_price), avg(product_price), max(product_price) FROM products	customers_and_orders;
SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'	customers_and_orders;
SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'	customers_and_orders;
SELECT count(*) FROM products WHERE product_type_code = "Hardware"	customers_and_orders;
SELECT count(*) FROM products WHERE product_type_code = "Hardware"	customers_and_orders;
SELECT product_name FROM products WHERE product_price > (SELECT avg(product_price) FROM products)	customers_and_orders;
SELECT product_name FROM products WHERE product_price > (SELECT avg(product_price) FROM products)	customers_and_orders;
SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT avg(product_price) FROM products WHERE product_type_code = 'Hardware')	customers_and_orders;
SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT avg(product_price) FROM products WHERE product_type_code = 'Hardware')	customers_and_orders;
SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1	customers_and_orders;
SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1	customers_and_orders;
SELECT product_id, product_name FROM products WHERE product_type_code = "Hardware" ORDER BY product_price LIMIT 1	customers_and_orders;
SELECT product_id, product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price LIMIT 1	customers_and_orders;
SELECT product_name FROM products ORDER BY product_price DESC	customers_and_orders;
SELECT product_name FROM products ORDER BY product_price DESC	customers_and_orders;
SELECT product_name FROM products WHERE product_type_code = "Hardware" ORDER BY product_price ASC	customers_and_orders;
SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC	customers_and_orders;
SELECT product_type_code, count(*) FROM products GROUP BY product_type_code	customers_and_orders;
SELECT product_type_code, count(*) FROM products GROUP BY product_type_code	customers_and_orders;
SELECT product_type_code, avg(product_price) FROM products GROUP BY product_type_code	customers_and_orders;
SELECT product_type_code, avg(product_price) FROM products GROUP BY product_type_code	customers_and_orders;
SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2	customers_and_orders;
SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2	customers_and_orders;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT count(*) FROM customers	customers_and_orders;
SELECT count(*) FROM customers	customers_and_orders;
SELECT customer_id, customer_name FROM customers	customers_and_orders;
SELECT customer_id, customer_name FROM customers	customers_and_orders;
SELECT customer_address, customer_phone, customer_email FROM customers WHERE customer_name = "Jeromy"	customers_and_orders;
SELECT customer_address, customer_phone, customer_email FROM customers WHERE customer_name = "Jeromy"	customers_and_orders;
SELECT payment_method_code, count(*) FROM customers GROUP BY payment_method_code	customers_and_orders;
SELECT payment_method_code, count(*) FROM customers GROUP BY payment_method_code	customers_and_orders;
SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT customer_name FROM customers WHERE payment_method_code = (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)	customers_and_orders;
SELECT customer_name FROM customers WHERE payment_method_code = (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)	customers_and_orders;
SELECT payment_method_code, customer_number FROM customers WHERE customer_name = "Jeromy"	customers_and_orders;
SELECT payment_method_code, customer_number FROM customers WHERE customer_name = "Jeromy"	customers_and_orders;
SELECT DISTINCT payment_method_code FROM customers	customers_and_orders;
SELECT DISTINCT payment_method_code FROM customers	customers_and_orders;
SELECT product_id, product_type_code FROM products ORDER BY product_name	customers_and_orders;
SELECT product_id, product_type_code FROM products ORDER BY product_name	customers_and_orders;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1	customers_and_orders;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1	customers_and_orders;
SELECT count(*) FROM customers	customers_and_orders;
SELECT count(*) FROM customers	customers_and_orders;
SELECT T2.order_id, T2.order_date, T2.order_status_code FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeromy"	customers_and_orders;
SELECT T2.order_id, T2.date_order_code, T2.order_status_code FROM customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeromy"	customers_and_orders;
SELECT T2.customer_name, T1.customer_id, count(*) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id	customers_and_orders;
SELECT T1.customer_name, T2.customer_id, count(*) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id	customers_and_orders;
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT order_status, count(*) FROM orders GROUP BY order_status	customers_and_orders;
SELECT order_status_code, count(*) FROM orders GROUP BY order_status_code	customers_and_orders;
SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1	customers_and_orders;
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders)	customers_and_orders;
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders)	customers_and_orders;
SELECT product_name FROM products EXCEPT SELECT product_name FROM orders	customers_and_orders;
SELECT product_name FROM products EXCEPT SELECT t1.product_name FROM products AS t1 JOIN order_items AS t2 ON t1.product_id = t2.product_id	customers_and_orders;
SELECT count(*) FROM products WHERE product_name = "Monitor"	customers_and_orders;
SELECT count(*) FROM products WHERE product_name = "Monitor"	customers_and_orders;
SELECT count(DISTINCT customer_id) FROM orders AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "Monitor"	customers_and_orders;
SELECT count(DISTINCT customer_id) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "Monitor"	customers_and_orders;
SELECT count(DISTINCT customer_id) FROM orders	customers_and_orders;
SELECT count(DISTINCT customer_id) FROM orders	customers_and_orders;
SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM orders	customers_and_orders;
SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM orders	customers_and_orders;
SELECT T1.order_date, T1.order_id FROM orders AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id GROUP BY T1.order_id HAVING sum(T2.quantity) > 6 UNION SELECT T1.order_date, T1.order_id FROM orders AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id	customers_and_orders;
SELECT T1.order_id, T1.order_date FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.order_id HAVING count(*) > 6 UNION SELECT T1.order_id, T1.order_date FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.product_id	customers_and_orders;
SELECT count(*) FROM building	region_building;
SELECT count(*) FROM building	region_building;
SELECT name FROM building ORDER BY Number_of_Stories ASC	region_building;
SELECT name FROM building ORDER BY Number_of_Stories ASC	region_building;
SELECT Address FROM building ORDER BY Completed_Year DESC	region_building;
SELECT address FROM building ORDER BY completed_year DESC	region_building;
SELECT max(number_of_stories) FROM building WHERE Completed_Year!= 1980	region_building;
SELECT max(number_of_stories) FROM building WHERE Completed_Year!= 1980	region_building;
SELECT avg(Population) FROM region	region_building;
SELECT avg(Population) FROM region	region_building;
SELECT Name FROM region ORDER BY Name ASC	region_building;
SELECT Name FROM region ORDER BY Name ASC	region_building;
SELECT Capital FROM region WHERE Area > 10000	region_building;
SELECT Capital FROM region WHERE Area > 10000	region_building;
SELECT Capital FROM region ORDER BY Population DESC LIMIT 1	region_building;
SELECT Capital FROM region ORDER BY Population DESC LIMIT 1	region_building;
SELECT Name FROM region ORDER BY Area DESC LIMIT 5	region_building;
SELECT Name FROM region ORDER BY Area DESC LIMIT 5	region_building;
SELECT T1.Name, T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID	region_building;
SELECT T1.Name, T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID	region_building;
SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Name HAVING COUNT(*) > 1	region_building;
SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*) > 1	region_building;
SELECT Capital FROM region ORDER BY COUNT(*) DESC LIMIT 1	region_building;
SELECT Capital FROM region ORDER BY Number_of_Stories DESC LIMIT 1	region_building;
SELECT T1.Address, T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID	region_building;
SELECT T1.Address, T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID	region_building;
SELECT T2.number_of_stories FROM region AS T1 JOIN building AS T2 ON T1.region_id = T2.region_id WHERE T1.name = "Abruzzo"	region_building;
SELECT T1.name, count(*) FROM building AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id WHERE T2.Name = "Abruzzo" GROUP BY T1.building_id	region_building;
SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year	region_building;
SELECT completed_year, count(*) FROM building	region_building;
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1	region_building;
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1	region_building;
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)	region_building;
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)	region_building;
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  15	region_building;
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  15	region_building;
SELECT DISTINCT Address FROM building	region_building;
SELECT DISTINCT Address FROM building	region_building;
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC	region_building;
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC	region_building;
SELECT channel_details FROM channels ORDER BY channel_details	government_shift;
SELECT channel_details FROM channels ORDER BY channel_details	government_shift;
SELECT count(*) FROM services	government_shift;
SELECT count(*) FROM services	government_shift;
SELECT TYPE_Code FROM analytical_layer GROUP BY TYPE_Code ORDER BY count(*) DESC LIMIT 1	government_shift;
SELECT TYPE_Code FROM Analytical_Layer GROUP BY TYPE_Code ORDER BY count(*) DESC LIMIT 1	government_shift;
SELECT T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customer_Details = "Hardy Kutch"	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN Customers_and_Services AS T2 ON T1.service_id = T2.service_id WHERE T2.customer_details = "Hardy Kutch"	government_shift;
SELECT T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID GROUP BY T1.Service_ID HAVING count(*) > 3	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN Customers_and_Services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id HAVING count(*) > 3	government_shift;
SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1	government_shift;
SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1	government_shift;
SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1	government_shift;
SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_details ORDER BY count(*) DESC LIMIT 1	government_shift;
SELECT customer_details FROM customers EXCEPT SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id	government_shift;
SELECT customer_details FROM customers EXCEPT SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id	government_shift;
SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1	government_shift;
SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1	government_shift;
SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services	government_shift;
SELECT count(DISTINCT customers_and_services_details) FROM Customers_and_services	government_shift;
SELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"	government_shift;
SELECT customer_details FROM Customers WHERE customer_details LIKE "%Kutch%"	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id WHERE T2.customer_details = "Hardy Kutch" OR T2.services_and_channels_details = "good"	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id WHERE T2.customer_details = "Hardy Kutch" OR T2.services_and_channels_details = "good"	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id WHERE T2.customer_details = "Hardy Kutch" INTERSECT SELECT T1.service_details FROM services AS T1 JOIN customer_interactions AS T2 ON T1.service_id = T2.service_id WHERE T2.customer_interaction_details_details = "bad"	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id WHERE T2.customer_details = "Hardy Kutch" INTERSECT SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id WHERE T2.customer_interaction_details_details = "bad"	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customer_interactions AS T2 ON T1.service_id = T2.service_id WHERE T2.channel_details  15 ''	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customer_interactions AS T2 ON T1.service_id = T2.service_id JOIN channels AS T3 ON T3.channel_id = T2.channel_id WHERE T3.channel_details = "15 ij"	government_shift;
SELECT T1.customer_details FROM customers AS T1 JOIN customer_interactions AS T2 ON T1.customer_id = T2.customer_id WHERE T2.status_code = '' Stuck '' INTERSECT SELECT T1.customer_details FROM customers AS T1 JOIN customer_interactions AS T2 ON T1.customer_id = T2.customer_id WHERE T2.services_and_channels_and_details	government_shift;
SELECT T1.customer_details FROM customers AS T1 JOIN customer_interactions AS T2 ON T1.customer_id = T2.customer_id WHERE T2.status_code = "Stuck" AND T2.services_and_channels_details = "bad"	government_shift;
SELECT count(*) FROM integration_platform WHERE integration_platform_details = 'Success'	government_shift;
SELECT count(*) FROM Integration_platform WHERE Integration_Platform_Details = "Success"	government_shift;
SELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id = T2.customer_id JOIN integration_platform AS T3 ON T2.integration_platform_id = T3.integration_platform_id WHERE T3.integration_platform_details = 'Failed'	government_shift;
SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN integration_platform AS T2 ON T1.customer_id = T2.customer_id WHERE T2.integration_platform_details = "Fail"	government_shift;
SELECT service_details FROM services EXCEPT SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id	government_shift;
SELECT service_details FROM services EXCEPT SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id	government_shift;
SELECT TYPE_code, COUNT(*) FROM Analytical_Layer GROUP BY TYPE_code	government_shift;
SELECT T1.type_code, count(*) FROM Analytical_layer AS T1 JOIN Services AS T2 ON T1.Analytical_ID = T2.Analytical_ID GROUP BY T1.type_code	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id WHERE T2.customers_and_services_details = '' unsatisfied ''	government_shift;
SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id = T2.service_id WHERE T2.customers_and_services_details = "unsatisfied"	government_shift;
SELECT count(*) FROM vehicles	vehicle_rent;
SELECT count(*) FROM vehicles	vehicle_rent;
SELECT name FROM vehicles ORDER BY model_year DESC	vehicle_rent;
SELECT name FROM vehicles ORDER BY model_year DESC	vehicle_rent;
SELECT DISTINCT Type_of_powertrain FROM vehicles	vehicle_rent;
SELECT DISTINCT Type_of_powertrain FROM vehicles	vehicle_rent;
SELECT name, type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE model_year = 2013 OR model_year = 2014	vehicle_rent;
SELECT name, type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014	vehicle_rent;
SELECT TYPE_of_powertrain FROM vehicles WHERE model_year = 2014 INTERSECT SELECT TYPE_of_powertrain FROM vehicles WHERE model_year = 2013	vehicle_rent;
SELECT TYPE_of_powertrain FROM vehicles WHERE model_year = 2013 INTERSECT SELECT TYPE_of_powertrain FROM vehicles WHERE model_year = 2014	vehicle_rent;
SELECT TYPE_of_powertrain, count(*) FROM vehicles GROUP BY TYPE_of_powertrain	vehicle_rent;
SELECT count(*), TYPE_of_powertrain FROM vehicles GROUP BY TYPE_of_powertrain	vehicle_rent;
SELECT TYPE_of_powertrain FROM vehicles GROUP BY TYPE_of_powertrain ORDER BY count(*) DESC LIMIT 1	vehicle_rent;
SELECT TYPE_of_powertrain FROM vehicles GROUP BY TYPE_of_powertrain ORDER BY count(*) DESC LIMIT 1	vehicle_rent;
SELECT min(Annual_fuel_cost), max(Annual_fuel_cost), avg(Annual_fuel_cost) FROM Vehicles	vehicle_rent;
SELECT min(Annual_fuel_cost), max(Annual_fuel_cost), avg(Annual_fuel_cost) FROM Vehicles	vehicle_rent;
SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate  (SELECT min(city_fuel_economy_rate) FROM vehicles WHERE highway_fuel_economy_rate > (SELECT max(city_fuel_economy_rate) FROM vehicles)	vehicle_rent;
SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate  (SELECT min(city_fuel_economy_rate) FROM vehicles WHERE highway_fuel_economy_rate > (SELECT max(highway_fuel_economy_rate) FROM vehicles)	vehicle_rent;
SELECT TYPE_of_powertrain, avg(Annual_fuel_cost) FROM vehicles GROUP BY TYPE_of_powertrain HAVING count(*) >= 2	vehicle_rent;
SELECT avg(Annual_fuel_cost), TYPE_of_powertrain FROM vehicles GROUP BY TYPE_of_powertrain HAVING count(*) >= 2	vehicle_rent;
SELECT name, age, membership_credit FROM Customers	vehicle_rent;
SELECT name, age, membership_credit FROM Customers	vehicle_rent;
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1	vehicle_rent;
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1	vehicle_rent;
SELECT avg(age) FROM customers WHERE membership_credit > (SELECT avg(membership_credit) FROM customers)	vehicle_rent;
SELECT avg(age) FROM Customers WHERE membership_credit > (SELECT avg(age) FROM Customers)	vehicle_rent;
SELECT * FROM Discount	vehicle_rent;
SELECT * FROM Discount	vehicle_rent;
SELECT T2.name, sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id = T2.id	vehicle_rent;
SELECT T2.name, sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id = T2.id GROUP BY T2.id	vehicle_rent;
SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)	vehicle_rent;
SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)	vehicle_rent;
SELECT T1.name FROM Customers AS T1 JOIN Renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T1.id HAVING COUNT(*) >= 2	vehicle_rent;
SELECT T1.name FROM Customers AS T1 JOIN Renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T1.id HAVING COUNT(*) >= 2	vehicle_rent;
SELECT T2.name, T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id = T2.id GROUP BY T1.vehicles_id ORDER BY count(*) DESC LIMIT 1	vehicle_rent;
SELECT T2.name, T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id = T2.id GROUP BY T1.vehicles_id ORDER BY count(*) DESC LIMIT 1	vehicle_rent;
SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id = T2.id ORDER BY T1.total_hours DESC	vehicle_rent;
SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id = T2.id GROUP BY T1.vehicles_id ORDER BY total_hours DESC	vehicle_rent;
SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id = T2.id GROUP BY T1.discount_id ORDER BY count(*) DESC LIMIT 1	vehicle_rent;
SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id = T2.id GROUP BY T1.discount_id ORDER BY count(*) DESC LIMIT 1	vehicle_rent;
SELECT T2.name, T2.type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id = T2.id WHERE T1.total_hours > 30	vehicle_rent;
SELECT T2.name, T2.type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id = T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours) > 30	vehicle_rent;
SELECT avg(city_fuel_economy_rate), avg(highway_fuel_economy_rate) FROM vehicles GROUP BY TYPE_of_powertrain	vehicle_rent;
SELECT avg(city_fuel_economy_rate), avg(highway_fuel_economy_rate), TYPE_of_powertrain FROM vehicles GROUP BY TYPE_of_powertrain	vehicle_rent;
SELECT avg(amount) FROM Student_Loans	cre_Students_Information_Systems;
SELECT avg(amount_of_loan) FROM Student_Loans	cre_Students_Information_Systems;
SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Student_Information_Systems AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) >= 2 UNION SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Student_Information_Information_Systems AS T2 ON T1.student_id	cre_Students_Information_Systems;
SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Student_Information_Systems AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) >= 2 UNION SELECT T1.bio_data, T1.student_id FROM Students AS T1 JOIN Student_Information_Information_Systems AS T2 ON T1.student_id	cre_Students_Information_Systems;
SELECT T2.teacher_details FROM Classes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.details LIKE '%data%' EXCEPT SELECT T2.teacher_details FROM Classes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.details LIKE 'net%'	cre_Students_Information_Systems;
SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.details LIKE "%data%" EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.details LIKE "%net%"	cre_Students_Information_Systems;
SELECT bio_data FROM Students EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Information_Systems AS T2 ON T1.student_id = T2.student_id JOIN Detention AS T3 ON T2.student_id = T3.student_id ORDER BY T3.detention_type_code DESC LIMIT 1	cre_Students_Information_Systems;
SELECT bio_data FROM Students EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Information_Systems AS T2 ON T1.student_id = T2.student_id JOIN Detention AS T3 ON T2.student_id = T3.student_id ORDER BY T3.detention_type_code DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T2.amount_description, T2.date_of_loan FROM Student_Achievement AS T1 JOIN Loans AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) >= 2	cre_Students_Information_Systems;
SELECT T1.amount_and_date_of_loan FROM Loans AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.achievement_type_code = 'Achievement' GROUP BY T1.student_id HAVING count(*) >= 2	cre_Students_Information_Systems;
SELECT T2.student_details, T1.teacher_id FROM Courses AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T2.student_details, T1.teacher_id FROM Courses AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT DISTINCT T1.detention_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code	cre_Students_Information_Systems;
SELECT DISTINCT T1.detention_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code	cre_Students_Information_Systems;
SELECT T1.student_details, T2.address_type_description FROM Students AS T1 JOIN Ref_Address_Types AS T2 ON T1.student_id = T2.address_id	cre_Students_Information_Systems;
SELECT T1.student_details, T2.address_type_description FROM Students AS T1 JOIN Ref_Address_Types AS T2 ON T1.student_id = T2.address_id	cre_Students_Information_Systems;
SELECT T1.address_details, T2.bio_data FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.student_id	cre_Students_Information_Systems;
SELECT T1.address_details, T2.bio_data FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.student_id	cre_Students_Information_Systems;
SELECT bio_data, date_of_transcript FROM Students	cre_Students_Information_Systems;
SELECT T1.bio_data, T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT T1.result_details, count(*) FROM Behavior_Monitoring AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.result_code ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT count(*), T1.behaviour_monitoring_details FROM Behaviour_Monitoring AS T1 JOIN Details AS T2 ON T1.behaviour_monitoring_id = T2.behaviour_monitoring_id GROUP BY T1.behaviour_monitoring_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 3	cre_Students_Information_Systems;
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 3	cre_Students_Information_Systems;
SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data, T2.date_of_event FROM Students AS T1 JOIN Student_Information_Systems AS T2 ON T1.student_id = T2.student_id WHERE T2.event_type_code = 'Event'	cre_Students_Information_Systems;
SELECT T1.bio_data, T2.date_of_event FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT count(*), T1.event_type_code, T1.event_type_description FROM Ref_Event_Types AS T1 JOIN Students AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T1.event_type_code ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.event_type_code, T1.event_type_description, count(*) FROM Ref_Event_Types AS T1 JOIN Students AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T1.event_type_code ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.achievement_details, T2.achievement_type_description FROM Accomplishment AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code	cre_Students_Information_Systems;
SELECT T1.achievement_details, T2.achievement_type_description FROM Accomplishments AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code	cre_Students_Information_Systems;
SELECT count(*) FROM TEACHERS AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id EXCEPT SELECT count(*) FROM TEACHERS AS T3 JOIN Students AS T4 ON T3.student_id = T4.student_id WHERE T4.student_id NOT IN ( SELECT T4.student_id FROM Students AS T4 ON T4.student_id = T4.student_id	cre_Students_Information_Systems;
SELECT count(*) FROM TEACHERS AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.student_id NOT IN ( SELECT T1.student_id FROM Ref_Achievement_Type AS T3 JOIN Students AS T4 ON T3.student_id = T4.student_id WHERE T3.achievement_Type_Description = "Achievement"	cre_Students_Information_Systems;
SELECT date_of_transcript, transcript_details FROM Transcripts	cre_Students_Information_Systems;
SELECT date_of_transcript, transcript_details FROM TRANSCRITS	cre_Students_Information_Systems;
SELECT T1.achievement_type_code, T2.achievement_type_description, T1.date_of_achievement FROM Ref_Achievement_Type AS T1 JOIN Achievements AS T2 ON T1.achievement_type_code = T2.achievement_type_code	cre_Students_Information_Systems;
SELECT T1.achievement_type_code, T2.achievement_type_description, T1.date_of_achievement FROM Ref_Achievement_Type AS T1 JOIN Achievements AS T2 ON T1.achievement_type_code = T2.achievement_type_code	cre_Students_Information_Systems;
SELECT T1.detention_start_time, T1.detention_end_time FROM Detention AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT T1.starting_time, T1.ending_time FROM Detention AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT bio_data FROM Students WHERE student_details LIKE "%Suite%"	cre_Students_Information_Systems;
SELECT bio_data FROM Students WHERE student_details LIKE "%Suite%"	cre_Students_Information_Systems;
SELECT T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id JOIN Teachers AS T3 ON T2.teacher_id = T3.student_id	cre_Students_Information_Systems;
SELECT teacher_details, student_details FROM Students AS T1 JOIN Class AS T2 ON T1.student_id = T2.student_id	cre_Students_Information_Systems;
SELECT T1.teacher_id FROM Courses AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.teacher_id, count(*) FROM Courses AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT student_id FROM Courses GROUP BY student_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT student_id, count(*) FROM Courses GROUP BY student_id ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.student_id, T1.student_details FROM Students AS T1 JOIN Courses AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2	cre_Students_Information_Systems;
SELECT T1.student_id, T1.student_details FROM Students AS T1 JOIN Courses AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2	cre_Students_Information_Systems;
SELECT detention_type_code, detention_type_description FROM Detention GROUP BY detention_type_code ORDER BY count(*) ASC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.detention_type_code, T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_more_than-average	cre_Students_Information_Systems;
SELECT T1.bio_data, T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_of_loan > (SELECT avg(amount_of_loan) FROM Students)	cre_Students_Information_Systems;
SELECT loan_date FROM Loans ORDER BY loan_date ASC LIMIT 1	cre_Students_Information_Systems;
SELECT loan_date FROM Loans ORDER BY loan_date ASC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.loan_value ASC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.loan_amount ASC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.loan_value = (SELECT max(loan_value) FROM Student_Information_Systems)	cre_Students_Information_Systems;
SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T2.teacher_details FROM Transcripts AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_of_transcript LIMIT 1	cre_Students_Information_Systems;
SELECT T2.teacher_details FROM Transcripts AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_of_transcript LIMIT 1	cre_Students_Information_Systems;
SELECT T1.student_id, sum(T2.amount) FROM Student_Loans AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id	cre_Students_Information_Systems;
SELECT T1.student_id, sum(T2.amount_loan) FROM Student_Loans AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id	cre_Students_Information_Systems;
SELECT T1.student_id, T2.bio_data, count(*) FROM Courses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id	cre_Students_Information_Systems;
SELECT T1.student_id, T2.bio_data, count(*) FROM Courses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id	cre_Students_Information_Systems;
SELECT count(*) FROM Students_in_Detention	cre_Students_Information_Systems;
SELECT count(*) FROM Students WHERE student_id IN ( SELECT student_id FROM Detention )	cre_Students_Information_Systems;
SELECT T1.address_type_code, T2.address_type_description FROM Ref_Address_Types AS T1 JOIN Student_Addresses AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.address_type_code, T2.address_type_description FROM Ref_Address_Types AS T1 JOIN Student_Addresses AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1	cre_Students_Information_Systems;
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id WHERE T2.event_type_code = 'Event' AND T1.student_id WHERE T2.student_id	cre_Students_Information_Systems;
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id = T2.student_id WHERE T2.event_type_code = 'Event' AND T1.student_id WHERE T2.student_id	cre_Students_Information_Systems;
SELECT T1.address_start, T1.address_end FROM Addresses AS T1 JOIN Transcripts AS T2 ON T1.address_id = T2.address_id GROUP BY T1.address_id HAVING count(*) = 2	cre_Students_Information_Systems;
SELECT T1.address_start, T1.address_end FROM Addresses AS T1 JOIN Transcripts AS T2 ON T1.address_id = T2.address_id GROUP BY T1.address_id HAVING count(*) = 2	cre_Students_Information_Systems;
SELECT date_of_detention FROM Detention	cre_Students_Information_Systems;
SELECT detention_start FROM Detention	cre_Students_Information_Systems;
SELECT Name FROM Author	book_1;
SELECT Name FROM Author	book_1;
SELECT Name, Address FROM Client	book_1;
SELECT name, address FROM client	book_1;
SELECT Title, ISBN, SalePrice FROM Book	book_1;
SELECT title, ISBN, saleprice FROM Book	book_1;
SELECT count(*) FROM Book	book_1;
SELECT count(*) FROM Book	book_1;
SELECT count(*) FROM Author	book_1;
SELECT count(*) FROM Author	book_1;
SELECT count(*) FROM Client	book_1;
SELECT count(*) FROM Client	book_1;
SELECT Name, Address FROM Client ORDER BY Name	book_1;
SELECT Name, Address FROM Client ORDER BY Name ASC	book_1;
SELECT title, name FROM Book AS T1 JOIN Author_Book AS T2 ON T1.idAuthor = T2.author	book_1;
SELECT T1.title, T2.author FROM Books AS T1 JOIN Author_Book AS T2 ON T1.idOrder = T2.author	book_1;
SELECT idorder, idclient FROM orders AS T1 JOIN client AS T2 ON T1.idclient = T2.idclient WHERE T1.idorder = T2.idorder AND T1.idclient = T2.idclient	book_1;
SELECT idorder, name FROM orders AS T1 JOIN client AS T2 ON T1.idclient = T2.idclient WHERE T1.idorder = T2.idorder GROUP BY T1.idorder	book_1;
SELECT T2.Name, COUNT(*) FROM Author_Book AS T1 JOIN Author AS T2 ON T1.Author = T2.idAuthor GROUP BY T2.Name	book_1;
SELECT T2.Name, COUNT(*) FROM Author_Book AS T1 JOIN Author AS T2 ON T1.Author = T2.idAuthor GROUP BY T1.Author	book_1;
SELECT T1.idbookid, count(*) FROM Books_order AS T1 JOIN Orders AS T2 ON T1.idorder = T2.idorder GROUP BY T1.idbookid	book_1;
SELECT count(*), T1.idbn FROM Book AS T1 JOIN Books_order AS T2 ON T1.idorder = T2.idorder GROUP BY T1.idbn	book_1;
SELECT T1.idbookid, sum(T2.idorder) FROM Books_order AS T1 JOIN Orders AS T2 ON T1.idorder = T2.idorder GROUP BY T1.idbookid	book_1;
SELECT T2.idbn, sum(T1.idOrder) FROM Books_order AS T1 JOIN Orders AS T2 ON T1.idOrder = T2.idOrder GROUP BY T2.idbn	book_1;
SELECT T2.title FROM Books_order AS T1 JOIN Book AS T2 ON T1.idOrder = T2.idOrder GROUP BY T1.idOrder ORDER BY count(*) DESC LIMIT 1	book_1;
SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.idOrder = T2.idOrder GROUP BY T2.idOrder ORDER BY count(*) DESC LIMIT 1	book_1;
SELECT T2.title, T1.purchaseprice FROM Books_order AS T1 JOIN Book AS T2 ON T1.idOrder = T2.idOrder GROUP BY T1.idOrder ORDER BY sum(T1.idOrder) DESC LIMIT 1	book_1;
SELECT T2.title, T1.purchaseprice FROM Books_order AS T1 JOIN Book AS T2 ON T1.idOrder = T2.idOrder GROUP BY T1.idOrder ORDER BY sum(T1.idOrder) DESC LIMIT 1	book_1;
SELECT T2.title FROM books_order AS T1 JOIN book AS T2 ON T1.idOrder = T2.idOrder	book_1;
SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.idOrder = T2.idOrder	book_1;
SELECT T2.name FROM orders AS T1 JOIN client AS T2 ON T1.idclient = T2.idclient WHERE T1.idorder >= 1 GROUP BY T1.idclient HAVING count(*) >= 1	book_1;
SELECT DISTINCT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient = T2.idClient	book_1;
SELECT T2.name, count(*) FROM orders AS T1 JOIN client AS T2 ON T1.idclient = T2.idclient GROUP BY T2.idclient	book_1;
SELECT T1.Name, COUNT(*) FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient = T2.idClient GROUP BY T1.idClient	book_1;
SELECT T2.name FROM orders AS T1 JOIN client AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient ORDER BY count(*) DESC LIMIT 1	book_1;
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient = T2.idClient GROUP BY T2.idClient ORDER BY count(*) DESC LIMIT 1	book_1;
SELECT T2.name, sum(T1.idOrder) FROM Books_order AS T1 JOIN Client AS T2 ON T1.idClient = T2.idClient GROUP BY T1.idClient	book_1;
SELECT T1.Name, sum(T2.Books_Order) FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient = T2.idClient GROUP BY T1.idClient	book_1;
SELECT T1.name FROM client AS T1 JOIN books_order AS T2 ON T1.idclient = T2.idclient GROUP BY T2.idclient ORDER BY sum(T2.idorder) DESC LIMIT 1	book_1;
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient = T2.idClient GROUP BY T2.idClient ORDER BY sum(T2.idOrder) DESC LIMIT 1	book_1;
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_order)	book_1;
SELECT Title FROM Book EXCEPT SELECT T1.title FROM Book AS T1 JOIN Books_order AS T2 ON T1.idOrder = T2.idOrder	book_1;
SELECT Name FROM Client EXCEPT SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient = T2.idClient	book_1;
SELECT Name FROM Client EXCEPT SELECT t1.name FROM Client AS t1 JOIN Orders AS t2 ON t1.idclient = t2.idclient WHERE t2.idOrder = 'None'	book_1;
SELECT max(SalePrice), min(SalePrice) FROM Book	book_1;
SELECT max(SalePrice), min(SalePrice) FROM Book	book_1;
SELECT avg(purchaseprice), avg(saleprice) FROM Book	book_1;
SELECT avg(PurchasePrice), avg(SalePrice) FROM Book	book_1;
SELECT max(SalePrice), max(PurchasePrice) FROM Book	book_1;
SELECT max(SalePrice), max(PurchasePrice) FROM Book	book_1;
SELECT title FROM book WHERE saleprice > (SELECT avg(saleprice) FROM book)	book_1;
SELECT title FROM book WHERE saleprice > (SELECT avg(saleprice) FROM book)	book_1;
SELECT title FROM book ORDER BY saleprice LIMIT 1	book_1;
SELECT Title FROM Book WHERE SalePrice = (SELECT min(SalePrice) FROM Book)	book_1;
SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1	book_1;
SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1	book_1;
SELECT avg(SalePrice) FROM Book WHERE Author = "George Orwell"	book_1;
SELECT avg(SalePrice) FROM Book WHERE Author = "George Orwell"	book_1;
SELECT T2.SalePrice FROM author AS T1 JOIN book AS T2 ON T1.idAuthor = T2.author WHERE T1.Name = 'Plato'	book_1;
SELECT T2.SalePrice FROM author AS T1 JOIN book AS T2 ON T1.idAuthor = T2.author WHERE T1.Name = 'Plato'	book_1;
SELECT title FROM book WHERE author = 'George Orwell' ORDER BY saleprice LIMIT 1	book_1;
SELECT title FROM Book WHERE author = 'George Orwell' ORDER BY saleprice LIMIT 1	book_1;
SELECT title FROM book WHERE purchaseprice  (SELECT avg(saleprice) FROM book WHERE author = 'Platon')	book_1;
SELECT title FROM book WHERE author = 'Plato' AND saleprice  (SELECT avg(saleprice) FROM book)	book_1;
SELECT T2.name FROM book AS T1 JOIN author_book AS T2 ON T1.idAuthor = T2.author WHERE T1.title = "Pride and Prejudice"	book_1;
SELECT T2.name FROM book AS T1 JOIN author AS T2 ON T1.author = T2.idAuthor WHERE T1.title = 'Pride and Prejudice'	book_1;
SELECT T2.title FROM author AS T1 JOIN author_book AS T2 ON T1.idAuthor = T2.author WHERE T1.name LIKE '%Plato%'	book_1;
SELECT T2.title FROM author AS T1 JOIN book AS T2 ON T1.idAuthor = T2.author WHERE T1.name LIKE '%Plato%'	book_1;
SELECT count(*) FROM orders AS T1 JOIN book_order AS T2 ON T1.idorder = T2.idorder WHERE T2.title = 'Pride and Prejudice'	book_1;
SELECT count(*) FROM orders AS T1 JOIN books_order AS T2 ON T1.idorder = T2.idorder JOIN book AS T3 ON T2.idorder = T3.idorder WHERE T3.title = 'Pride and Prejudice'	book_1;
SELECT idorder FROM Books_order WHERE title = "Pride and Prejudice" INTERSECT SELECT idorder FROM Books_order WHERE title = "The Little Prince"	book_1;
SELECT idorder FROM Books_order WHERE title = 'Pride and Prejudice' INTERSECT SELECT idorder FROM Books_order WHERE title = 'The Little Prince'	book_1;
SELECT T2.idbookid FROM orders AS T1 JOIN books_order AS T2 ON T1.idorder = T2.idorder WHERE T1.name = 'Peter Doe' INTERSECT SELECT T2.idbookid FROM orders AS T1 JOIN books_order AS T2 ON T1.idorder = T2.idorder WHERE T1.name = 'James Smith'	book_1;
SELECT T3.idbn FROM clients AS T1 JOIN books_order AS T2 ON T1.idclient = T2.idclient JOIN orders AS T3 ON T2.idorder = T3.idorder WHERE T1.name = 'Peter Doe' INTERSECT SELECT T3.idbn FROM clients AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient JOIN books_order AS T3 ON T2.idorder = T2.idclient WHERE T1.name = 'James Smith	book_1;
SELECT T3.title FROM orders AS T1 JOIN books_order AS T2 ON T1.idOrder = T2.idOrder JOIN client AS T3 ON T1.idClient = T3.idClient WHERE T3.name = 'Peter Doe' EXCEPT SELECT T3.title FROM orders AS T1 JOIN books_order AS T2 ON T1.idOrder = T2.idOrder WHERE T3.name = 'James Smith	book_1;
SELECT T3.title FROM orders AS T1 JOIN books_order AS T2 ON T1.idOrder = T2.idOrder JOIN client AS T3 ON T1.idClient = T3.idClient WHERE T3.name = 'Peter Doe' EXCEPT SELECT T3.title FROM orders AS T1 JOIN books_order AS T2 ON T1.idOrder = T2.idOrder WHERE T3.name = 'James Smith	book_1;
SELECT T2.name FROM books_order AS T1 JOIN client AS T2 ON T1.idclient = T2.idclient WHERE T1.title = 'Pride and Prejudice'	book_1;
SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient WHERE T2.title = 'Pride and Prejudice'	book_1;
SELECT count(*) FROM book	book_review;
SELECT Title FROM book ORDER BY Title ASC	book_review;
SELECT Title FROM book ORDER BY Pages DESC	book_review;
SELECT TYPE, Release FROM book	book_review;
SELECT max(Chapters), min(Chapters) FROM book	book_review;
SELECT Title FROM book WHERE TYPE!= "Poet"	book_review;
SELECT avg(Rating) FROM review	book_review;
SELECT T2.Title, T1.Rating FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID	book_review;
SELECT T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1	book_review;
SELECT rank FROM review ORDER BY Pages ASC LIMIT 1	book_review;
SELECT T2.Title FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Rank DESC LIMIT 1	book_review;
SELECT avg(Readers_in_Million) FROM review WHERE book_type = "Novel"	book_review;
SELECT TYPE, COUNT(*) FROM book GROUP BY TYPE	book_review;
SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1	book_review;
SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*) >= 3	book_review;
SELECT T2.Title FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Rating ASC	book_review;
SELECT Title, Audio FROM book ORDER BY Readers_in_Million DESC	book_review;
SELECT count(*) FROM book WHERE book_id NOT IN (SELECT book_id FROM review)	book_review;
SELECT TYPE FROM book WHERE Chapters > 75 INTERSECT SELECT TYPE FROM book WHERE Chapters  50	book_review;
SELECT count(DISTINCT TYPE) FROM book	book_review;
SELECT Title, TYPE FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)	book_review;
SELECT count(*) FROM customer	restaurant_bills;
SELECT count(*) FROM customer	restaurant_bills;
SELECT Name FROM customer ORDER BY Level_of_Membership ASC	restaurant_bills;
SELECT name FROM customer ORDER BY Level_of_Membership ASC	restaurant_bills;
SELECT Nationality, Card_Credit FROM customer	restaurant_bills;
SELECT Nationality, Card_Credit FROM customer	restaurant_bills;
SELECT Name FROM customer WHERE Nationality = "England" OR Nationality = "Australia"	restaurant_bills;
SELECT Name FROM customer WHERE Nationality = "England" OR Nationality = "Australia"	restaurant_bills;
SELECT avg(card_credit) FROM customer WHERE LEVEL_of_Membership > 1	restaurant_bills;
SELECT avg(card_credit) FROM customer WHERE LEVEL_of_Membership > 1	restaurant_bills;
SELECT card_credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1	restaurant_bills;
SELECT card_credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1	restaurant_bills;
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality	restaurant_bills;
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality	restaurant_bills;
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1	restaurant_bills;
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1	restaurant_bills;
SELECT Nationality FROM customer WHERE Card_Credit  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit > 75	restaurant_bills;
SELECT Nationality FROM customer WHERE Card_Credit > 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  75	restaurant_bills;
SELECT T2.Name, T1.Dish_Name FROM customer_order AS T1 JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID	restaurant_bills;
SELECT T2.name, T1.dish_name FROM customer_order AS T1 JOIN customer AS T2 ON T1.customer_id = T2.customer_id	restaurant_bills;
SELECT T2.Name, T1.Dish_Name FROM customer_order AS T1 JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T1.quantity DESC	restaurant_bills;
SELECT T2.Name, T1.Dish_Name FROM customer_order AS T1 JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T1.quantity DESC	restaurant_bills;
SELECT T2.Name, sum(T1.quantity) FROM customer_order AS T1 JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID	restaurant_bills;
SELECT T2.Name, sum(T1.quantity) FROM customer_order AS T1 JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID	restaurant_bills;
SELECT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING sum(T2.quantity) > 1	restaurant_bills;
SELECT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING sum(T2.quantity) > 1	restaurant_bills;
SELECT DISTINCT Manager FROM branch	restaurant_bills;
SELECT DISTINCT Manager FROM branch	restaurant_bills;
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)	restaurant_bills;
SELECT name FROM customer EXCEPT SELECT T2.name FROM customer_order AS T1 JOIN customer AS T2 ON T1.customer_id = T2.customer_id	restaurant_bills;
SELECT count(*) FROM member	club_leader;
SELECT Name FROM member ORDER BY Age ASC	club_leader;
SELECT Name, Nationality FROM member	club_leader;
SELECT Name FROM member WHERE Nationality!= "England"	club_leader;
SELECT Name FROM member WHERE Age = 19 OR Age = 20	club_leader;
SELECT Name FROM member ORDER BY Age DESC LIMIT 1	club_leader;
SELECT Nationality, COUNT(*) FROM member GROUP BY Nationality	club_leader;
SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1	club_leader;
SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*) >= 2	club_leader;
SELECT T2.Name, T1.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID	club_leader;
SELECT Team_Leader FROM club WHERE Overall_Ranking > 100	club_leader;
SELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Year_Join  2018	club_leader;
SELECT Team_Leader FROM club WHERE Club_Name = "Houston"	club_leader;
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)	club_leader;
SELECT Nationality FROM member WHERE Age > 22 INTERSECT SELECT Nationality FROM member WHERE Age  19	club_leader;
SELECT avg(T2.Age) FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID	club_leader;
SELECT club_name FROM club WHERE club_name LIKE '%state%'	club_leader;
SELECT collection_subset_name FROM Collection_subsets	cre_Doc_and_collections;
SELECT Collection_Subset_Name FROM Collection_Subsets	cre_Doc_and_collections;
SELECT collection_subset_details FROM Collection_subsets WHERE collection_name = 'Top collection'	cre_Doc_and_collections;
SELECT T1.collection_subset_details FROM Collection_subsets AS T1 JOIN Collections AS T2 ON T1.collection_subset_id = T2.collection_id WHERE T2.collection_name = 'Top collection'	cre_Doc_and_collections;
SELECT document_subset_name FROM document_subsets	cre_Doc_and_collections;
SELECT document_subset_name FROM Document_subsets	cre_Doc_and_collections;
SELECT document_subset_details FROM Document_subsets WHERE document_subset_name = "Best for 2000"	cre_Doc_and_collections;
SELECT document_subset_details FROM Document_subsets WHERE document_subset_name = "Best for 2000"	cre_Doc_and_collections;
SELECT document_id FROM Documents	cre_Doc_and_collections;
SELECT document_object_id FROM Document_objects	cre_Doc_and_collections;
SELECT parent_document_object_id FROM Document_objects WHERE owner = 'Marlin'	cre_Doc_and_collections;
SELECT document_object_id FROM Document_objects WHERE owner = 'Marlin'	cre_Doc_and_collections;
SELECT OWNER FROM Document_Objects WHERE Description = 'Braeden Collection'	cre_Doc_and_collections;
SELECT OWNER FROM Document_objects WHERE Description = 'Braeden Collection'	cre_Doc_and_collections;
SELECT parent_document_owner FROM Document_objects WHERE OWNER = 'Marlin'	cre_Doc_and_collections;
SELECT parent_document_owner FROM Document_objects WHERE OWNER = 'Marlin'	cre_Doc_and_collections;
SELECT DISTINCT T1.Description FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID	cre_Doc_and_collections;
SELECT DISTINCT T1.Description FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID	cre_Doc_and_collections;
SELECT count(*) FROM Document_objects WHERE OWNER = 'Marlin'	cre_Doc_and_collections;
SELECT count(*) FROM Document_objects WHERE Owner = 'Marlin'	cre_Doc_and_collections;
SELECT document_object_id FROM Document_objects EXCEPT SELECT document_object_id FROM Document_objects	cre_Doc_and_collections;
SELECT document_object_id FROM Document_objects EXCEPT SELECT document_object_id FROM Document_objects	cre_Doc_and_collections;
SELECT document_object_id, count(*) FROM Document_objects GROUP BY document_object_id	cre_Doc_and_collections;
SELECT count(*), parent_document_id FROM Document_objects GROUP BY parent_document_id	cre_Doc_and_collections;
SELECT collection_name FROM collections	cre_Doc_and_collections;
SELECT collection_name FROM collections	cre_Doc_and_collections;
SELECT collection_description FROM Collections WHERE collection_name = "Best"	cre_Doc_and_collections;
SELECT collection_description FROM Collections WHERE collection_name = 'Best'	cre_Doc_and_collections;
SELECT T1.collection_name FROM Collections AS T1 JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Nice"	cre_Doc_and_collections;
SELECT T2.parent_collection_name FROM Collections AS T1 JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Nice"	cre_Doc_and_collections;
SELECT collection_name FROM collections EXCEPT SELECT T1.collection_name FROM collections AS T1 JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Related_Collections AS T3 ON T2.Collection_ID = T3.Collection_ID	cre_Doc_and_collections;
SELECT collection_name FROM collections EXCEPT SELECT T1.collection_name FROM collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id = T2.collection_id	cre_Doc_and_collections;
SELECT document_id FROM Document_objects GROUP BY document_id HAVING count(*) > 1	cre_Doc_and_collections;
SELECT T1.document_object_id FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id = T2.document_object_id GROUP BY T1.document_object_id HAVING count(*) > 1	cre_Doc_and_collections;
SELECT count(*) FROM Collections WHERE Collection_Name = "Best"	cre_Doc_and_collections;
SELECT count(*) FROM Collections WHERE Collection_Name = "Best"	cre_Doc_and_collections;
SELECT T1.document_id FROM Document_subset_members AS T1 JOIN Document_objects AS T2 ON T1.document_object_id = T2.document_object_id WHERE T2.owner = 'Ransom'	cre_Doc_and_collections;
SELECT T2.Related_Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Ransom'	cre_Doc_and_collections;
SELECT collection_subset_id, collection_subset_name, count(*) FROM Collection_subsets GROUP BY collection_subset_id	cre_Doc_and_collections;
SELECT collection_subset_id, collection_subset_name, count(*) FROM Collection_subsets GROUP BY collection_subset_id	cre_Doc_and_collections;
SELECT document_id, count(*) FROM Document_subset_members GROUP BY document_id ORDER BY count(*) DESC LIMIT 1	cre_Doc_and_collections;
SELECT count(*), document_object_id FROM Document_subset_members GROUP BY document_object_id	cre_Doc_and_collections;
SELECT document_object_id, count(*) FROM Document_subset_members GROUP BY document_object_id ORDER BY count(*) ASC LIMIT 1	cre_Doc_and_collections;
SELECT document_object_id FROM Document_objects GROUP BY document_object_id ORDER BY count(*) ASC LIMIT 1	cre_Doc_and_collections;
SELECT document_object_id, count(*) FROM Document_subset_members GROUP BY document_object_id HAVING count(*) BETWEEN 2 AND 4	cre_Doc_and_collections;
SELECT T1.document_object_id, count(*) FROM Documents_in_collections AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id = T2.document_object_id GROUP BY T1.document_object_id HAVING count(*) BETWEEN 2 AND 4	cre_Doc_and_collections;
SELECT T2.owner FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id = T2.document_object_id WHERE T1.owner = "Braeden"	cre_Doc_and_collections;
SELECT DISTINCT T1.Owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Related_Document_Object_ID WHERE T1.Owner = "Braeden"	cre_Doc_and_collections;
SELECT DISTINCT T1.document_subset_name FROM Document_subsets AS T1 JOIN Document_subset_members AS T2 ON T1.document_subset_id = T2.document_subset_id WHERE T2.owner = 'Braeden'	cre_Doc_and_collections;
SELECT DISTINCT T1.document_subset_name FROM Document_subsets AS T1 JOIN Document_objects AS T2 ON T1.document_subset_id = T2.document_subset_id WHERE T2.owner = 'Braeden'	cre_Doc_and_collections;
SELECT document_subset_id, document_subset_name, count(*) FROM Document_subsets GROUP BY document_subset_id	cre_Doc_and_collections;
SELECT document_subset_id, document_subset_name, count(*) FROM Document_subsets GROUP BY document_subset_id	cre_Doc_and_collections;
SELECT document_subset_id, document_subset_name, count(*) FROM Document_subsets GROUP BY document_subset_id ORDER BY count(*) DESC LIMIT 1	cre_Doc_and_collections;
SELECT document_subset_id, document_subset_name, count(*) FROM Document_subsets GROUP BY document_subset_id ORDER BY count(*) DESC LIMIT 1	cre_Doc_and_collections;
SELECT document_object_id FROM Document_subset_members WHERE document_subset_name = 'Best for 2000'	cre_Doc_and_collections;
SELECT document_object_id FROM Document_subset_members WHERE document_subset_name = 'Best for 2000'	cre_Doc_and_collections;
SELECT T1.document_subset_name, T2.document_id FROM Document_subset_members AS T1 JOIN Document_subset_Members AS T2 ON T1.document_subset_id = T2.document_subset_id GROUP BY T2.document_id	cre_Doc_and_collections;
SELECT T1.document_subset_name, T2.document_subset_id FROM Document_subset_members AS T1 JOIN Documents_in_collections AS T2 ON T1.document_subset_id = T2.document_subset_id GROUP BY T2.document_subset_id	cre_Doc_and_collections;
SELECT T2.Collection_Name FROM Documents_in_collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T1.Document_Object_ID = T3.Document_Object_ID WHERE T3.Owner = 'Ransom'	cre_Doc_and_collections;
SELECT T2.collection_name FROM Document_objects AS T1 JOIN Collections AS T2 ON T1.document_object_id = T2.document_object_id WHERE T1.owner = 'Ransom'	cre_Doc_and_collections;
SELECT count(*), T1.document_object_id FROM Documents AS T1 JOIN Documents_in_collections AS T2 ON T1.document_object_id = T2.document_object_id GROUP BY T1.document_object_id	cre_Doc_and_collections;
SELECT T1.document_object_id, count(*) FROM Documents_in_collections AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id = T2.document_object_id GROUP BY T1.document_object_id	cre_Doc_and_collections;
SELECT count(*) FROM Collections WHERE Collection_Name = 'Best'	cre_Doc_and_collections;
SELECT count(*) FROM Collections WHERE Collection_Name = 'Best'	cre_Doc_and_collections;
SELECT T1.document_object_id FROM Documents_in_collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best"	cre_Doc_and_collections;
SELECT count(*) FROM Documents_in_collections AS T1 JOIN collections AS T2 ON T1.collection_id = T2.collection_id WHERE T2.collection_name = "Best"	cre_Doc_and_collections;
SELECT T1.collection_name, T1.collection_id, count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.collection_id = T2.collection_id GROUP BY T1.collection_id ORDER BY count(*) DESC LIMIT 1	cre_Doc_and_collections;
SELECT T1.collection_id, count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.collection_id = T2.collection_id WHERE T1.collection_name = 'Best' GROUP BY T1.collection_id ORDER BY count(*) DESC LIMIT 1	cre_Doc_and_collections;
SELECT T1.document_object_id FROM Documents_in_collection AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id = T2.document_object_id JOIN Collections AS T3 ON T1.collection_id = T3.collection_id WHERE T2.document_subset_name = "Best for 2000" AND T3.collection_name = "Best"	cre_Doc_and_collections;
SELECT DISTINCT T1.document_object_id FROM Documents_in_collections AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id = T2.document_object_id JOIN Collections AS T3 ON T1.collection_id = T3.collection_id WHERE T2.document_subset_name = 'Best for 2000' INTERSECT T1.collection_name = 'Best'	cre_Doc_and_collections;
SELECT T1.document_object_id FROM Documents_in_collections AS T1 JOIN Document_subset_members AS T2 ON T1.collection_id = T2.collection_id WHERE T1.collection_name = 'Best' EXCEPT SELECT T1.document_object_id FROM Documents_in_collections AS T1 JOIN Document_subset_members AS T2 ON T1.collection_id = T2.collection_id WHERE T2.document_subset_name = 'Best'	cre_Doc_and_collections;
SELECT DISTINCT T1.document_object_id FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id = T2.document_object_id JOIN Collection_Subsets AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T3.Collection_Name = 'Best' EXCEPT SELECT DISTINCT T2.Collection_object_id FROM Documents_subset_subsets AS T3 ON T2.Collection_	cre_Doc_and_collections;
SELECT T1.document_object_id FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id = T2.document_object_id JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T2.document_subset_name = "Best for 2000" OR T3.collection_name = "Best"	cre_Doc_and_collections;
SELECT DISTINCT T1.document_object_id FROM Documents_in_collections AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id = T2.document_object_id JOIN Collections AS T3 ON T1.collection_id = T3.collection_id WHERE T2.document_subset_name = 'Best for 2000' OR T3.collection_name = 'Best'	cre_Doc_and_collections;
SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best"	cre_Doc_and_collections;
SELECT T2.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best"	cre_Doc_and_collections;
SELECT count(*) FROM Collection_subset_members AS T1 JOIN collections AS T2 ON T1.collection_id = T2.collection_id WHERE T2.collection_name = "Best"	cre_Doc_and_collections;
SELECT count(DISTINCT collection_id) FROM collections WHERE collection_name = 'Best'	cre_Doc_and_collections;
SELECT T2.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T2.Collection_Name = "Best"	cre_Doc_and_collections;
SELECT T2.Collection_Subset_Name FROM Collections AS T1 JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best"	cre_Doc_and_collections;
SELECT count(*) FROM songs WHERE name LIKE "%Love%"	sing_contest;
SELECT name FROM songs ORDER BY name ASC	sing_contest;
SELECT name, language FROM songs	sing_contest;
SELECT max(voice_sound_quality), min(voice_sound_quality) FROM performance_score	sing_contest;
SELECT T2.voice_sound_quality, T2.rhythm_tempo, T2.stage_presence FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T1.name = 'Freeway'	sing_contest;
SELECT id, language, original_artist FROM songs WHERE name!= 'Love'	sing_contest;
SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love'	sing_contest;
SELECT DISTINCT T1.stage_presence FROM performance_score AS T1 JOIN songs AS T2 ON T1.id = T2.song_id WHERE T2.language = 'English'	sing_contest;
SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id HAVING count(*) >= 2	sing_contest;
SELECT T1.id, T1.name, T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id ORDER BY count(*) DESC	sing_contest;
SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T2.voice_sound_quality = 5 UNION SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T2.rhythm_tempo = 5	sing_contest;
SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T2.language = 'English' AND T2.name = 'The Balkan Girls'	sing_contest;
SELECT T2.id, T2.name FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id = T2.id GROUP BY T1.songs_id ORDER BY count(*) DESC LIMIT 1	sing_contest;
SELECT count(*) FROM performance_score WHERE stage_presence  7 OR stage_presence > 9	sing_contest;
SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );	sing_contest;
SELECT avg(rhythm_tempo), language FROM songs GROUP BY language	sing_contest;
SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T3.id = T2.song_id WHERE T3.language = 'English'	sing_contest;
SELECT T2.name, T2.popularity FROM sing_contest AS T1 JOIN participants AS T2 ON T1.participant_id = T2.id JOIN songs AS T3 ON T1.id = T3.id WHERE T3.language = 'Croatian' INTERSECT SELECT T2.name, T2.popularity FROM sing_contest AS T1 JOIN participants AS T2 ON T1.id = T2.id WHERE T3.language =	sing_contest;
SELECT name FROM songs WHERE name LIKE "%Is%"	sing_contest;
SELECT original_artist FROM performance_score WHERE rhythm_tempo > 5 ORDER BY voice_sound_quality DESC	sing_contest;
SELECT count(*) FROM city	address_1;
SELECT count(*) FROM city	address_1;
SELECT DISTINCT state FROM city	address_1;
SELECT DISTINCT state FROM city	address_1;
SELECT count(*) FROM city	address_1;
SELECT count(*) FROM city	address_1;
SELECT city_name, city_code, state, country FROM City	address_1;
SELECT city_name, city_code, state, country FROM city	address_1;
SELECT latitude, longitude FROM city WHERE city_name = 'Baltimore'	address_1;
SELECT latitude, longitude FROM city WHERE city_name = 'Baltimore'	address_1;
SELECT city_name FROM city WHERE state = 'PA'	address_1;
SELECT city_name FROM city WHERE state = 'PA'	address_1;
SELECT count(*) FROM city WHERE country = 'Canada'	address_1;
SELECT count(*) FROM city WHERE country = 'Canada'	address_1;
SELECT city_name FROM city WHERE country = 'USA' ORDER BY latitude	address_1;
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude	address_1;
SELECT state, count(*) FROM city GROUP BY state	address_1;
SELECT count(*), state FROM city GROUP BY state	address_1;
SELECT country, count(*) FROM city GROUP BY country	address_1;
SELECT count(*), country FROM city GROUP BY country	address_1;
SELECT state FROM city GROUP BY state HAVING count(*) >= 2	address_1;
SELECT state FROM city GROUP BY state HAVING count(*) >= 2	address_1;
SELECT state FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1	address_1;
SELECT state FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1	address_1;
SELECT country FROM city GROUP BY country ORDER BY count(*) LIMIT 1	address_1;
SELECT country FROM city GROUP BY country ORDER BY count(*) LIMIT 1	address_1;
SELECT fname, lname FROM Student WHERE state = 'MD'	address_1;
SELECT T2.fname, T2.lname FROM city AS T1 JOIN student AS T2 ON T1.city_code = T2.city_code WHERE T1.state = 'MD'	address_1;
SELECT count(*) FROM Student WHERE city_code = "CHI"	address_1;
SELECT count(*) FROM Student WHERE city_code = "CHI"	address_1;
SELECT DISTINCT T1.fname, T1.major FROM student AS T1 JOIN city AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = 'Baltimore'	address_1;
SELECT DISTINCT T1.fname, T1.major FROM student AS T1 JOIN city AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = 'Baltimore'	address_1;
SELECT count(*), country FROM Student GROUP BY country	address_1;
SELECT count(*), country FROM Student GROUP BY country	address_1;
SELECT count(*), city_code FROM Student GROUP BY city_code	address_1;
SELECT count(*), city_name FROM Student GROUP BY city_code	address_1;
SELECT state FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1	address_1;
SELECT state FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1	address_1;
SELECT country FROM Student GROUP BY country ORDER BY count(*) ASC LIMIT 1	address_1;
SELECT country FROM city GROUP BY country ORDER BY count(*) LIMIT 1	address_1;
SELECT T1.city_name FROM city AS T1 JOIN student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_code HAVING count(*) >= 3	address_1;
SELECT T1.city_name FROM city AS T1 JOIN student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_code HAVING count(*) >= 3	address_1;
SELECT state FROM Student GROUP BY state HAVING count(*) > 5	address_1;
SELECT state FROM city GROUP BY state HAVING count(*) > 5	address_1;
SELECT StuID FROM Student WHERE country!= 'USA'	address_1;
SELECT StuID FROM Student EXCEPT SELECT StuID FROM City WHERE country = 'USA'	address_1;
SELECT StuID FROM Student WHERE sex = 'F' AND state = 'PA'	address_1;
SELECT StuID FROM Student WHERE sex = 'F' AND state = 'PA'	address_1;
SELECT StuID FROM Student WHERE sex = 'M' AND country!= 'USA'	address_1;
SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM City WHERE country = 'USA'	address_1;
SELECT distance FROM city WHERE city_code = "BAL" AND city_code = "CHI"	address_1;
SELECT distance FROM city WHERE city_code = "BAL" AND city_code = "CHI"	address_1;
SELECT distance FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name = 'Boston' AND T2.city_name = 'Newark'	address_1;
SELECT distance FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name = 'Boston' AND T2.city_name = 'Newark'	address_1;
SELECT avg(distance), min(distance), max(distance) FROM city	address_1;
SELECT avg(distance), min(distance), max(distance) FROM city	address_1;
SELECT city_code FROM city ORDER BY distance DESC LIMIT 2	address_1;
SELECT city_code FROM direct_distance ORDER BY distance DESC LIMIT 1	address_1;
SELECT city_code FROM city WHERE distance > (SELECT avg(distance) FROM city)	address_1;
SELECT city_code FROM city WHERE distance > (SELECT avg(distance) FROM city)	address_1;
SELECT city_code FROM city WHERE distance  1000 GROUP BY city_code HAVING count(*) >= 2	address_1;
SELECT city_code FROM city WHERE distance  1000	address_1;
SELECT sum(distance) FROM city WHERE city_code = 'BAL'	address_1;
SELECT sum(distance) FROM city WHERE city_code = "BAL" AND other cities	address_1;
SELECT avg(distance) FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name = 'Baltimore'	address_1;
SELECT avg(distance) FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name = 'Baltimore'	address_1;
SELECT city_name FROM city WHERE city_code = "CHI" GROUP BY city_name ORDER BY distance ASC LIMIT 1	address_1;
SELECT city_name FROM city WHERE city_code = "CHI" GROUP BY city_name ORDER BY distance ASC LIMIT 1	address_1;
SELECT city_name FROM city WHERE city_name = 'Baltimore' ORDER BY distance DESC LIMIT 1	address_1;
SELECT city_name FROM city WHERE city_name = 'Baltimore' ORDER BY distance DESC LIMIT 1	address_1;
SELECT city_code, sum(distance) FROM city	address_1;
SELECT city_code, sum(distance) FROM city GROUP BY city_code	address_1;
SELECT city_name, avg(distance) FROM city GROUP BY city_name	address_1;
SELECT city_name, avg(distance) FROM city GROUP BY city_name	address_1;
SELECT sum(distance) FROM Student WHERE Fname = "Linda" AND Lname = "Smith" INTERSECT SELECT sum(distance) FROM Student WHERE Fname = "Tracy" AND Lname = "Kim"	address_1;
SELECT T1.distance FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code = T2.city_code JOIN student AS T3 ON T3.stuid = T2.stuid WHERE T3.fname = "Linda" AND T3.lname = "Smith" INTERSECT SELECT T1.distance FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code = T2.city_code	address_1;
SELECT T2.fname, T2.lname FROM student AS T1 JOIN direct_distance AS T2 ON T1.stuid = T2.stuid WHERE T1.fname = "Linda" AND T1.lname = "Smith" GROUP BY T2.stuid ORDER BY distance DESC LIMIT 1	address_1;
SELECT T1.fname, T1.lname FROM student AS T1 JOIN direct_distance AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = "Smith" AND T2.distance = (SELECT max(distance) FROM student WHERE lname = "Linda")	address_1;
SELECT T1.state FROM city AS T1 JOIN student AS T2 ON T1.city_code = T2.city_code WHERE T2.fname = "Linda"	address_1;
SELECT T1.state FROM city AS T1 JOIN student AS T2 ON T1.city_code = T2.city_code WHERE T2.fname = "Linda"	address_1;
SELECT * FROM Sailors WHERE age > 30	boat_1;
SELECT DISTINCT name FROM Sailors WHERE age > 30	boat_1;
SELECT name, age FROM Sailors WHERE age  30	boat_1;
SELECT name, age FROM Sailors WHERE age  30	boat_1;
SELECT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T1.id = T3.sid WHERE T1.id = 1	boat_1;
SELECT count(DISTINCT T2.bid) FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.id WHERE T1.id = 1	boat_1;
SELECT name FROM Reserves WHERE bid = 102	boat_1;
SELECT T1.name FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 102	boat_1;
SELECT DISTINCT bid FROM Reserves	boat_1;
SELECT DISTINCT sid FROM Reserves	boat_1;
SELECT name FROM Sailors WHERE name LIKE '%e%'	boat_1;
SELECT name FROM Sailors WHERE name LIKE '%e%'	boat_1;
SELECT DISTINCT sid FROM Sailors WHERE age > (SELECT min(age) FROM Sailors)	boat_1;
SELECT DISTINCT sid FROM Sailors EXCEPT SELECT sid FROM Sailors WHERE age  (SELECT min(age) FROM Sailors)	boat_1;
SELECT DISTINCT name FROM sailors WHERE age > (SELECT min(age) FROM sailors WHERE rating > 7)	boat_1;
SELECT DISTINCT name FROM sailors WHERE age > (SELECT min(age) FROM sailors WHERE rating > 7)	boat_1;
SELECT T1.name, T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.sid HAVING count(*) >= 1	boat_1;
SELECT T1.name, T1.sid FROM sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.sid HAVING count(*) >= 1	boat_1;
SELECT T1.sid, T1.name FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.sid HAVING count(*) > 1	boat_1;
SELECT DISTINCT T1.name FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid GROUP BY T2.sid HAVING count(*) >= 2	boat_1;
SELECT T1.sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color ='red' OR T2.color = 'blue'	boat_1;
SELECT T1.sid FROM sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.color ='red' OR T3.color = 'blue'	boat_1;
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.color ='red' OR T3.color = 'blue'	boat_1;
SELECT T1.name, T1.sid FROM sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.color ='red' OR T3.color = 'blue'	boat_1;
SELECT T1.sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color ='red' INTERSECT SELECT T1.sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = 'blue'	boat_1;
SELECT T1.sid FROM sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.color ='red' INTERSECT SELECT T1.sid FROM sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.color = 'blue'	boat_1;
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.color ='red' INTERSECT SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T3.color = 'blue'	boat_1;
SELECT T1.name, T1.sid FROM sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T3.bid = T2.bid WHERE T3.color ='red' INTERSECT SELECT T1.name, T1.sid FROM sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T3.color = 'blue'	boat_1;
SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves	boat_1;
SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves	boat_1;
SELECT name, sid FROM sailors EXCEPT SELECT T1.name, T1.id FROM sailors AS T1 JOIN reserves AS T2 ON T1.id = T2.sid	boat_1;
SELECT name, sid FROM sailors EXCEPT SELECT T1.name, T1.id FROM sailors AS T1 JOIN reserves AS T2 ON T1.id = T2.sid	boat_1;
SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves	boat_1;
SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves	boat_1;
SELECT T1.name FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 103	boat_1;
SELECT T1.name FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 103	boat_1;
SELECT name FROM sailors WHERE rating > (SELECT max(rating) FROM sailors WHERE name = 'Luis')	boat_1;
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')	boat_1;
SELECT name FROM sailors WHERE rating > (SELECT max(rating) FROM sailors WHERE name = 'Luis')	boat_1;
SELECT name FROM sailors WHERE rating > (SELECT max(rating) FROM sailors WHERE name = 'Luis')	boat_1;
SELECT T1.name, T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid WHERE T1.rating > 2	boat_1;
SELECT T1.name, T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid WHERE T1.rating >= 3	boat_1;
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1	boat_1;
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1	boat_1;
SELECT count(*) FROM Sailors	boat_1;
SELECT count(*) FROM Sailors	boat_1;
SELECT avg(age) FROM Sailors WHERE rating = 7	boat_1;
SELECT avg(age) FROM Sailors WHERE rating = 7	boat_1;
SELECT count(*) FROM Sailors WHERE name LIKE 'D%'	boat_1;
SELECT count(*) FROM Sailors WHERE name LIKE 'D%'	boat_1;
SELECT avg(rating), max(age) FROM Sailors	boat_1;
SELECT avg(rating), max(age) FROM Sailors	boat_1;
SELECT count(*), T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid = T2.bid GROUP BY T1.name	boat_1;
SELECT count(*), T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid = T2.bid GROUP BY T1.name	boat_1;
SELECT count(*), T1.id FROM Reserves AS T1 JOIN Boats AS T2 ON T1.id = T2.bid WHERE T2.id > 50 GROUP BY T1.id	boat_1;
SELECT count(*), T1.id FROM Reserves AS T1 JOIN Boats AS T2 ON T1.id = T2.bid WHERE T2.id > 50 GROUP BY T1.id	boat_1;
SELECT count(*), T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid = T2.bid GROUP BY T1.name HAVING count(*) > 1	boat_1;
SELECT count(*), T1.name FROM Boats AS T1 JOIN Reserves AS T2 ON T1.bid = T2.bid GROUP BY T1.name HAVING count(*) > 1	boat_1;
SELECT count(*), T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid = T2.bid WHERE T2.sid > 1 GROUP BY T1.name	boat_1;
SELECT count(*), T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid = T2.bid WHERE T2.sid > 1 GROUP BY T1.name	boat_1;
SELECT T1.rating, avg(T1.age) FROM sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' GROUP BY T1.rating	boat_1;
SELECT T1.rating, avg(T1.age) FROM sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' GROUP BY T1.rating	boat_1;
SELECT name, rating, age FROM Sailors ORDER BY rating, age	boat_1;
SELECT name, rating, age FROM Sailors ORDER BY rating, age	boat_1;
SELECT count(*) FROM Boats	boat_1;
SELECT count(*) FROM Boats	boat_1;
SELECT count(*) FROM Boats WHERE color = "red"	boat_1;
SELECT count(*) FROM Boats WHERE color ='red'	boat_1;
SELECT T2.name FROM Schema AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.sid WHERE T3.age BETWEEN 20 AND 30	boat_1;
SELECT T2.name FROM Reservations AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T1.sid = T3.sid WHERE T3.age BETWEEN 20 AND 30	boat_1;
SELECT T1.name FROM sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red'	boat_1;
SELECT T1.name FROM sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red'	boat_1;
SELECT rating FROM Sailors GROUP BY rating ORDER BY count(*) DESC LIMIT 1	boat_1;
SELECT max(rating) FROM Sailors	boat_1;
SELECT T1.name FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid JOIN boats AS T3 ON T2.bid = T3.bid WHERE T3.name = 'Melon'	boat_1;
SELECT T1.name FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid = T2.sid JOIN boats AS T3 ON T2.bid = T3.bid WHERE T3.name = 'Melon'	boat_1;
SELECT name, age FROM Sailors ORDER BY rating DESC	boat_1;
SELECT name, age FROM Sailors ORDER BY rating DESC	boat_1;
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1	headphone_store;
SELECT model FROM headphone ORDER BY price DESC LIMIT 1	headphone_store;
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC	headphone_store;
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC	headphone_store;
SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1	headphone_store;
SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1	headphone_store;
SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*) > 2	headphone_store;
SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  2	headphone_store;
SELECT count(*), CLASS FROM headphone WHERE price > 200 GROUP BY CLASS	headphone_store;
SELECT count(*), CLASS FROM headphone WHERE price > 200 GROUP BY CLASS	headphone_store;
SELECT count(DISTINCT earpads) FROM headphone	headphone_store;
SELECT count(DISTINCT earpads) FROM headphone	headphone_store;
SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2	headphone_store;
SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2	headphone_store;
SELECT model, CLASS, construction FROM headphone ORDER BY price LIMIT 1	headphone_store;
SELECT model, CLASS, construction FROM headphone ORDER BY price LIMIT 1	headphone_store;
SELECT Construction, avg(Price) FROM headphone GROUP BY Construction	headphone_store;
SELECT Construction, avg(Price) FROM headphone GROUP BY Construction	headphone_store;
SELECT CLASS FROM headphone WHERE earpads = "Bowls" INTERSECT SELECT CLASS FROM headphone WHERE earpads = "Comfort Pads"	headphone_store;
SELECT CLASS FROM headphone WHERE earpads = "Bowls" INTERSECT SELECT CLASS FROM headphone WHERE earpads = "Comfort Pads"	headphone_store;
SELECT earpads FROM headphone EXCEPT SELECT t1.earpads FROM headphone AS t1 JOIN schema AS t2 ON t1.headphone_id = t2.headphone_id WHERE t1.Construction = "Plastic"	headphone_store;
SELECT earpads FROM headphone EXCEPT SELECT t1.earpads FROM headphone AS t1 JOIN schema AS t2 ON t1.headphone_id = t2.headphone_id WHERE t1.Construction = "Plastic"	headphone_store;
SELECT model FROM headphone WHERE price  (SELECT avg(price) FROM headphone)	headphone_store;
SELECT model FROM headphone WHERE price  (SELECT avg(price) FROM headphone)	headphone_store;
SELECT name FROM store ORDER BY date_opened	headphone_store;
SELECT Name FROM store ORDER BY Date_Opened	headphone_store;
SELECT name, parking FROM store WHERE neighborhood = 'Tarzana'	headphone_store;
SELECT name, parking FROM store WHERE neighborhood = "Tarzana"	headphone_store;
SELECT count(DISTINCT Neighborhood) FROM store	headphone_store;
SELECT count(DISTINCT Neighborhood) FROM store	headphone_store;
SELECT Neighborhood, count(*) FROM store GROUP BY Neighborhood	headphone_store;
SELECT Neighborhood, count(*) FROM store GROUP BY Neighborhood	headphone_store;
SELECT T2.Name, count(*) FROM stock AS T1 JOIN store AS T2 ON T1.Store_ID = T2.Store_ID GROUP BY T1.Store_ID ORDER BY count(*) DESC LIMIT 1	headphone_store;
SELECT T2.name, sum(T1.quantity) FROM stock AS T1 JOIN store AS T2 ON T1.store_id = T2.store_id WHERE T1.headphone_id = T2.headphone_id GROUP BY T1.store_id	headphone_store;
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)	headphone_store;
SELECT name FROM store EXCEPT SELECT T2.name FROM stock AS T1 JOIN store AS T2 ON T1.store_id = T2.store_id JOIN headphone AS T3 ON T1.headphone_id = T3.headphone_id	headphone_store;
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)	headphone_store;
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)	headphone_store;
SELECT T2.Model FROM stock AS T1 JOIN headphone AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T2.Model ORDER BY SUM(T1.quantity) DESC LIMIT 1	headphone_store;
SELECT T2.Model FROM stock AS T1 JOIN headphone AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Model ORDER BY sum(T1.quantity) DESC LIMIT 1	headphone_store;
SELECT count(*) FROM store AS T1 JOIN stock AS T2 ON T1.store_id = T2.store_id WHERE T1.name = "Woodman"	headphone_store;
SELECT sum(T2.quantity) FROM store AS T1 JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Name = "Woodman"	headphone_store;
SELECT DISTINCT Neighborhood FROM store EXCEPT SELECT t2.neighborhood FROM stock AS t1 JOIN store AS t2 ON t1.store_id = t2.store_id	headphone_store;
SELECT Neighborhood FROM store EXCEPT SELECT T2.Neighborhood FROM stock AS T1 JOIN store AS T2 ON T1.Store_ID = T2.Store_ID JOIN headphone AS T3 ON T1.Headphone_ID = T3.Headphone_ID	headphone_store;
SELECT count(*) FROM author	aan_1;
SELECT count(*) FROM author	aan_1;
SELECT count(*) FROM paper	aan_1;
SELECT count(*) FROM paper	aan_1;
SELECT count(*) FROM affiliation	aan_1;
SELECT count(*) FROM affiliation	aan_1;
SELECT count(*) FROM paper WHERE venue = "NAACL" AND YEAR = 2000	aan_1;
SELECT count(*) FROM paper WHERE venue = "NAACL" AND YEAR = 2000	aan_1;
SELECT count(*) FROM paper WHERE YEAR = 2009 AND venue = "Columbia University"	aan_1;
SELECT count(*) FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id JOIN venue AS T3 ON T2.venue = T3.venue WHERE T3.year = 2009 AND T3.venue = "Columbia University"	aan_1;
SELECT name, address FROM affiliation	aan_1;
SELECT name, address FROM affiliation	aan_1;
SELECT venue, YEAR FROM Paper ORDER BY YEAR	aan_1;
SELECT DISTINCT venue FROM Paper ORDER BY YEAR	aan_1;
SELECT T1.title, T2.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id JOIN venue AS T3 ON T2.venue = T3.venue WHERE T3.venue = 'Harvard University'	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id JOIN affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.venue = 'Harvard University'	aan_1;
SELECT T1.title, T2.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id JOIN author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown'	aan_1;
SELECT T1.title, T2.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id JOIN author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown'	aan_1;
SELECT title, paper_id FROM paper WHERE venue = 'Stanford University' INTERSECT SELECT title, paper_id FROM paper WHERE venue = 'Columbia University'	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN affiliation AS T2 ON T1.paper_id = T2.affiliation_id WHERE T2.venue = 'Stanford University' INTERSECT SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T2.af	aan_1;
SELECT T1.title, T2.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id JOIN author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown' AND T3.name = 'Kathleen' INTERSECT SELECT T1.title, T2.paper_id FROM paper AS T1 JOIN author AS T2 ON T1.paper_i	aan_1;
SELECT T1.title, T2.paper_id FROM author_list AS T1 JOIN paper AS T2 ON T1.paper_id = T2.paper_id JOIN author AS T3 ON T1.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen' INTERSECT SELECT T1.title, T2.paper_id FROM author_list AS T1 JOIN paper AS T2 ON T1.paper_id = T2.paper_i	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id = 'Mckeown' EXCEPT SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id = 'Rambow'	aan_1;
SELECT T1.title, T2.paper_id FROM author_list AS T1 JOIN paper AS T2 ON T1.paper_id = T2.paper_id JOIN author AS T3 ON T1.author_id = T3.author_id WHERE T3.name = 'Mckeown' EXCEPT SELECT T1.title, T2.paper_id FROM author_list AS T1 JOIN paper AS T2 ON T1.paper_id = T1.paper_id JOIN author AS T3 ON T1.author_id =	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.name = 'Mckeown' AND T2.name = 'Kathleen' UNION SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.name = 'R	aan_1;
SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.name = 'Mckeown' AND T2.name = 'Kathleen' UNION SELECT T1.title, T1.paper_id FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.name = 'R	aan_1;
SELECT T1.name, count(*) FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC	aan_1;
SELECT T1.name, count(*) FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id ORDER BY count(*)	aan_1;
SELECT T1.name FROM affiliation AS T1 JOIN paper AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) ASC	aan_1;
SELECT T1.name FROM affiliation AS T1 JOIN author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*)	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING count(*) > 50	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING count(*) > 50	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING count(*) = 1	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING count(*) = 1	aan_1;
SELECT venue, YEAR FROM paper GROUP BY venue ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT venue, YEAR FROM paper GROUP BY venue ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1	aan_1;
SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1	aan_1;
SELECT count(*) FROM citation WHERE cited_paper_id = "A00-1002"	aan_1;
SELECT count(DISTINCT cited_paper_id) FROM Citation WHERE paper_id = A00-1002	aan_1;
SELECT count(*) FROM citation WHERE paper_id = D12-1027	aan_1;
SELECT count(*) FROM citation AS T1 JOIN paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.paper_id = "D12-1027"	aan_1;
SELECT T1.paper_id, count(*) FROM paper AS T1 JOIN citation AS T2 ON T1.paper_id = T2.cited_paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT cited_paper_id, count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T1.title FROM paper AS T1 JOIN citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.cited_paper_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T1.title FROM paper AS T1 JOIN citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.cited_paper_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T1.title, count(*) FROM paper AS T1 JOIN citation AS T2 ON T1.paper_id = T2.cited_paper_id GROUP BY T2.cited_paper_id ORDER BY count(*) DESC LIMIT 10	aan_1;
SELECT T1.title, count(*) FROM paper AS T1 JOIN citation AS T2 ON T1.paper_id = T2.cited_paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 10	aan_1;
SELECT count(*) FROM author AS T1 JOIN citation AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckeown' OR T1.name = 'Kathleen'	aan_1;
SELECT count(*) FROM author AS T1 JOIN citation AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckeown' OR T1.name = 'Kathleen'	aan_1;
SELECT count(*) FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckeown' OR T1.name = 'Kathleen'	aan_1;
SELECT count(*) FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id JOIN citation AS T3 ON T3.cited_paper_id = T2.paper_id WHERE T1.name = 'Mckeown' OR T1.name = 'Kathleen'	aan_1;
SELECT T1.name, count(*) FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T1.name, count(*) FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T3.venue, T1.year FROM author_list AS T1 JOIN paper AS T2 ON T1.paper_id = T2.paper_id JOIN author AS T3 ON T1.author_id = T3.author_id WHERE T3.name = 'Mckeown' INTERSECT SELECT T3.venue, T1.year FROM author_list AS T1 JOIN paper AS T2 ON T1.paper_id = T2.paper_id JOIN paper AS T3 ON T1.author_id =	aan_1;
SELECT venue, YEAR FROM Paper WHERE title = 'Mckeown' OR title = 'Kathleen'	aan_1;
SELECT venue, YEAR FROM Paper WHERE title LIKE "%Columbia%"	aan_1;
SELECT venue, YEAR FROM Paper WHERE venue = "Columbia University"	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.year = 2009 GROUP BY T1.author_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.year = 2009 GROUP BY T1.author_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T1.name FROM affiliation AS T1 JOIN paper AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T2.year = 2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3	aan_1;
SELECT T1.name FROM affiliation AS T1 JOIN paper AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T2.year = 2009 GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 3	aan_1;
SELECT count(*) FROM paper WHERE venue = 'Columbia University' AND YEAR = 2009	aan_1;
SELECT count(*) FROM paper AS T1 JOIN citation AS T2 ON T1.paper_id = T2.paper_id JOIN venue AS T3 ON T2.venue = T3.venue WHERE T3.year  2009 AND T2.venue = "Columbia University"	aan_1;
SELECT count(*) FROM paper WHERE venue = 'Stanford University' AND YEAR BETWEEN 2000 AND 2009	aan_1;
SELECT count(*) FROM paper AS T1 JOIN author_list AS T2 ON T1.paper_id = T2.paper_id JOIN venue AS T3 ON T1.venue = T3.venue WHERE T3.year >= 2000 AND T3.year = 2009 AND T3.name = 'Stanford University'	aan_1;
SELECT T2.title FROM author_list AS T1 JOIN paper AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T2.title FROM author_list AS T1 JOIN paper AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT count(*) FROM collaborators AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown' AND T2.name = 'Kathleen'	aan_1;
SELECT count(*) FROM collaborators AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown' AND T2.name = 'Kathleen'	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id JOIN paper AS T3 ON T2.paper_id = T3.paper_id WHERE T1.name = "Mckeown" AND T1.name = "Kathleen" GROUP BY T1.author_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id JOIN paper AS T3 ON T2.paper_id = T3.paper_id WHERE T2.name = 'Mckeown' AND T2.name = 'Kathleen' GROUP BY T1.author_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT paper_id FROM paper WHERE title LIKE '%translation%'	aan_1;
SELECT paper_id FROM paper WHERE title LIKE '%translation%'	aan_1;
SELECT paper_id, title FROM paper EXCEPT SELECT T1.paper_id, T2.title FROM citation AS T1 JOIN paper AS T2 ON T1.paper_id = T2.paper_id	aan_1;
SELECT paper_id, title FROM Paper EXCEPT SELECT T1.paper_id, T2.title FROM citation AS T1 JOIN paper AS T2 ON T1.paper_id = T2.paper_id	aan_1;
SELECT T1.name FROM affiliation AS T1 JOIN paper AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T1.address LIKE '%China%' GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT T1.name FROM affiliation AS T1 JOIN paper AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T1.address LIKE '%China%' GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1	aan_1;
SELECT count(*), venue FROM paper GROUP BY venue	aan_1;
SELECT venue, count(*), YEAR FROM Paper GROUP BY venue	aan_1;
SELECT count(*), T1.name FROM affiliation AS T1 JOIN paper AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id	aan_1;
SELECT T1.name, count(*) FROM affiliation AS T1 JOIN paper AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id	aan_1;
SELECT T1.title FROM paper AS T1 JOIN citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.paper_id HAVING count(*) > 50	aan_1;
SELECT T1.title FROM paper AS T1 JOIN citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.paper_id HAVING count(*) > 50	aan_1;
SELECT count(*) FROM author_list WHERE author_id NOT IN ( SELECT author_id FROM citation WHERE cited_paper_id > 50 )	aan_1;
SELECT count(*) FROM author_list WHERE author_id NOT IN ( SELECT author_id FROM citation WHERE cited_paper_id > 50 )	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id JOIN paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.venue = 'NAACL' AND T3.year = 2009 INTERSECT SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.paper_id WHERE T3.venue = 'NAACL	aan_1;
SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id JOIN paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.venue = 'NAACL' INTERSECT SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id JOIN paper AS T3 ON T2.paper_id =	aan_1;
SELECT name FROM author EXCEPT SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id JOIN paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.venue = 'ACL'	aan_1;
SELECT name FROM author EXCEPT SELECT T1.name FROM author AS T1 JOIN author_list AS T2 ON T1.author_id = T2.author_id JOIN paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.venue = 'ACL'	aan_1;
SELECT count(*) FROM conference	conference;
SELECT count(*) FROM conference	conference;
SELECT DISTINCT Conference_Name FROM conference	conference;
SELECT DISTINCT Conference_Name FROM conference	conference;
SELECT conference_name, YEAR, LOCATION FROM conference	conference;
SELECT conference_name, YEAR, LOCATION FROM conference	conference;
SELECT conference_name, count(*) FROM conference GROUP BY conference_name	conference;
SELECT conference_name, count(*) FROM conference GROUP BY conference_name	conference;
SELECT YEAR, count(*) FROM conference GROUP BY YEAR	conference;
SELECT count(*), YEAR FROM conference GROUP BY YEAR	conference;
SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) ASC LIMIT 1	conference;
SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) ASC LIMIT 1	conference;
SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*) >= 2	conference;
SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*) >= 2	conference;
SELECT institution_name, LOCATION, founded FROM institution	conference;
SELECT institution_name, LOCATION, founded FROM institution	conference;
SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900	conference;
SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900	conference;
SELECT institution_name, LOCATION FROM institution ORDER BY founded DESC LIMIT 1	conference;
SELECT institution_name, LOCATION FROM institution ORDER BY founded DESC LIMIT 1	conference;
SELECT institution_name, count(*) FROM institution WHERE founded > 1800 GROUP BY institution_name	conference;
SELECT T2.name, count(*) FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1800 GROUP BY T1.institution_id	conference;
SELECT institution_name FROM institution EXCEPT SELECT T2.institution_name FROM staff AS T1 JOIN institution AS T2 ON T1.institution_id = T2.institution_id	conference;
SELECT institution_name FROM institution EXCEPT SELECT T1.institution_name FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id = T2.institution_id	conference;
SELECT name FROM staff WHERE age > (SELECT avg(age) FROM staff)	conference;
SELECT name FROM staff WHERE age > (SELECT avg(age) FROM staff)	conference;
SELECT max(age), min(age) FROM staff WHERE Nationality = 'United States'	conference;
SELECT max(age), min(age) FROM staff	conference;
SELECT T3.conference_name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id JOIN conference AS T3 ON T1.conference_id = T3.conference_id WHERE T2.Nationality = 'Canada'	conference;
SELECT T3.conference_name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id JOIN conference AS T3 ON T1.conference_id = T3.conference_id WHERE T2.Nationality = 'Canada'	conference;
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id WHERE T2.role = 'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id WHERE T2.role = 'Sponsor'	conference;
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id WHERE T2.role = 'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id = T2.staff_id WHERE T2.role = 'Sponsor'	conference;
SELECT name FROM staff WHERE conference_name = 'ACL' INTERSECT SELECT name FROM staff WHERE conference_name = 'Naccl'	conference;
SELECT T3.name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id JOIN conference AS T3 ON T1.conference_id = T3.conference_id WHERE T3.conference_name = 'ACL' INTERSECT SELECT T3.name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T3.conference_name = 'NACCL	conference;
SELECT T3.name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id JOIN conference AS T3 ON T1.conference_id = T3.conference_id WHERE T3.year = 2003 OR T3.year = 2004	conference;
SELECT T3.name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id JOIN conference AS T3 ON T1.conference_id = T3.conference_id WHERE T3.year >= 2003 OR T3.year = 2004	conference;
SELECT conference_name, YEAR, count(*) FROM conference_participation GROUP BY conference_name	conference;
SELECT T2.conference_name, T1.year, count(*) FROM conference_participation AS T1 JOIN conference AS T2 ON T1.conference_id = T2.conference_id GROUP BY T1.conference_id	conference;
SELECT conference_name FROM conference_participation ORDER BY number(attendees) DESC LIMIT 2	conference;
SELECT conference_name FROM conference ORDER BY number(attendance) DESC LIMIT 2	conference;
SELECT name, nationality FROM staff EXCEPT SELECT T2.name, T2.nationality FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.conference_name = 'ACL'	conference;
SELECT name, nationality FROM staff EXCEPT SELECT T2.name, T2.nationality FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.conference_name = 'ACL'	conference;
SELECT institution_name, LOCATION FROM institution EXCEPT SELECT T1.institution_name, T1.location FROM institution AS T1 JOIN conference_participation AS T2 ON T1.institution_id = T2.institution_id WHERE T2.year = 2004	conference;
SELECT institution_name, LOCATION FROM institution EXCEPT SELECT T1.institution_name, T1.location FROM institution AS T1 JOIN conference_participation AS T2 ON T1.institution_id = T2.institution_id WHERE T2.year = 2004	conference;
SELECT pilot_name FROM PilotSkills WHERE age = (SELECT max(age) FROM PilotSkills)	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE age = (SELECT max(age) FROM PilotSkills)	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE age  (SELECT avg(age) FROM PilotSkills) ORDER BY age	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE age  (SELECT avg(age) FROM PilotSkills) ORDER BY age ASC	pilot_1;
SELECT * FROM PilotSkills WHERE age  30	pilot_1;
SELECT * FROM PilotSkills WHERE age  30	pilot_1;
SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" AND T1.age  35	pilot_1;
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.age  35 AND T2.plane_name = "Piper Cub"	pilot_1;
SELECT LOCATION FROM Hangar WHERE plane_name = "F-14 Fighter"	pilot_1;
SELECT LOCATION FROM Hangar WHERE plane_name = "F-14 Fighter"	pilot_1;
SELECT count(DISTINCT LOCATION) FROM Hangar	pilot_1;
SELECT count(DISTINCT LOCATION) FROM Hangar	pilot_1;
SELECT plane_name FROM PilotSkills WHERE pilot_name = "Jones" AND age = 32	pilot_1;
SELECT plane_name FROM PilotSkills WHERE pilot_name = "Jones" AND age = 32	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age > 40	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age > 40	pilot_1;
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = "Celko" AND T1.age  35	pilot_1;
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age  35	pilot_1;
SELECT t1.pilot_name FROM PilotSkills AS t1 JOIN Hangar AS t2 ON t1.pilot_name = t2.pilot_name WHERE t2.plane_name = "Piper Cub" ORDER BY t1.age LIMIT 1	pilot_1;
SELECT t1.pilot_name FROM PilotSkills AS t1 JOIN Hangar AS t2 ON t1.plane_name = t2.plane_name WHERE t2.plane_name = "Piper Cub" AND t1.age = (SELECT min(age) FROM PilotSkills WHERE plane_name = "Piper Cub")	pilot_1;
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1	pilot_1;
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1	pilot_1;
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) ASC LIMIT 1	pilot_1;
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) ASC LIMIT 1	pilot_1;
SELECT count(*) FROM PilotSkills WHERE pilot_name IN (SELECT plane_name FROM Hangar WHERE LOCATION = 'Chicago')	pilot_1;
SELECT count(*) FROM PilotSkills WHERE pilot_name IN (SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Chicago')	pilot_1;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41	pilot_1;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41	pilot_1;
SELECT count(DISTINCT plane_name) FROM PilotSkills	pilot_1;
SELECT count(DISTINCT plane_name) FROM PilotSkills	pilot_1;
SELECT count(*) FROM PilotSkills AS T1 JOIN Planes AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = "Smith"	pilot_1;
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name JOIN PilotSkills AS T3 ON T1.pilot_name = T3.pilot_name WHERE T3.pilot_name = 'Smith'	pilot_1;
SELECT count(*) FROM PilotSkills AS T1 JOIN Planes AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name > 40	pilot_1;
SELECT count(*) FROM PilotSkills AS T1 JOIN Planes AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name > 40	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC	pilot_1;
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC	pilot_1;
SELECT pilot_name FROM PilotSkills ORDER BY age DESC	pilot_1;
SELECT pilot_name FROM PilotSkills ORDER BY age DESC	pilot_1;
SELECT LOCATION FROM Hangar ORDER BY plane_name	pilot_1;
SELECT LOCATION FROM Hangar ORDER BY plane_name	pilot_1;
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name	pilot_1;
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age > 40 OR age  30	pilot_1;
SELECT count(*) FROM PilotSkills WHERE age > 40 OR age  30	pilot_1;
SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" AND T1.age > 35 OR T2.plane_name = "F-14 Fighter" AND T1.age  30	pilot_1;
SELECT t1.pilot_name, t1.age FROM PilotSkills AS t1 JOIN Hangar AS t2 ON t1.plane_name = t2.plane_name WHERE t2.plane_name = "Piper Cub" AND t1.age > 35 OR t2.plane_name = "F-14 Fighter" AND t1.age  30	pilot_1;
SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" EXCEPT SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plan_name = "B-52 Bomber"	pilot_1;
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" EXCEPT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "B-52 Bomber"	pilot_1;
SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" INTERSECT SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plan_name = "B-52 Bomber"	pilot_1;
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "B-52 Bomber"	pilot_1;
SELECT avg(age), min(age) FROM PilotSkills	pilot_1;
SELECT avg(age), min(age) FROM PilotSkills	pilot_1;
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Boston'	pilot_1;
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Boston'	pilot_1;
SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" OR T2.plane_name = "F-14 Fighter"	pilot_1;
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = "Piper Cub" OR T2.plane_name = "F-14 Fighter"	pilot_1;
SELECT avg(age), plane_name FROM PilotSkills GROUP BY plane_name	pilot_1;
SELECT avg(age), plane_name FROM PilotSkills GROUP BY plane_name	pilot_1;
SELECT count(*), plane_name FROM PilotSkills GROUP BY plane_name	pilot_1;
SELECT count(*), plane_name FROM PilotSkills GROUP BY plane_name	pilot_1;
SELECT T1.pilot_name, plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name GROUP BY T2.plane_name ORDER BY T2.plane_name	pilot_1;
SELECT plane_name, pilot_name FROM PilotSkills GROUP BY plane_name ORDER BY age DESC	pilot_1;
SELECT T1.pilot_name, plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name GROUP BY T2.plane_name	pilot_1;
SELECT plane_name, age FROM PilotSkills GROUP BY plane_name	pilot_1;
SELECT max(age), pilot_name FROM PilotSkills GROUP BY pilot_name	pilot_1;
SELECT max(age), pilot_name FROM PilotSkills GROUP BY pilot_name	pilot_1;
SELECT count(*), avg(age), LOCATION FROM PilotSkills GROUP BY LOCATION	pilot_1;
SELECT count(*), avg(age), LOCATION FROM Hangar GROUP BY LOCATION	pilot_1;
SELECT count(*), plane_name FROM PilotSkills GROUP BY plane_name HAVING avg(age)  35	pilot_1;
SELECT count(*), T1.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name GROUP BY T1.plane_name HAVING avg(T1.age)  35	pilot_1;
SELECT T2.location FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name ORDER BY T1.age LIMIT 1	pilot_1;
SELECT T2.location FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name JOIN PilotSkills AS T3 ON T1.pilot_name = T3.pilot_name ORDER BY T1.age LIMIT 1	pilot_1;
SELECT DISTINCT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'	pilot_1;
SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'	pilot_1;
SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age > (SELECT min(age) FROM PilotSkills WHERE plane_name = "Piper Cub") ORDER BY T1.pilot_name	pilot_1;
SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name JOIN PilotSkills AS T3 ON T1.pilot_name = T3.pilot_name WHERE T3.age > (SELECT min(age) FROM PilotSkills WHERE plane_name = "Piper Cub") ORDER BY T1.pilot_name	pilot_1;
SELECT count(*) FROM pilot_name WHERE age  (SELECT min(age) FROM pilot_name WHERE plane_name = 'F-14 Fighter')	pilot_1;
SELECT count(*) FROM pilots WHERE age  (SELECT min(age) FROM pilots WHERE plane_name = 'F-14 Fighter')	pilot_1;
SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%'	pilot_1;
SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name LIKE "%Bomber%"	pilot_1;
SELECT count(*) FROM pilot_name WHERE age > (SELECT min(age) FROM pilotSkills WHERE plane_name = "Piper Cub")	pilot_1;
SELECT count(*) FROM pilotSkills WHERE age > (SELECT min(age) FROM PilotSkills WHERE plane_name = "Piper Cub")	pilot_1;
SELECT name FROM district ORDER BY area_km DESC LIMIT 1	district_spokesman;
SELECT Area_km, Government_website FROM district ORDER BY Population ASC LIMIT 1	district_spokesman;
SELECT name, population FROM district WHERE area_km > (SELECT avg(area_km) FROM district)	district_spokesman;
SELECT max(Area_km), avg(Area_km) FROM district	district_spokesman;
SELECT sum(population) FROM district WHERE Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3)	district_spokesman;
SELECT district_id, name, government_website FROM district ORDER BY population	district_spokesman;
SELECT name FROM district WHERE government_website LIKE '%gov%'	district_spokesman;
SELECT name, district_id FROM district WHERE population > 4000 OR area_km > 3000	district_spokesman;
SELECT name, speech_title FROM spokesman	district_spokesman;
SELECT avg(points), avg(age) FROM spokesman WHERE rank_position = 1	district_spokesman;
SELECT name, points FROM spokesman WHERE age  40	district_spokesman;
SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1	district_spokesman;
SELECT name FROM spokesman WHERE points  (SELECT avg(points) FROM spokesman)	district_spokesman;
SELECT T2.name FROM spokesman_district AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T1.district_id ORDER BY count(*) DESC LIMIT 1	district_spokesman;
SELECT T3.Name FROM spokesman_district AS T1 JOIN spokesman AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID JOIN district AS T3 ON T1.District_ID = T3.District_ID WHERE T1.Start_year  2004	district_spokesman;
SELECT count(*), T1.name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.district_id = T2.district_id GROUP BY T1.district_id	district_spokesman;
SELECT T2.name FROM spokesman_district AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.rank_position = 1 INTERSECT SELECT T2.name FROM spokesman_district AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.rank_position = 2	district_spokesman;
SELECT T1.name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.district_id HAVING COUNT(*) > 1	district_spokesman;
SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)	district_spokesman;
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)	district_spokesman;
SELECT sum(population), avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)	district_spokesman;
SELECT title FROM Sculptures ORDER BY YEAR DESC LIMIT 1	art_1;
SELECT title FROM Sculptures ORDER BY YEAR DESC LIMIT 1	art_1;
SELECT title, LOCATION FROM paintings ORDER BY YEAR ASC LIMIT 1	art_1;
SELECT title, LOCATION FROM Paintings ORDER BY YEAR DESC LIMIT 1	art_1;
SELECT title FROM sculptures WHERE LOCATION = 'Gallery 226,'	art_1;
SELECT title FROM Sculptures WHERE LOCATION = "Gallery 226"	art_1;
SELECT title, LOCATION FROM paintings	art_1;
SELECT title, LOCATION FROM Paintings	art_1;
SELECT title, LOCATION FROM Sculptures	art_1;
SELECT title, LOCATION FROM Sculptures	art_1;
SELECT medium FROM paintings WHERE paintingID = 80	art_1;
SELECT medium FROM paintings WHERE paintingID = 80	art_1;
SELECT fname, lname FROM Artists WHERE birthYear > 1850	art_1;
SELECT fname, lname FROM artists WHERE birthYear > 1850	art_1;
SELECT title, YEAR FROM Sculptures WHERE LOCATION!= 'Gallery 226,'	art_1;
SELECT title, year FROM Sculptures WHERE LOCATION!= 'Gallery 226,'	art_1;
SELECT DISTINCT T1.fname, T1.lname FROM artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year  1900	art_1;
SELECT DISTINCT T1.fname, T1.lname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year  1900	art_1;
SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid = T2.sculptorid WHERE T2.year > 1920	art_1;
SELECT DISTINCT T1.birthYear FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920	art_1;
SELECT fname, lname FROM Artists ORDER BY deathYear DESC LIMIT 1	art_1;
SELECT fname, lname FROM artists ORDER BY deathYear DESC LIMIT 1	art_1;
SELECT t1.birthYear FROM artists AS t1 JOIN sculptures AS t2 ON t1.artistid = t2.sculptorid ORDER BY t1.deathYear LIMIT 1	art_1;
SELECT t1.fname, t1.lname FROM artists AS t1 JOIN sculptures AS t2 ON t1.artistid = t2.sculptorid ORDER BY t2.deathYear LIMIT 1	art_1;
SELECT fname, deathYear FROM Artists ORDER BY deathYear DESC LIMIT 1	art_1;
SELECT fname, deathYear FROM Artists ORDER BY deathYear DESC LIMIT 1	art_1;
SELECT count(*) FROM ARTISTS AS T1 JOIN paintings AS T2 ON T1.artistID = T2.paintingID WHERE LOCATION = "Gallery 240"	art_1;
SELECT count(*) FROM ARTISTS AS T1 JOIN paintings AS T2 ON T1.artistID = T2.paintingID WHERE LOCATION = "Gallery 240"	art_1;
SELECT count(*) FROM Artists ORDER BY deathYear DESC LIMIT 1	art_1;
SELECT count(*) FROM Artists ORDER BY deathYear DESC LIMIT 1	art_1;
SELECT T2.title, T2.year FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.artistID WHERE T1.fname = "Mary"	art_1;
SELECT T2.title, T2.year FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.artistID WHERE T1.fname = "Mary"	art_1;
SELECT T2.width_mm FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.artistID WHERE T1.birthYear  1850	art_1;
SELECT max(width_mm) FROM paintings WHERE artistID NOT IN (SELECT artistID FROM Artists WHERE birthYear  1850)	art_1;
SELECT LOCATION, medium FROM ARTISTS WHERE fname = "Pablo"	art_1;
SELECT LOCATION, medium FROM ARTISTS WHERE fname = "Pablo"	art_1;
SELECT T1.fname, T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID JOIN sculptures AS T3 ON T2.sculptorID = T3.sculptorID	art_1;
SELECT T1.fname, T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID JOIN sculptures AS T3 ON T2.sculptorID = T3.sculptorID	art_1;
SELECT T1.fname, T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID WHERE T2.medium = "oil" INTERSECT SELECT T1.fname, T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID WHERE T2.medium = "lithograph"	art_1;
SELECT T2.lname, T2.fname FROM paintings AS T1 JOIN artists AS T2 ON T1.painerID = T2.artistID WHERE T1.medium = "oil" INTERSECT SELECT T2.lname, T2.fname FROM paintings AS T1 JOIN artists AS T2 ON T1.painerID = T2.artistID WHERE T1.medium = "lithograph"	art_1;
SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID WHERE T2.year = 1884 AND T2.medium = "canvas"	art_1;
SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID WHERE T2.year = 1884	art_1;
SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.artistid WHERE T2.medium = "oil" AND T2.location = 241	art_1;
SELECT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID WHERE T2.medium = "oil" AND T2.location = "Gallery 241"	art_1;
SELECT count(*), medium FROM Paintings GROUP BY medium	art_1;
SELECT count(*), medium FROM Paintings GROUP BY medium	art_1;
SELECT avg(height_mm), medium FROM Paintings GROUP BY medium	art_1;
SELECT avg(height_mm), medium FROM Paintings GROUP BY medium	art_1;
SELECT count(*), LOCATION FROM ARTWORK WHERE YEAR  1900 GROUP BY LOCATION	art_1;
SELECT count(*), LOCATION FROM ARTWORK WHERE YEAR  1900 GROUP BY LOCATION	art_1;
SELECT title FROM paintings WHERE YEAR > 1910 AND medium = "oil"	art_1;
SELECT title FROM paintings WHERE medium = 'oil' AND YEAR > 1910	art_1;
SELECT DISTINCT T1.painerID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid = T2.artistid WHERE T2.medium = "oil" AND T2.location = "Gallery 240"	art_1;
SELECT DISTINCT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID WHERE T2.medium = "oil" AND T2.location = "Gallery 240"	art_1;
SELECT DISTINCT title FROM paintings WHERE height_mm > (SELECT min(height_mm) FROM paintings WHERE mediumOn = "canvas")	art_1;
SELECT DISTINCT title FROM paintings WHERE height_mm > (SELECT min(height_mm) FROM paintings WHERE mediumOn = "canvas")	art_1;
SELECT DISTINCT paintingID FROM paintings WHERE YEAR > (SELECT min(YEAR) FROM paintings WHERE LOCATION = "Gallery 240")	art_1;
SELECT DISTINCT paintingID FROM paintings WHERE YEAR > (SELECT min(YEAR) FROM paintings WHERE LOCATION = "Gallery 240")	art_1;
SELECT paintingID FROM Paintings ORDER BY YEAR ASC LIMIT 1	art_1;
SELECT paintingID FROM Paintings ORDER BY YEAR ASC LIMIT 1	art_1;
SELECT T2.fname, T2.lname FROM Sculptures AS T1 JOIN Artists AS T2 ON T1.sculptorID = T2.artistID WHERE T1.title LIKE '%female%'	art_1;
SELECT T1.fname, T1.lname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid = T2.sculptorid WHERE T2.title LIKE '%female%'	art_1;
SELECT DISTINCT title FROM Paintings ORDER BY title	art_1;
SELECT DISTINCT title FROM Paintings ORDER BY title	art_1;
SELECT DISTINCT title FROM paintings ORDER BY height_mm	art_1;
SELECT DISTINCT title FROM paintings ORDER BY height_mm ASC	art_1;
SELECT title FROM paintings AS T1 JOIN sculptures AS T2 ON T1.paintingID = T2.sculptorID WHERE T1.year BETWEEN 1900 AND 1950	art_1;
SELECT title FROM paintings UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950	art_1;
SELECT T1.title, T2.sculptureID FROM paintings AS T1 JOIN sculptures AS T2 ON T1.paintingID = T2.sculptorID WHERE T1.artistID = 222	art_1;
SELECT T1.title FROM paintings AS T1 JOIN sculptures AS T2 ON T1.paintingID = T2.sculptorID WHERE T2.artistID = 222	art_1;
SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID WHERE T2.year  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1	art_1;
SELECT painterID FROM paintings WHERE YEAR  1900 GROUP BY painterID ORDER BY count(*) DESC LIMIT 1	art_1;
SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T2.artistID ORDER BY count(*) DESC LIMIT 1	art_1;
SELECT T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1	art_1;
SELECT title FROM paintings WHERE width_mm  600 OR height_mm > 800	art_1;
SELECT title FROM paintings WHERE width_mm  600 OR height_mm > 800	art_1;
SELECT LOCATION FROM paintings WHERE YEAR  1885 OR YEAR > 1930	art_1;
SELECT LOCATION FROM paintings WHERE YEAR  1885 OR YEAR > 1930	art_1;
SELECT paintingID FROM paintings WHERE height_mm > 500 INTERSECT SELECT paintingID FROM paintings WHERE height_mm  2000	art_1;
SELECT paintingID FROM paintings WHERE height_mm > 500 INTERSECT SELECT paintingID FROM paintings WHERE width_mm  2000	art_1;
SELECT LOCATION FROM paintings WHERE mediumOn = "panel" INTERSECT SELECT LOCATION FROM paintings WHERE mediumOn = "canvas"	art_1;
SELECT LOCATION FROM paintings WHERE mediumOn = "panel" INTERSECT SELECT LOCATION FROM paintings WHERE mediumOn = "canvas"	art_1;
SELECT LOCATION FROM paintings WHERE YEAR  1885 INTERSECT SELECT LOCATION FROM paintings WHERE YEAR > 1930	art_1;
SELECT LOCATION FROM paintings WHERE YEAR  1885 INTERSECT SELECT LOCATION FROM paintings WHERE YEAR > 1930	art_1;
SELECT avg(height_mm), avg(width_mm) FROM paintings WHERE medium = "oil" AND LOCATION = "Gallery 241"	art_1;
SELECT avg(height_mm), avg(width_mm) FROM paintings WHERE medium = "oil" AND LOCATION = "Gallery 241"	art_1;
SELECT max(height_mm), max(paintingID) FROM IMAGES WHERE YEAR  1900	art_1;
SELECT max(height_mm), paintingID FROM Paintings WHERE YEAR  1900	art_1;
SELECT max(height_mm), max(width_mm), YEAR FROM Paintings GROUP BY YEAR	art_1;
SELECT max(height_mm), max(width_mm), YEAR FROM Paintings GROUP BY YEAR	art_1;
SELECT avg(height_mm), avg(width_mm), painterID FROM Paintings GROUP BY painterID ORDER BY name	art_1;
SELECT avg(height_mm), avg(width_mm), artistID FROM paintings GROUP BY artistID ORDER BY lname	art_1;
SELECT T2.fname, count(*) FROM paintings AS T1 JOIN Artists AS T2 ON T1.artistID = T2.artistID GROUP BY T1.artistID HAVING count(*) >= 2	art_1;
SELECT T2.fname, count(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.artistID = T2.artistID GROUP BY T1.artistID HAVING count(*) >= 2	art_1;
SELECT T1.deathYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID GROUP BY T2.artistID HAVING count(*) = 3	art_1;
SELECT t1.deathYear FROM artists AS t1 JOIN paintings AS t2 ON t1.artistid = t2.artistid GROUP BY t1.artistid HAVING count(*)  4	art_1;
SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T2.artistID ORDER BY count(*) LIMIT 1	art_1;
SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) ASC LIMIT 1	art_1;
SELECT paintingID, height_mm FROM paintings WHERE LOCATION = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1	art_1;
SELECT height_mm, paintingID FROM paintings WHERE LOCATION = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1	art_1;
SELECT paintingID FROM Paintings WHERE YEAR  (SELECT min(YEAR) FROM Paintings WHERE LOCATION = "Gallery 240")	art_1;
SELECT paintingID FROM paintings WHERE YEAR  (SELECT min(YEAR) FROM paintings WHERE LOCATION = "Gallery 240")	art_1;
SELECT paintingID FROM paintings WHERE height_mm > (SELECT max(height_mm) FROM paintings WHERE YEAR > 1900)	art_1;
SELECT paintingID FROM paintings WHERE height_mm > (SELECT max(height_mm) FROM paintings WHERE year > 1900)	art_1;
SELECT T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID WHERE T2.medium = "oil" GROUP BY T1.lname ORDER BY count(*) DESC LIMIT 3	art_1;
SELECT T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID WHERE T2.medium = "oil" GROUP BY T2.artistID ORDER BY count(*) DESC LIMIT 1	art_1;
SELECT T1.paintingid, T2.location, T1.title FROM paintings AS T1 JOIN sculptures AS T2 ON T1.paintingid = T2.paintingid WHERE T1.medium = "oil" ORDER BY T1.year	art_1;
SELECT T1.paintingID, T2.location, T1.title FROM paintings AS T1 JOIN drawings AS T2 ON T1.paintingID = T2.paintingID WHERE T1.medium = "oil" ORDER BY T1.year	art_1;
SELECT YEAR, LOCATION, title FROM Paintings WHERE height_mm > 1000 ORDER BY title	art_1;
SELECT YEAR, LOCATION, title FROM paintings WHERE height_mm > 1000 ORDER BY title	art_1;
SELECT DISTINCT T1.fname, T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID EXCEPT SELECT T1.fname, T1.lname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID = T2.sculptorID	art_1;
SELECT DISTINCT t1.fname, t1.lname FROM artists AS t1 JOIN sculptures AS t2 ON t1.artistid = t2.sculptorid EXCEPT SELECT t1.fname, t1.lname FROM artists AS t1 JOIN paintings AS t2 ON t1.artistid = t2.artistid WHERE t2.sculptorid = t2.artistid WHERE t2.artistid	art_1;
SELECT LOCATION FROM paintings WHERE YEAR  1885 EXCEPT SELECT LOCATION FROM paintings WHERE mediumOn = "canvas"	art_1;
SELECT DISTINCT T1.location FROM paintings AS T1 JOIN sculptures AS T2 ON T1.paintingID = T2.paintingID WHERE T2.year  1885 AND T1.medium!= "canvas"	art_1;
SELECT count(*) FROM race	car_road_race;
SELECT count(*) FROM race	car_road_race;
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC	car_road_race;
SELECT winning_driver, winning_team FROM race ORDER BY winning_team	car_road_race;
SELECT t1.winning_driver FROM driver AS t1 JOIN race AS t2 ON t1.driver_id = t2.driver_id WHERE t2.Pole_Position!= "Junior Strous"	car_road_race;
SELECT Winning_driver FROM race WHERE Pole_Position!= "Junior Strous"	car_road_race;
SELECT Constructor FROM driver ORDER BY Age ASC	car_road_race;
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC	car_road_race;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20	car_road_race;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20	car_road_race;
SELECT max(age), min(age) FROM driver	car_road_race;
SELECT max(Age), min(Age) FROM driver	car_road_race;
SELECT count(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age  20	car_road_race;
SELECT count(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age  20	car_road_race;
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC	car_road_race;
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC	car_road_race;
SELECT T1.Driver_Name, T2.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID	car_road_race;
SELECT T1.Driver_Name, T2.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID	car_road_race;
SELECT T2.driver_name, count(*) FROM race AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T1.driver_id	car_road_race;
SELECT T2.driver_name, count(*) FROM race AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T1.driver_id	car_road_race;
SELECT T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id GROUP BY T2.winning_driver ORDER BY count(*) DESC LIMIT 1	car_road_race;
SELECT T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id GROUP BY T2.winning_driver ORDER BY count(*) DESC LIMIT 1	car_road_race;
SELECT T2.driver_name, T2.age FROM race AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T1.driver_id HAVING count(*) >= 2	car_road_race;
SELECT T2.driver_name, T2.age FROM race AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T1.driver_id HAVING count(*) >= 2	car_road_race;
SELECT T2.race_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T1.age >= 26	car_road_race;
SELECT T2.race_name FROM race AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.age >= 26	car_road_race;
SELECT driver_name FROM driver WHERE constructor!= "Bugatti"	car_road_race;
SELECT driver_name FROM driver EXCEPT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id JOIN constructor AS T3 ON T2.constructor = T3.constructor WHERE T3.constructor = "Bugatti"	car_road_race;
SELECT Constructor, count(*) FROM driver GROUP BY Constructor	car_road_race;
SELECT Constructor, count(*) FROM driver GROUP BY Constructor	car_road_race;
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1	car_road_race;
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1	car_road_race;
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2	car_road_race;
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2	car_road_race;
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)	car_road_race;
SELECT driver_name FROM driver EXCEPT SELECT T2.driver_name FROM race AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id	car_road_race;
SELECT Constructor FROM driver WHERE Age  20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30	car_road_race;
SELECT Constructor FROM driver WHERE Age  20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30	car_road_race;
SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*) > 1	car_road_race;
SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*) > 1	car_road_race;
SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.Pole_Position = "James Hinchcliffe" INTERSECT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.Pole_Position = "Carl Skerlong"	car_road_race;
SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.Pole_Position = "James Hinchcliffe" INTERSECT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.Pole_Position = "Carl Skerlong"	car_road_race;
SELECT driver_name FROM driver EXCEPT SELECT T2.driver_name FROM race AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.pole_position = "James Hinchcliffe"	car_road_race;
SELECT driver_name FROM driver EXCEPT SELECT T2.driver_name FROM race AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.pole_position = "James Hinchcliffe"	car_road_race;
SELECT count(*) FROM languages	country_language;
SELECT count(*) FROM languages	country_language;
SELECT name FROM languages ORDER BY name ASC	country_language;
SELECT name FROM languages ORDER BY name	country_language;
SELECT name FROM languages WHERE name LIKE '%ish%'	country_language;
SELECT name FROM languages WHERE name LIKE "%ish%"	country_language;
SELECT name FROM countries ORDER BY overall_score DESC	country_language;
SELECT name FROM countries ORDER BY overall_score DESC	country_language;
SELECT avg(justice_score) FROM countries	country_language;
SELECT avg(justice_score) FROM countries	country_language;
SELECT max(health_score), min(health_score) FROM countries WHERE name!= 'Norway'	country_language;
SELECT max(health_score), min(health_score) FROM countries WHERE name!= 'Norway'	country_language;
SELECT count(DISTINCT language_id) FROM official_languages	country_language;
SELECT count(DISTINCT language_id) FROM official_languages	country_language;
SELECT name FROM countries ORDER BY education_score DESC	country_language;
SELECT name FROM countries ORDER BY education_score DESC	country_language;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1	country_language;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1	country_language;
SELECT T1.name, T2.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id	country_language;
SELECT T1.name, T2.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id	country_language;
SELECT count(*), T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name	country_language;
SELECT T2.name, count(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id GROUP BY T1.language_id	country_language;
SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id JOIN countries AS T3 ON T1.country_id = T3.id GROUP BY T1.language_id ORDER BY count(*) DESC LIMIT 1	country_language;
SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id GROUP BY T1.language_id ORDER BY count(*) DESC LIMIT 1	country_language;
SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id JOIN countries AS T3 ON T1.country_id = T3.id GROUP BY T1.country_id HAVING count(*) >= 2	country_language;
SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id JOIN countries AS T3 ON T1.country_id = T3.id GROUP BY T1.language_id HAVING count(*) >= 2	country_language;
SELECT avg(overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id WHERE T2.name = "English"	country_language;
SELECT avg(overall_score) FROM countries WHERE name = 'English'	country_language;
SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id GROUP BY T1.language_id ORDER BY count(*) DESC LIMIT 3	country_language;
SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id GROUP BY T1.language_id ORDER BY count(*) DESC LIMIT 3	country_language;
SELECT T2.name FROM official_languages AS T1 JOIN countries AS T2 ON T1.country_id = T2.id GROUP BY T2.name ORDER BY avg(overall_score) DESC	country_language;
SELECT T2.name, avg(overall_score) FROM official_languages AS T1 JOIN countries AS T2 ON T1.country_id = T2.id GROUP BY T1.country_id ORDER BY avg(overall_score) DESC	country_language;
SELECT T1.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1	country_language;
SELECT T1.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1	country_language;
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)	country_language;
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)	country_language;
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)	country_language;
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)	country_language;
SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id JOIN countries AS T3 ON T1.country_id = T3.id WHERE T3.overall_score > 95 INTERSECT SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id JOIN countries AS T3 ON T1.id = T2.country_id WHERE T3.overall_score  90	country_language;
SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id JOIN countries AS T3 ON T1.country_id = T3.id WHERE T3.overall_score > 95 INTERSECT SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id JOIN countries AS T3 ON T1.id = T2.country_id WHERE T3.overall_score  90	country_language;
SELECT country, town_city FROM addresses	real_estate_rentals;
SELECT country, town_city FROM addresses	real_estate_rentals;
SELECT T1.county_state_province, T2.address_id FROM Addresses AS T1 JOIN Ref_Property_Types AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id	real_estate_rentals;
SELECT county_state_province FROM addresses	real_estate_rentals;
SELECT feature_description FROM features WHERE feature_name = "rooftop"	real_estate_rentals;
SELECT feature_description FROM features WHERE feature_name = "rooftop"	real_estate_rentals;
SELECT T1.feature_name, T1.feature_description FROM Features AS T1 JOIN Ref_Features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T1.feature_id ORDER BY count(*) DESC LIMIT 1	real_estate_rentals;
SELECT T1.feature_name, T1.feature_description FROM Features AS T1 JOIN Ref_Property_Types AS T2 ON T1.feature_id = T2.feature_id GROUP BY T1.feature_id ORDER BY count(*) DESC LIMIT 1	real_estate_rentals;
SELECT min(room_count) FROM Ref_Room_Types	real_estate_rentals;
SELECT min(room_count) FROM Ref_Room_Types	real_estate_rentals;
SELECT count(*) FROM parking_lots UNION SELECT count(*) FROM garages	real_estate_rentals;
SELECT count(*) FROM PARKING_LOTS UNION SELECT count(*) FROM garages	real_estate_rentals;
SELECT T1.age_category_code FROM Ref_Age_Categories AS T1 JOIN Ref_User_Categories AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.user_category_description LIKE '%Mother%'	real_estate_rentals;
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 JOIN Ref_User_Categories AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.user_category_description LIKE '%Mother%'	real_estate_rentals;
SELECT T1.user_name FROM Users AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code GROUP BY T1.user_category_code ORDER BY count(*) DESC LIMIT 1	real_estate_rentals;
SELECT T1.user_name FROM Users AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code GROUP BY T1.user_category_code ORDER BY count(*) DESC LIMIT 1	real_estate_rentals;
SELECT avg(T2.room_count) FROM features AS T1 JOIN ref_property_types AS T2 ON T1.feature_id = T2.feature_code WHERE T1.feature_name = 'garden'	real_estate_rentals;
SELECT avg(T2.room_size) FROM features AS T1 JOIN Ref_Room_Types AS T2 ON T1.feature_id = T2.feature_code WHERE T1.feature_name = "garden"	real_estate_rentals;
SELECT T1.town_city FROM addresses AS T1 JOIN features AS T2 ON T1.address_id = T2.address_id WHERE T2.feature_name = 'pool'	real_estate_rentals;
SELECT T1.town_city FROM addresses AS T1 JOIN features AS T2 ON T1.address_id = T2.address_id WHERE T2.feature_name ='swimming pool'	real_estate_rentals;
SELECT T1.address_id, T2.price FROM Addresses AS T1 JOIN Ref_Property_Types AS T2 ON T1.address_id = T2.property_id ORDER BY T2.price ASC LIMIT 1	real_estate_rentals;
SELECT T1.address_id, T2.price FROM Addresses AS T1 JOIN Ref_Property_Types AS T2 ON T1.address_id = T2.property_type_code ORDER BY T2.price_request ASC LIMIT 1	real_estate_rentals;
SELECT avg(room_count) FROM Ref_Room_Types	real_estate_rentals;
SELECT avg(room_count) FROM Ref_Room_Types	real_estate_rentals;
SELECT count(*) FROM Ref_room_sizes	real_estate_rentals;
SELECT count(DISTINCT room_size_code) FROM Ref_Room_Types	real_estate_rentals;
SELECT T1.user_id, T2.search_phrase FROM searches AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*) >= 2	real_estate_rentals;
SELECT T1.user_id, T2.search_sequence FROM User_Searches AS T1 JOIN User_Searches AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*) >= 2	real_estate_rentals;
SELECT max(T1.search_date) FROM user AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code ORDER BY T1.search_date DESC LIMIT 1	real_estate_rentals;
SELECT max(date_search) FROM SELECT T1.time FROM searches AS T1 JOIN Ref_Age_Categories AS T2 ON T1.address_id = T2.address_id ORDER BY T1.address_id DESC LIMIT 1	real_estate_rentals;
SELECT T1.search_time, T2.content FROM user_searches AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code ORDER BY T2.content DESC	real_estate_rentals;
SELECT search_string, corresonding_time_stamp FROM user_searches ORDER BY search_string DESC	real_estate_rentals;
SELECT zip_postcode FROM addresses WHERE address_id NOT IN (SELECT address_id FROM Users GROUP BY address_id HAVING count(*) = 2)	real_estate_rentals;
SELECT zip_postcode FROM Addresses EXCEPT SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Ref_Property_Types AS T2 ON T1.address_id = T2.address_id JOIN User_Categories AS T3 ON T2.user_category_code = T3.user_category_code GROUP BY T3.user_category_postcode ORDER BY T1.zip_postcode HAVING count(T1.zip_postcode >= 2	real_estate_rentals;
SELECT T1.user_category_code, T2.user_id FROM Ref_User_Categories AS T1 JOIN User_Categories AS T2 ON T1.user_category_code = T2.user_category_code GROUP BY T2.user_id HAVING count(*) = 1	real_estate_rentals;
SELECT user_id, user_category_code FROM User_Categories GROUP BY user_id HAVING count(*) = 1	real_estate_rentals;
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 JOIN User_Categories AS T2 ON T1.age_category_code = T2.user_category_code ORDER BY T2.search_date ASC LIMIT 1	real_estate_rentals;
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 JOIN User_Categories AS T2 ON T1.age_category_code = T2.user_category_code ORDER BY T2.search_time ASC LIMIT 1	real_estate_rentals;
SELECT login_name FROM Ref_user_categories WHERE user_category_code = "Senior Citizen" ORDER BY login_name	real_estate_rentals;
SELECT login_name FROM Ref_user_categories WHERE user_category_code = 'Senior Citizen' ORDER BY login_name	real_estate_rentals;
SELECT count(*) FROM buyers	real_estate_rentals;
SELECT count(*) FROM MLS AS T1 JOIN Ref_Searches AS T2 ON T1.ref_search_code = T2.ref_search_code JOIN Properties AS T3 ON T1.ref_search_code = T3.ref_search_code JOIN Buyers AS T4 ON T3.ref_search_code = T4.ref_search_code	real_estate_rentals;
SELECT date_register(*) FROM users WHERE login_name = 'ratione'	real_estate_rentals;
SELECT T1.registration_date FROM User AS T1 JOIN User_Categories AS T2 ON T1.user_category_code = T2.user_category_code WHERE T2.login_name = "ratione"	real_estate_rentals;
SELECT T2.firstname, T2.middlename, T2.login_name FROM users AS T1 JOIN user_groups AS T2 ON T1.user_group_id = T2.user_group_id WHERE T1.seller_value = 1	real_estate_rentals;
SELECT name_first, middle, last, login_name FROM users WHERE user_category_code ='seller'	real_estate_rentals;
SELECT T1.line_1_number_building, T1.line_2_number_street, T1.town_city FROM addresses AS T1 JOIN Ref_User_Categories AS T2 ON T1.address_id = T2.address_id WHERE T2.user_category_code = 'Senior Citizen'	real_estate_rentals;
SELECT T1.line_1_number_building, T1.line_2_number_street, T1.town_city FROM addresses AS T1 JOIN Ref_User_Categories AS T2 ON T1.address_id = T2.address_id WHERE T2.user_category_code = 'Senior Citizen'	real_estate_rentals;
SELECT count(*) FROM Ref_property_types JOIN features AS T1 JOIN properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code HAVING count(*) >= 2	real_estate_rentals;
SELECT count(*) FROM Ref_property_types JOIN features AS T1 JOIN properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code HAVING count(*) >= 2	real_estate_rentals;
SELECT count(*), T1.property_id FROM Ref_Photos AS T1 JOIN Properties AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id	real_estate_rentals;
SELECT count(*), T1.feature_id FROM Features AS T1 JOIN Ref_Property_Photos AS T2 ON T1.feature_id = T2.feature_id GROUP BY T1.feature_id	real_estate_rentals;
SELECT T1.user_id, count(*) FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id	real_estate_rentals;
SELECT count(*), T1.user_id FROM users AS T1 JOIN property_photos AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id	real_estate_rentals;
SELECT sum(T1.amount) FROM Ref_property_types AS T1 JOIN Ref_user_categories AS T2 ON T1.user_category_code = T2.user_category_code WHERE T2.user_category_code = 'Single Mother' OR T2.user_category_description = 'Student'	real_estate_rentals;
SELECT sum(T1.price) FROM properties AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code WHERE T2.user_category_code = 'Single Mother' OR T2.user_category_code = 'Student'	real_estate_rentals;
SELECT date_stamp, property_name FROM Property_History ORDER BY date_stamp	real_estate_rentals;
SELECT T1.date_stamp, T2.property_name FROM Property_History AS T1 JOIN Events AS T2 ON T1.event_id = T2.event_id ORDER BY T1.date_stamp	real_estate_rentals;
SELECT T1.property_type_description, T2.property_type_code FROM Ref_Property_Types AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T2.property_type_code ORDER BY count(*) DESC LIMIT 1	real_estate_rentals;
SELECT T1.property_type_description, T2.property_type_code FROM Ref_Property_Types AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T2.property_type_code ORDER BY count(*) DESC LIMIT 1	real_estate_rentals;
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = "Over 60"	real_estate_rentals;
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = "Over 60"	real_estate_rentals;
SELECT count(*), differ(room_size_code) FROM Ref_Room_Types GROUP BY room_size_code	real_estate_rentals;
SELECT count(*), room_size FROM Ref_Room_Types GROUP BY room_size	real_estate_rentals;
SELECT T1.country FROM addresses AS T1 JOIN user_addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.user_name_description = 'Robbie'	real_estate_rentals;
SELECT T2.country FROM user AS T1 JOIN addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.user_name_description = 'Robbie'	real_estate_rentals;
SELECT T1.first_name, T1.middle_name, T1.last_name FROM users AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code JOIN Properties AS T3 ON T2.address_id = T3.address_id	real_estate_rentals;
SELECT T1.user_description FROM Ref_User_Categories AS T1 JOIN User_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code JOIN Ref_Property_Types AS T3 ON T3.property_type_code = T2.property_type_code	real_estate_rentals;
SELECT search_content FROM users WHERE user_category_code NOT IN (SELECT user_category_code FROM Ref_User_Categories WHERE property_type_description = 'flat')	real_estate_rentals;
SELECT keyword_search FROM users WHERE user_category_code NOT IN (SELECT user_category_code FROM Ref_User_Categories)	real_estate_rentals;
SELECT T1.last_name, T1.user_id FROM Users AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code GROUP BY T1.user_id HAVING count(*) >= 2 UNION SELECT T1.last_name, T1.user_id FROM Users AS T1 JOIN Ref_id HAVING count(*) >= 2	real_estate_rentals;
SELECT T1.last_name, T1.user_id FROM Users AS T1 JOIN Searches AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*) = 2 INTERSECT SELECT T1.last_name, T1.user_id FROM Users AS T1 JOIN Property_Locations AS T2 ON T1.user_id HAVING count(*) >= 2	real_estate_rentals;
SELECT count(*) FROM bike WHERE weight > 780	bike_racing;
SELECT product_name, weight FROM bike ORDER BY price ASC	bike_racing;
SELECT heat, name, nation FROM cyclist	bike_racing;
SELECT max(weight), min(weight) FROM bike	bike_racing;
SELECT avg(price) FROM bike WHERE material = 'Carbon CC'	bike_racing;
SELECT name, result FROM cyclist WHERE nation!= 'Russia'	bike_racing;
SELECT DISTINCT T1.id, T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.purchase_year > 2015	bike_racing;
SELECT T1.id, T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id GROUP BY T1.id HAVING count(*) >= 4	bike_racing;
SELECT T1.id, T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1	bike_racing;
SELECT DISTINCT T2.product_name FROM cyclists_own_bikes AS T1 JOIN bike AS T2 ON T1.bike_id = T2.id JOIN cyclist AS T3 ON T1.id = T3.id WHERE T3.nation = 'Russia' OR T3.nation = 'Great Britain'	bike_racing;
SELECT count(DISTINCT heat) FROM cyclist	bike_racing;
SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015 );	bike_racing;
SELECT DISTINCT T2.product_name FROM cyclists_own_bikes AS T1 JOIN bike AS T2 ON T1.bike_id = T2.id WHERE T1.result > '4:21.558'	bike_racing;
SELECT T2.product_name, T2.price FROM cyclists_own_bikes AS T1 JOIN bike AS T2 ON T1.bike_id = T2.id JOIN cyclist AS T3 ON T1.id = T3.id WHERE T3.name = 'Bradley Wiggins' INTERSECT SELECT T2.product_name, T2.price FROM cyclists_own_bikes AS T1 JOIN bike AS T2 ON T1.id = T3.id JOIN bike AS T3	bike_racing;
SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes)	bike_racing;
SELECT product_name FROM bike WHERE material LIKE '%fiber%'	bike_racing;
SELECT count(*), cyclist_id FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY count(*)	bike_racing;
SELECT T1.Flavor, T2.Price FROM goods AS T1 JOIN invoices AS T2 ON T1.Id = T2.CustomerId JOIN cakes AS T3 ON T1.Id = T3.Id ORDER BY T1.Price DESC LIMIT 1	bakery_1;
SELECT id, flavor FROM goods ORDER BY price DESC LIMIT 1	bakery_1;
SELECT T1.Flavor, T1.Price FROM goods AS T1 JOIN receipts AS T2 ON T1.Item = T2.Receipt JOIN goods AS T3 ON T2.Id = T3.Id WHERE T3.Price = (SELECT min(Price) FROM goods)	bakery_1;
SELECT id, flavor FROM goods ORDER BY price ASC LIMIT 1	bakery_1;
SELECT id FROM goods WHERE flavor = 'Apple'	bakery_1;
SELECT id FROM goods WHERE flavor = 'Apple'	bakery_1;
SELECT id FROM goods WHERE price  3	bakery_1;
SELECT id FROM goods WHERE price  3	bakery_1;
SELECT DISTINCT T1.customerid FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid JOIN goods AS T3 ON T2.id = T3.id WHERE T3.Flavor = "Lemon"	bakery_1;
SELECT DISTINCT T1.customerid FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid JOIN goods AS T3 ON T2.id = T3.id WHERE T3.Flavor = "Lemon"	bakery_1;
SELECT count(*), T1.food FROM goods AS T1 JOIN receipts AS T2 ON T1.id = T2.receipt JOIN customers AS T3 ON T2.customerid = T3.id GROUP BY T1.food	bakery_1;
SELECT T2.Flavor, count(*) FROM receipts AS T1 JOIN goods AS T2 ON T1.item = T2.id GROUP BY T2.Food	bakery_1;
SELECT customerid FROM receipts GROUP BY customerid HAVING count(*) >= 15	bakery_1;
SELECT customerid FROM receipts GROUP BY customerid HAVING count(*) >= 15	bakery_1;
SELECT T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.customerid = T2.customerid GROUP BY T1.customerid HAVING count(*) > 10	bakery_1;
SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T1.CustomerId HAVING count(*) > 10	bakery_1;
SELECT count(DISTINCT T1.Flavor) FROM goods AS T1 JOIN customers AS T2 ON T1.Id = T2.customerid WHERE T1.Food = "Cake"	bakery_1;
SELECT count(DISTINCT T1.Flavor) FROM goods AS T1 JOIN customers AS T2 ON T1.Id = T2.CustomerId WHERE T1.Food = "Cake"	bakery_1;
SELECT DISTINCT T2.Flavor FROM goods AS T1 JOIN customers AS T2 ON T1.Id = T2.customerid WHERE T1.Flavor = "Croissant"	bakery_1;
SELECT DISTINCT T2.Flavor FROM goods AS T1 JOIN customers AS T2 ON T1.Id = T2.CustomerId JOIN goods AS T3 ON T1.Id = T3.Id WHERE T3.Flavor = "Crissant"	bakery_1;
SELECT DISTINCT T1.item FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt WHERE T1.customerid = 15	bakery_1;
SELECT DISTINCT T1.Item FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T1.CustomerId = 15	bakery_1;
SELECT Food, avg(Price), max(Price), min(Price) FROM goods GROUP BY Food	bakery_1;
SELECT avg(price), min(price), max(price) FROM goods	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.Food = "Cake" INTERSECT SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.Flavor = "Cookie"	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Item = T2.Item WHERE T2.Food = "Cake" INTERSECT SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Item = T2.Item WHERE T2.Food = "Cookies"	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId = T2.Id WHERE T2.LastName = 'LOGAN' AND T1.Item = 'Croissant'	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId = T2.Id WHERE T2.LastName = "LOGAN" AND T1.Item = "Crispy"	bakery_1;
SELECT T1.ReceiptNumber, T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.ReceiptNumber ORDER BY T2.Price DESC LIMIT 1	bakery_1;
SELECT T1.ReceiptNumber, T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.ReceiptNumber ORDER BY T2.Price DESC LIMIT 1	bakery_1;
SELECT Item FROM receipts GROUP BY Item ORDER BY count(*) ASC LIMIT 1	bakery_1;
SELECT Item FROM receipts GROUP BY Item ORDER BY count(*) ASC LIMIT 1	bakery_1;
SELECT count(*), Food FROM goods GROUP BY Food	bakery_1;
SELECT count(*), Food FROM goods GROUP BY Food	bakery_1;
SELECT Food, avg(Price) FROM goods GROUP BY Food	bakery_1;
SELECT Food, avg(Price) FROM goods GROUP BY Food	bakery_1;
SELECT id FROM goods WHERE flavor = 'Apricot' AND price  5	bakery_1;
SELECT id FROM goods WHERE flavor = 'Apricot' AND price  5	bakery_1;
SELECT T2.Flavor FROM receipts AS T1 JOIN goods AS T2 ON T1.item = T2.id WHERE T1.price > 10	bakery_1;
SELECT Flavor FROM GOODS WHERE Price > 10	bakery_1;
SELECT DISTINCT Id, price FROM goods WHERE price  (SELECT avg(price) FROM goods)	bakery_1;
SELECT DISTINCT T1.id, T1.price FROM goods AS T1 JOIN receipts AS T2 ON T1.id = T2.receipt JOIN prices AS T3 ON T2.price = T3.id WHERE T3.price  (SELECT avg(price) FROM goods)	bakery_1;
SELECT DISTINCT Id FROM goods WHERE Price  (SELECT min(Price) FROM goods WHERE Flavor = "Tart")	bakery_1;
SELECT DISTINCT Id FROM goods WHERE Price  (SELECT min(Price) FROM goods WHERE Food = "Tart")	bakery_1;
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN goods AS T2 ON T1.Receipt = T2.Id WHERE T2.Price > 13	bakery_1;
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN goods AS T2 ON T1.Receipt = T2.Id WHERE T2.Price > 13	bakery_1;
SELECT T1.Date FROM receipts AS T1 JOIN goods AS T2 ON T1.Receipt = T2.Id WHERE T2.Price > 15	bakery_1;
SELECT T1.Date FROM receipts AS T1 JOIN goods AS T2 ON T1.Receipt = T2.Id WHERE T2.Price > 15	bakery_1;
SELECT Id FROM goods WHERE Id LIKE "%APP%"	bakery_1;
SELECT Id FROM goods WHERE Id LIKE "%APP%"	bakery_1;
SELECT Id, Price FROM goods WHERE Id LIKE "%70%"	bakery_1;
SELECT id, price FROM goods WHERE id LIKE "%70%"	bakery_1;
SELECT LastName FROM customers ORDER BY LastName ASC	bakery_1;
SELECT LastName FROM customers ORDER BY LastName ASC	bakery_1;
SELECT Id FROM goods ORDER BY Id ASC	bakery_1;
SELECT DISTINCT Id FROM goods	bakery_1;
SELECT T1.receipt FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt WHERE T2.flavor = "Apple" OR T1.customerid = 12	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt JOIN customers AS T3 ON T1.CustomerId = T3.Id WHERE T2.Flavor = "Apple" OR T3.CustomerId = 12	bakery_1;
SELECT T1.ReceiptNumber, T2.Date FROM receipts AS T1 JOIN invoices AS T2 ON T1.Receipt = T2.ReceiptNumber ORDER BY T1.Date DESC LIMIT 1	bakery_1;
SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Item WHERE T1.Date = (SELECT min(Date) FROM receipts) OR T2.Price > 10	bakery_1;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Item WHERE T2.Price > 10 OR T1.Date  (SELECT min(Date) FROM receipts)	bakery_1;
SELECT id FROM goods WHERE price BETWEEN 3 AND 7	bakery_1;
SELECT Id FROM GOODS WHERE Price BETWEEN 3 AND 7	bakery_1;
SELECT T1.firstname, T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.customerid = T2.customerid ORDER BY T2.date ASC LIMIT 1	bakery_1;
SELECT T1.firstname, T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.customerid = T2.customerid ORDER BY T2.Date ASC LIMIT 1	bakery_1;
SELECT avg(price) FROM goods WHERE flavor = "Blackberry" OR flavor = "Blueberry"	bakery_1;
SELECT avg(price) FROM goods WHERE flavor = "Blackberry" OR flavor = "Blueberry"	bakery_1;
SELECT min(price) FROM goods WHERE flavor = 'Cheese'	bakery_1;
SELECT min(price) FROM goods WHERE flavor = 'Cheese'	bakery_1;
SELECT max(Price), avg(Price), flavor FROM goods GROUP BY flavor ORDER BY price	bakery_1;
SELECT max(Price), min(Price), avg(Price), Flavor FROM goods GROUP BY Flavor ORDER BY Flavor	bakery_1;
SELECT min(price), max(price), Food FROM goods GROUP BY Food ORDER BY Food	bakery_1;
SELECT min(price), max(price), Food FROM goods ORDER BY Food	bakery_1;
SELECT Date FROM receipts GROUP BY Date ORDER BY count(*) DESC LIMIT 3	bakery_1;
SELECT Date FROM receipts GROUP BY Date ORDER BY count(*) DESC LIMIT 3	bakery_1;
SELECT customerid, count(*) FROM receipts GROUP BY customerid ORDER BY count(*) DESC LIMIT 1	bakery_1;
SELECT customerid, count(*) FROM receipts GROUP BY customerid ORDER BY count(*) DESC LIMIT 1	bakery_1;
SELECT count(DISTINCT customerid), date FROM customers GROUP BY date	bakery_1;
SELECT count(*), T1.date FROM receipts AS T1 JOIN customers AS T2 ON T1.customerid = T2.id GROUP BY T1.customerid	bakery_1;
SELECT T1.firstname, T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid JOIN goods AS T3 ON T2.id = T3.id WHERE T3.Flavor = "Apple" AND T3.Price = 11.95 AND T3.Flavor = "Tart"	bakery_1;
SELECT T1.firstname, T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.customerid = T2.customerid JOIN goods AS T3 ON T2.id = T3.id WHERE T3.Flavor = "Apple" AND T3.Price = 11.95	bakery_1;
SELECT id FROM goods WHERE price  (SELECT min(price) FROM goods WHERE food = 'Cookies')	bakery_1;
SELECT id FROM goods WHERE price  (SELECT min(price) FROM goods WHERE food = "Croûte")	bakery_1;
SELECT id FROM goods WHERE price > (SELECT avg(price) FROM goods WHERE food = 'Cake')	bakery_1;
SELECT id FROM goods WHERE price > (SELECT avg(price) FROM goods WHERE food = 'Cake')	bakery_1;
SELECT id FROM goods WHERE price > (SELECT avg(price) FROM goods)	bakery_1;
SELECT id FROM goods WHERE price > 2 (SELECT avg(price) FROM goods)	bakery_1;
SELECT id, flavor, food FROM goods ORDER BY price	bakery_1;
SELECT id, flavor, food FROM goods ORDER BY price	bakery_1;
SELECT Id, Flavor FROM goods WHERE Food = "Cake" ORDER BY Flavor	bakery_1;
SELECT Id, Flavor FROM goods WHERE Food = "Cake" ORDER BY Flavor	bakery_1;
SELECT Item FROM goods WHERE Flavor = "Chocolate" EXCEPT SELECT Item FROM receipts GROUP BY Item HAVING count(*) > 10	bakery_1;
SELECT T1.item FROM receipts AS T1 JOIN goods AS T2 ON T1.item = T2.id WHERE T2.flavor = "Chocolate" GROUP BY T1.item HAVING count(*) = 10	bakery_1;
SELECT Flavor FROM goods WHERE Food = "Cake" EXCEPT SELECT Flavor FROM goods WHERE Food = "Tart"	bakery_1;
SELECT Flavor FROM goods WHERE Food = "Cake" EXCEPT SELECT Flavor FROM goods WHERE Food = "Tart"	bakery_1;
SELECT T1.Flavor FROM goods AS T1 JOIN customers AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id ORDER BY count(*) DESC LIMIT 3	bakery_1;
SELECT Item FROM receipts GROUP BY Item ORDER BY COUNT(*) DESC LIMIT 3	bakery_1;
SELECT customerid FROM receipts WHERE sum(total) > 150	bakery_1;
SELECT customerid FROM receipts WHERE sum(total) > 150	bakery_1;
SELECT customerid, avg(total) FROM receipts GROUP BY customerid HAVING avg(total) > 5	bakery_1;
SELECT customerid FROM receipts GROUP BY customerid HAVING avg(total) > 5	bakery_1;
SELECT T1.Date FROM receipts AS T1 JOIN goods AS T2 ON T1.Receipt = T2.Id GROUP BY T1.ReceiptNumber HAVING sum(T1.Price) > 100	bakery_1;
SELECT T1.Date FROM receipts AS T1 JOIN goods AS T2 ON T1.Receipt = T2.Id WHERE T1.Price > 100	bakery_1;
SELECT count(*) FROM driver	car_racing;
SELECT count(*) FROM driver	car_racing;
SELECT count(*), Make FROM driver WHERE points > 150 GROUP BY Make	car_racing;
SELECT Make, count(*) FROM driver WHERE Points > 150 GROUP BY Make	car_racing;
SELECT avg(Age), Make FROM driver GROUP BY Make	car_racing;
SELECT avg(Age), Make FROM driver GROUP BY Make	car_racing;
SELECT avg(T2.Laps) FROM driver AS T1 JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.age  20	car_racing;
SELECT avg(T2.Laps) FROM driver AS T1 JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.age  20	car_racing;
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner	car_racing;
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner	car_racing;
SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1	car_racing;
SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1	car_racing;
SELECT Make FROM team WHERE Car_Owner = "Buddy Arrington"	car_racing;
SELECT Make FROM team WHERE Car_Owner = "Buddy Arrington"	car_racing;
SELECT max(Points), min(Points) FROM driver	car_racing;
SELECT max(Points), min(Points) FROM driver	car_racing;
SELECT count(*) FROM driver WHERE points  150	car_racing;
SELECT count(*) FROM driver WHERE points  150	car_racing;
SELECT Driver FROM driver ORDER BY Age ASC	car_racing;
SELECT Driver FROM driver ORDER BY Age ASC	car_racing;
SELECT Driver FROM driver ORDER BY Points DESC	car_racing;
SELECT Driver FROM driver ORDER BY Points DESC	car_racing;
SELECT T2.Driver, T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country	car_racing;
SELECT T1.Driver, T2.Country FROM driver AS T1 JOIN country AS T2 ON T1.Country_id = T2.Country	car_racing;
SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = "Dublin"	car_racing;
SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = "Dublin"	car_racing;
SELECT avg(Age) FROM driver WHERE country = "English"	car_racing;
SELECT avg(T1.age) FROM driver AS T1 JOIN country AS T2 ON T1.Country_id = T2.Country WHERE T2.Official_native_language = "English"	car_racing;
SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country WHERE T2.Points > 150	car_racing;
SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country WHERE T2.Points > 150	car_racing;
SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country ORDER BY T2.Points DESC LIMIT 1	car_racing;
SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country ORDER BY T2.Points DESC LIMIT 1	car_racing;
SELECT Make, COUNT(*) FROM driver GROUP BY Make	car_racing;
SELECT Make, COUNT(*) FROM driver GROUP BY Make	car_racing;
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1	car_racing;
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1	car_racing;
SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3	car_racing;
SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3	car_racing;
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)	car_racing;
SELECT Team FROM team EXCEPT SELECT Team FROM team_driver	car_racing;
SELECT T1.country FROM country AS T1 JOIN driver AS T2 ON T1.country_id = T2.country_id WHERE T2.Make = "Dodge" INTERSECT SELECT T1.country FROM country AS T1 JOIN driver AS T2 ON T1.country_id = T2.country_id WHERE T2.Make = "Chevrolet"	car_racing;
SELECT T1.country FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country WHERE T2.Make = "Dodge" INTERSECT SELECT T1.country FROM country AS T1 JOIN driver AS T2 ON T1.Country_id = T2.Country WHERE T2.Make = "Chevrolet"	car_racing;
SELECT sum(Points), avg(Points) FROM driver	car_racing;
SELECT sum(Points), avg(Points) FROM driver	car_racing;
SELECT country FROM country EXCEPT SELECT Country FROM driver	car_racing;
SELECT Country FROM country EXCEPT SELECT Country FROM driver	car_racing;
SELECT T2.Manager, T2.Sponsor FROM team_driver AS T1 JOIN team AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID ORDER BY COUNT(*) DESC LIMIT 1	car_racing;
SELECT T2.Manager, T2.Sponsor FROM team_driver AS T1 JOIN team AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID ORDER BY COUNT(*) DESC LIMIT 1	car_racing;
SELECT T2.Manager, T2.Car_Owner FROM team_driver AS T1 JOIN team AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(*) >= 2	car_racing;
SELECT T2.Manager, T2.Car_Owner FROM team_driver AS T1 JOIN team AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(*) >= 2	car_racing;
SELECT count(*) FROM institution	institution_sports;
SELECT count(*) FROM institution	institution_sports;
SELECT Name FROM institution ORDER BY Name ASC	institution_sports;
SELECT Name FROM institution ORDER BY Name ASC	institution_sports;
SELECT Name FROM institution ORDER BY Founded ASC	institution_sports;
SELECT Name FROM institution ORDER BY Founded	institution_sports;
SELECT city, province FROM institution	institution_sports;
SELECT city, province FROM institution	institution_sports;
SELECT max(Enrollment), min(Enrollment) FROM institution	institution_sports;
SELECT max(Enrollment), min(Enrollment) FROM institution	institution_sports;
SELECT Affiliation FROM institution WHERE City!= "Vancouver"	institution_sports;
SELECT Affiliation FROM institution WHERE City!= "Vancouver"	institution_sports;
SELECT Stadium FROM institution ORDER BY Capacity DESC	institution_sports;
SELECT Stadium FROM institution ORDER BY capacity DESC	institution_sports;
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1	institution_sports;
SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1	institution_sports;
SELECT Name, Nickname FROM institution	institution_sports;
SELECT Name, Nickname FROM institution	institution_sports;
SELECT nickname FROM championship ORDER BY enrollment LIMIT 1	institution_sports;
SELECT Nickname FROM championship ORDER BY Enrollment ASC LIMIT 1	institution_sports;
SELECT T1.Name FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC	institution_sports;
SELECT T1.Name FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC	institution_sports;
SELECT T1.Name FROM institution AS T1 JOIN championship AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T2.Institution_ID HAVING count(*) >= 1	institution_sports;
SELECT T1.Name FROM institution AS T1 JOIN championship AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T2.Institution_ID HAVING COUNT(*) >= 1	institution_sports;
SELECT sum(number_of_championships) FROM institution WHERE affiliation = 'Public'	institution_sports;
SELECT sum(T2.Number_of_Championships) FROM institution AS T1 JOIN championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Affiliation = 'Public'	institution_sports;
SELECT count(*), affiliation FROM institution GROUP BY affiliation	institution_sports;
SELECT count(*), affiliation FROM institution GROUP BY affiliation	institution_sports;
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1	institution_sports;
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1	institution_sports;
SELECT founded FROM institution GROUP BY founded HAVING count(*) > 1	institution_sports;
SELECT founded, count(*) FROM institution GROUP BY founded HAVING count(*) > 1	institution_sports;
SELECT T2.Nickname FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Capacity DESC	institution_sports;
SELECT nickname FROM institution ORDER BY capacity DESC	institution_sports;
SELECT sum(Enrollment) FROM institution WHERE City = '' Vancouver '' OR City = '' Calgary ''	institution_sports;
SELECT Enrollment FROM institution WHERE City = "Vancouver" OR City = "Calgary"	institution_sports;
SELECT Province FROM institution WHERE Founded  1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950	institution_sports;
SELECT Province FROM institution WHERE Founded  1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950	institution_sports;
SELECT count(DISTINCT Province) FROM institution	institution_sports;
SELECT count(DISTINCT Province) FROM institution	institution_sports;
SELECT * FROM warehouses	warehouse_1;
SELECT * FROM warehouses	warehouse_1;
SELECT DISTINCT contents FROM warehouses WHERE LOCATION = 'New York'	warehouse_1;
SELECT DISTINCT contents FROM boxes WHERE LOCATION = 'New York'	warehouse_1;
SELECT contents FROM boxes WHERE value > 150	warehouse_1;
SELECT contents FROM boxes WHERE value > 150	warehouse_1;
SELECT T1.code, avg(T2.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.code GROUP BY T2.code	warehouse_1;
SELECT avg(Value), Warehouse FROM Boxes GROUP BY Warehouse	warehouse_1;
SELECT avg(value), sum(value) FROM boxes	warehouse_1;
SELECT avg(value), sum(value) FROM boxes	warehouse_1;
SELECT avg(capacity), sum(capacity) FROM warehouses	warehouse_1;
SELECT avg(capacity), sum(capacity) FROM warehouses	warehouse_1;
SELECT avg(value), max(value), contents FROM boxes GROUP BY contents	warehouse_1;
SELECT avg(value), max(value), contents FROM boxes GROUP BY contents	warehouse_1;
SELECT contents FROM boxes GROUP BY contents ORDER BY sum(value) DESC LIMIT 1	warehouse_1;
SELECT contents FROM boxes GROUP BY contents ORDER BY sum(value) DESC LIMIT 1	warehouse_1;
SELECT avg(value) FROM boxes	warehouse_1;
SELECT avg(value) FROM boxes	warehouse_1;
SELECT DISTINCT contents FROM boxes	warehouse_1;
SELECT DISTINCT contents FROM boxes	warehouse_1;
SELECT count(DISTINCT contents) FROM boxes	warehouse_1;
SELECT count(DISTINCT contents) FROM boxes	warehouse_1;
SELECT DISTINCT LOCATION FROM warehouses	warehouse_1;
SELECT DISTINCT LOCATION FROM Warehouses	warehouse_1;
SELECT T2.code FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.code WHERE T1.location = 'Chicago' OR T1.location = 'New York'	warehouse_1;
SELECT T2.code FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.code WHERE T1.location = 'Chicago' OR T1.location = 'New York'	warehouse_1;
SELECT sum(T2.Value) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.code WHERE T1.location = 'Chicago' OR T1.location = 'New York'	warehouse_1;
SELECT sum(value) FROM boxes WHERE LOCATION = 'Chicago' OR LOCATION = 'New York'	warehouse_1;
SELECT contents FROM warehouses WHERE LOCATION = 'Chicago' INTERSECT SELECT contents FROM boxes WHERE LOCATION = 'New York'	warehouse_1;
SELECT contents FROM warehouses WHERE LOCATION = 'Chicago' INTERSECT SELECT contents FROM boxes WHERE LOCATION = 'New York'	warehouse_1;
SELECT DISTINCT contents FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.code = T2.warehouse WHERE T2.location = 'New York'	warehouse_1;
SELECT DISTINCT contents FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.code = T2.warehouse WHERE T2.location = 'New York'	warehouse_1;
SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.warehouse WHERE T2.contents = 'Rocks' EXCEPT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.warehouse WHERE T2.contents = 'Scissors'	warehouse_1;
SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.warehouse WHERE T2.contents = "Rocks" EXCEPT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.warehouse WHERE T2.contents = "Scissors"	warehouse_1;
SELECT DISTINCT warehouse FROM boxes WHERE contents = "Rocks" OR contents = "Scissors"	warehouse_1;
SELECT DISTINCT T1.warehouse FROM boxes AS T1 JOIN warehouses AS T2 ON T1.code = T2.warehouse WHERE T1.Contents = "Rocks" OR T1.Contents = "Scissors"	warehouse_1;
SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.code WHERE T2.contents = 'Rocks' INTERSECT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.code WHERE T2.contents = 'Scissors'	warehouse_1;
SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Location = T2.Warehouse WHERE T2.Contents = "Rocks" INTERSECT SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Location = T2.Warehouse WHERE T2.Contents = "Scissors"	warehouse_1;
SELECT code, contents FROM boxes ORDER BY value	warehouse_1;
SELECT code, contents FROM boxes ORDER BY value	warehouse_1;
SELECT code, contents FROM boxes ORDER BY value LIMIT 1	warehouse_1;
SELECT code, contents FROM boxes ORDER BY value LIMIT 1	warehouse_1;
SELECT DISTINCT contents FROM boxes WHERE value > (SELECT avg(value) FROM boxes)	warehouse_1;
SELECT DISTINCT contents FROM boxes WHERE value > (SELECT avg(value) FROM boxes)	warehouse_1;
SELECT DISTINCT contents FROM boxes ORDER BY contents	warehouse_1;
SELECT DISTINCT contents FROM boxes ORDER BY contents	warehouse_1;
SELECT code FROM boxes WHERE value > (SELECT min(value) FROM boxes WHERE contents = 'Rocks')	warehouse_1;
SELECT code FROM boxes WHERE value > (SELECT max(value) FROM boxes WHERE contents = 'Rocks')	warehouse_1;
SELECT code, contents FROM boxes WHERE value > (SELECT max(value) FROM boxes WHERE contents = 'Scissors')	warehouse_1;
SELECT code, contents FROM boxes WHERE value > (SELECT max(value) FROM boxes WHERE contents = 'Scissors')	warehouse_1;
SELECT sum(T2.Value) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.code WHERE T1.capacity = (SELECT max(capacity) FROM warehouses)	warehouse_1;
SELECT sum(T2.Value) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.code WHERE T1.capacity = (SELECT max(capacity) FROM warehouses)	warehouse_1;
SELECT T1.code, avg(T2.Value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T1.Warehouse HAVING avg(T1.Value) > 150	warehouse_1;
SELECT avg(value), warehouse FROM boxes GROUP BY warehouse HAVING avg(value) > 150	warehouse_1;
SELECT sum(value), count(*), contents FROM boxes GROUP BY contents	warehouse_1;
SELECT sum(value), count(*), contents FROM boxes GROUP BY contents	warehouse_1;
SELECT sum(capacity), avg(capacity), max(capacity), LOCATION FROM Warehouses GROUP BY LOCATION	warehouse_1;
SELECT LOCATION, sum(capacity), avg(capacity), max(capacity) FROM Warehouses GROUP BY LOCATION	warehouse_1;
SELECT sum(capacity) FROM warehouses GROUP BY LOCATION	warehouse_1;
SELECT sum(capacity) FROM warehouses	warehouse_1;
SELECT max(T1.Value), T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.code = T2.code GROUP BY T2.location	warehouse_1;
SELECT T2.value, T1.location, max(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.code = T2.code GROUP BY T1.location	warehouse_1;
SELECT warehouse, count(*) FROM boxes GROUP BY warehouse	warehouse_1;
SELECT warehouse, count(*) FROM boxes GROUP BY warehouse	warehouse_1;
SELECT count(DISTINCT LOCATION) FROM Boxes WHERE Contents = "Rocks"	warehouse_1;
SELECT count(DISTINCT warehouse) FROM boxes WHERE contents = 'Rocks'	warehouse_1;
SELECT T1.Code, T3.Location FROM Schema AS T1 JOIN Boxes AS T2 ON T1.Box = T2.Code JOIN Warehouses AS T3 ON T1.Location = T3.Location	warehouse_1;
SELECT T1.code, T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.code = T2.code	warehouse_1;
SELECT T2.code FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.code WHERE T1.location = 'Chicago'	warehouse_1;
SELECT T2.code FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.code WHERE T1.location = 'Chicago'	warehouse_1;
SELECT count(*), T1.warehouse FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse = T2.code GROUP BY T1.warehouse	warehouse_1;
SELECT count(*), T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.code = T2.warehouse GROUP BY T1.code	warehouse_1;
SELECT count(DISTINCT contents), Warehouse FROM Boxes GROUP BY Warehouse	warehouse_1;
SELECT count(DISTINCT contents), Warehouse FROM Boxes GROUP BY Warehouse	warehouse_1;
SELECT code FROM warehouses WHERE capacity > (SELECT max(capacity) FROM warehouses)	warehouse_1;
SELECT DISTINCT warehouse FROM boxes WHERE capacity > (SELECT max(capacity) FROM warehouses)	warehouse_1;
SELECT sum(T2.Value) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code = T2.code WHERE T1.location = 'Chicago'	warehouse_1;
SELECT sum(value) FROM boxes WHERE LOCATION!= 'Chicago'	warehouse_1;
SELECT university_name, city, state FROM university ORDER BY university_name	university_rank;
SELECT university_name, city, state FROM university ORDER BY university_name	university_rank;
SELECT count(*) FROM university WHERE state = 'Illinois' OR state = 'Ohio'	university_rank;
SELECT count(*) FROM university WHERE state = 'Illinois' OR state = 'Ohio'	university_rank;
SELECT max(enrollment), avg(enrollment), min(enrollment) FROM university	university_rank;
SELECT max(enrollment), avg(enrollment), min(enrollment) FROM university	university_rank;
SELECT team_name FROM university WHERE enrollment > (SELECT avg(enrollment) FROM university)	university_rank;
SELECT team_name FROM university WHERE enrollment > (SELECT avg(enrollment) FROM university)	university_rank;
SELECT DISTINCT home_conference FROM university	university_rank;
SELECT DISTINCT home_conference FROM university	university_rank;
SELECT home_conference, count(*) FROM university GROUP BY home_conference	university_rank;
SELECT home_conference, count(*) FROM university GROUP BY home_conference	university_rank;
SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1	university_rank;
SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1	university_rank;
SELECT home_conference FROM university GROUP BY home_conference HAVING avg(enrollment) > 2000	university_rank;
SELECT home_conference FROM university GROUP BY home_conference HAVING avg(enrollment) > 2000	university_rank;
SELECT home_conference FROM university GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1	university_rank;
SELECT home_conference FROM university ORDER BY enrollment LIMIT 1	university_rank;
SELECT major_name, major_code FROM major ORDER BY major_code	university_rank;
SELECT major_name, major_code FROM major ORDER BY major_code	university_rank;
SELECT T1.major_name, T2.rank FROM university AS T1 JOIN major_ranking AS T2 ON T1.university_id = T2.university_id WHERE T1.University_Name = "Augustana College"	university_rank;
SELECT T1.rank, T1.major_name FROM major AS T1 JOIN university AS T2 ON T1.university_id = T2.university_id WHERE T2.university_name = 'Augustana College'	university_rank;
SELECT T1.university_name, T1.city, T1.state FROM university AS T1 JOIN major_ranking AS T2 ON T1.university_id = T2.university_id WHERE T2.major_name = 'Accounting' AND T2.rank = 1	university_rank;
SELECT T1.university_name, T1.city, T1.state FROM university AS T1 JOIN major_ranking AS T2 ON T1.university_id = T2.university_id WHERE T2.major_name = 'Accounting' ORDER BY T2.rank DESC LIMIT 1	university_rank;
SELECT T1.university_name FROM university AS T1 JOIN major_ranking AS T2 ON T1.university_id = T2.university_id WHERE T2.rank = 1 GROUP BY T1.university_id ORDER BY count(*) DESC LIMIT 1	university_rank;
SELECT T1.university_name FROM university AS T1 JOIN major_ranking AS T2 ON T1.university_id = T2.university_id WHERE T2.rank = 1 GROUP BY T1.university_id ORDER BY count(*) DESC LIMIT 1	university_rank;
SELECT university_name FROM university EXCEPT SELECT T1.university_name FROM university AS T1 JOIN major_ranking AS T2 ON T1.university_id = T2.university_id WHERE T2.rank = 1	university_rank;
SELECT university_name FROM university EXCEPT SELECT T1.university_name FROM university AS T1 JOIN major_ranking AS T2 ON T1.university_id = T2.university_id WHERE T2.rank = 1	university_rank;
SELECT T1.university_name FROM university AS T1 JOIN major AS T2 ON T1.university_id = T2.university_id WHERE T2.major_name = 'Accounting' INTERSECT SELECT T1.university_name FROM university AS T1 JOIN major AS T2 ON T1.university_id = T2.university_id WHERE T2.major_name = 'Urban Education'	university_rank;
SELECT T1.university_name FROM university AS T1 JOIN major AS T2 ON T1.university_id = T2.university_id WHERE T2.major_name = 'Accounting' INTERSECT SELECT T1.university_name FROM university AS T1 JOIN major_ranking AS T2 ON T1.university_id = T2.university_id WHERE T2.major_name = 'Ur Education'	university_rank;
SELECT university_name, overall_ranking FROM university WHERE state = 'Wisconsin'	university_rank;
SELECT university_name, rank FROM university WHERE state = 'Wisconsin'	university_rank;
SELECT university_name FROM university ORDER BY research_point DESC LIMIT 1	university_rank;
SELECT T1.university_name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.university_id = T2.university_id GROUP BY T2.university_id ORDER BY sum(T2.research_point) DESC LIMIT 1	university_rank;
SELECT university_name FROM university ORDER BY reputation_point ASC	university_rank;
SELECT university_name FROM university ORDER BY reputation_point ASC	university_rank;
SELECT T1.university_name FROM university AS T1 JOIN major_ranking AS T2 ON T1.university_id = T2.university_id WHERE T2.major_name = 'Accounting' OR T2.rank >= 3	university_rank;
SELECT T1.university_name FROM university AS T1 JOIN major_ranking AS T2 ON T1.university_id = T2.university_id WHERE T2.major_name = 'Accounting' OR T2.rank >= 3	university_rank;
SELECT sum(Enrollment) FROM university WHERE overall_ranking = 5	university_rank;
SELECT sum(Enrollment) FROM university WHERE rank = 5	university_rank;
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Reputation_point >= 3	university_rank;
SELECT T1.university_name, T1.citation_point FROM university AS T1 JOIN overall_ranking AS T2 ON T1.university_id = T2.university_id ORDER BY T2.reputation_point DESC LIMIT 3	university_rank;
SELECT state FROM university WHERE enrollment  3000 GROUP BY state HAVING count(*) > 2	university_rank;
SELECT state FROM university WHERE enrollment  3000 GROUP BY state HAVING count(*) > 2	university_rank;
SELECT Title FROM Movies WHERE Rating = "Null"	movie_2;
SELECT Title FROM Movies EXCEPT SELECT Title FROM Movies WHERE Rating = 'Null'	movie_2;
SELECT Title FROM Movies WHERE Rating = 'G'	movie_2;
SELECT Title FROM Movies WHERE Rating = 'G'	movie_2;
SELECT T1.title FROM movies AS T1 JOIN MovieTheaters AS T2 ON T1.code = T2.movie WHERE T2.name = 'Odeon'	movie_2;
SELECT T1.title FROM movies AS T1 JOIN MovieTheaters AS T2 ON T1.code = T2.movie WHERE T2.name = 'Odeon'	movie_2;
SELECT T1.Title, T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Name = T2.Code	movie_2;
SELECT T1.Title, T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Name = T2.Code	movie_2;
SELECT count(*) FROM Movies WHERE Rating = 'G'	movie_2;
SELECT count(*) FROM Movies WHERE Rating = 'G'	movie_2;
SELECT count(*) FROM MovieTheaters	movie_2;
SELECT count(*) FROM MovieTheaters	movie_2;
SELECT count(DISTINCT T1.Name) FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code	movie_2;
SELECT count(DISTINCT T1.title) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie	movie_2;
SELECT count(DISTINCT name) FROM MovieTheaters	movie_2;
SELECT count(DISTINCT name) FROM MovieTheaters	movie_2;
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'	movie_2;
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'	movie_2;
SELECT T2.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.rating = 'G' OR T2.rating = 'PG'	movie_2;
SELECT T2.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.rating = 'G' OR T2.rating = 'PG'	movie_2;
SELECT T1.title FROM movies AS T1 JOIN MovieTheaters AS T2 ON T1.code = T2.movie WHERE T2.name = 'Odeon' OR T2.name = 'Imperial'	movie_2;
SELECT T1.title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.name = 'Odeon' OR T2.name = 'Imperial'	movie_2;
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Odeon' INTERSECT SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Imperial'	movie_2;
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Odeon' INTERSECT SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Imperial'	movie_2;
SELECT DISTINCT title FROM Movies EXCEPT SELECT T1.title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie AND T2.Name = T2.Name WHERE T2.name = 'Odeon'	movie_2;
SELECT DISTINCT title FROM Movies EXCEPT SELECT T1.title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie AND T2.Name = T2.Name WHERE T2.name = 'Odeon'	movie_2;
SELECT Title FROM Movies ORDER BY Title	movie_2;
SELECT Title FROM Movies ORDER BY Title	movie_2;
SELECT Title FROM Movies ORDER BY Rating	movie_2;
SELECT title FROM Movies ORDER BY rating	movie_2;
SELECT T2.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1	movie_2;
SELECT T2.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1	movie_2;
SELECT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1	movie_2;
SELECT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1	movie_2;
SELECT Rating, count(*) FROM Movies GROUP BY Rating	movie_2;
SELECT Rating, count(*) FROM Movies GROUP BY Rating	movie_2;
SELECT count(*) FROM Movies WHERE Rating!= "null"	movie_2;
SELECT count(*) FROM Movies WHERE Rating!= "null"	movie_2;
SELECT T2.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Name HAVING count(*) >= 1	movie_2;
SELECT T2.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Name HAVING count(*) >= 1	movie_2;
SELECT Name FROM MovieTheaters WHERE Movie NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie = 'Null')	movie_2;
SELECT Name FROM MovieTheaters WHERE Movie = 'Null'	movie_2;
SELECT T2.name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie (1, T2.Code WHERE T1.Rating = 'G')	movie_2;
SELECT T2.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.rating = 'G'	movie_2;
SELECT Title FROM Movies	movie_2;
SELECT DISTINCT title FROM Movies	movie_2;
SELECT DISTINCT Rating FROM Movies	movie_2;
SELECT DISTINCT Rating FROM Movies	movie_2;
SELECT * FROM Movies WHERE Rating = "Null"	movie_2;
SELECT * FROM Movies WHERE Rating = "Null"	movie_2;
SELECT Title FROM Movies EXCEPT SELECT T1.title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie	movie_2;
SELECT Title FROM Movies EXCEPT SELECT T1.title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie	movie_2;
SELECT Recipient FROM Package WHERE Weight = (SELECT max(weight) FROM package)	planet_1;
SELECT T1.Name FROM client AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Recipient ORDER BY T2.Weight DESC LIMIT 1	planet_1;
SELECT sum(T2.weight) FROM account AS T1 JOIN shipment AS T2 ON T1.shipment = T2.shipmentid JOIN client AS T3 ON T1.customer = T3.AccountNumber WHERE T3.name = "Leo Wong"	planet_1;
SELECT sum(T2.weight) FROM has_clearance AS T1 JOIN package AS T2 ON T1.shipment = T2.shipmentid JOIN client AS T3 ON T1.client = T3.AccountNumber WHERE T3.name = 'Leo Wong'	planet_1;
SELECT POSITION FROM Employee WHERE Name = "Amy Wong"	planet_1;
SELECT POSITION FROM Employee WHERE Name = "Amy Wong"	planet_1;
SELECT Salary, POSITION FROM Employee WHERE Name = "Turanga Leela"	planet_1;
SELECT salary, POSITION FROM Employee WHERE name = 'Turanga Leela'	planet_1;
SELECT avg(Salary) FROM Employee WHERE POSITION = 'Intern'	planet_1;
SELECT avg(Salary) FROM Employee WHERE Position = 'Intern'	planet_1;
SELECT LEVEL FROM Employee WHERE POSITION = 'Physician'	planet_1;
SELECT T2.Level FROM employee AS T1 JOIN has_clearance AS T2 ON T1.Employee = T2.EmployeeID WHERE T1.Position = "Physician"	planet_1;
SELECT T2.PackageNumber FROM Has_clearance AS T1 JOIN Shipment AS T2 ON T1.Planet = T2.PlanetID JOIN Client AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = "Leo Wong"	planet_1;
SELECT count(*) FROM package AS T1 JOIN has_clearance AS T2 ON T1.shipment = T2.shipmentid JOIN client AS T3 ON T2.client = T3.AccountNumber WHERE T3.name = 'Leo Wong'	planet_1;
SELECT T2.packagenumber FROM has_clearance AS T1 JOIN package AS T2 ON T1.shipment = T2.shipmentid JOIN client AS T3 ON T1.client = T3.AccountNumber WHERE T3.name = 'Leo Wong'	planet_1;
SELECT T2.packagenumber FROM has_clearance AS T1 JOIN package AS T2 ON T1.shipment = T2.shipmentid JOIN client AS T3 ON T1.client = T3.AccountNumber WHERE T3.name = 'Leo Wong'	planet_1;
SELECT T1.Name FROM Client AS T1 JOIN Shipment AS T2 ON T1.AccountNumber = T2.Sender JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T1.Name = "Leo Wong"	planet_1;
SELECT count(DISTINCT T2.packagenumber) FROM client AS T1 JOIN shipment AS T2 ON T1.AccountNumber = T2.Sender JOIN planet AS T3 ON T2.Planet = T3.PlanetID WHERE T1.Name = "Leo Wong"	planet_1;
SELECT count(*) FROM client AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = "Ogden Wernstrom" AND T2.Name = "Leo Wong"	planet_1;
SELECT count(*) FROM shipment AS T1 JOIN client AS T2 ON T1.client = T2.AccountNumber WHERE T2.name = "Ogden Wernstrom" AND T1.name = "Leo Wong"	planet_1;
SELECT T1.Contents FROM package AS T1 JOIN employee AS T2 ON T1.Sender = T2.EmployeeID WHERE T2.Name = "John Zoidfarb"	planet_1;
SELECT T2.Contents FROM employee AS T1 JOIN package AS T2 ON T1.Employee = T2.Sender WHERE T1.Name = "John Zoidfarb"	planet_1;
SELECT T2.packagenumber, T2.weight FROM client AS T1 JOIN package AS T2 ON T1.accountnumber = T2.shipmentid WHERE T1.name LIKE '%John%'	planet_1;
SELECT T2.packagenumber, T2.weight FROM client AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.name = "John" OR something similar	planet_1;
SELECT packagenumber, weight FROM package ORDER BY weight LIMIT 3	planet_1;
SELECT packagenumber, weight FROM package ORDER BY weight LIMIT 3	planet_1;
SELECT T1.Name, COUNT(*) FROM client AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T2.Sender ORDER BY count(*) DESC LIMIT 1	planet_1;
SELECT T1.Name, COUNT(*) FROM client AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1	planet_1;
SELECT T1.Name, count(*) FROM client AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T2.Recipient ORDER BY count(*) ASC LIMIT 1	planet_1;
SELECT Recipient, count(*) FROM package GROUP BY Recipient ORDER BY count(*) ASC LIMIT 1	planet_1;
SELECT T1.Name FROM client AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T2.Sender HAVING COUNT(*) > 1	planet_1;
SELECT T1.Name FROM client AS T1 JOIN package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name HAVING COUNT(*) > 1	planet_1;
SELECT Coordinates FROM planet WHERE name = 'Mars'	planet_1;
SELECT coordinates FROM planet WHERE name = 'Mars'	planet_1;
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC	planet_1;
SELECT name, coordinates FROM planet ORDER BY name	planet_1;
SELECT T2.shipmentid FROM employee AS T1 JOIN shipment AS T2 ON T1.employeeid = T2.manager WHERE T1.name = "Phillip J. Fry"	planet_1;
SELECT T2.shipmentid FROM employee AS T1 JOIN shipment AS T2 ON T1.employeeid = T2.manager WHERE T1.name = "Phillip J. Fry"	planet_1;
SELECT Date FROM Shipment	planet_1;
SELECT Date FROM shipment	planet_1;
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = 'Mars'	planet_1;
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = 'Mars'	planet_1;
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = 'Mars' AND T1.manager = 'Turanga Leela'	planet_1;
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = 'Turanga Leela'	planet_1;
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = 'Mars' UNION SELECT T1.shipmentid FROM shipment AS T1 JOIN employee AS T2 ON T1.manager = T2.employeeid WHERE T2.name = 'Turanga Leela'	planet_1;
SELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid JOIN employee AS T3 ON T1.manager = T3.employeeid WHERE T2.name = "Turanga Leela" AND T2.name = "Mars"	planet_1;
SELECT T2.name, sum(T1.shipment) FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetID GROUP BY T1.planet	planet_1;
SELECT count(*), T1.name FROM planet AS T1 JOIN shipment AS T2 ON T1.planet = T2.planetID GROUP BY T1.name	planet_1;
SELECT T2.name FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetID GROUP BY T1.planetID ORDER BY count(*) DESC LIMIT 1	planet_1;
SELECT T2.name FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetID GROUP BY T1.planetID ORDER BY count(*) DESC LIMIT 1	planet_1;
SELECT T2.Name, COUNT(*) FROM shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager	planet_1;
SELECT count(*), T1.name FROM employee AS T1 JOIN shipment AS T2 ON T1.employeeid = T2.manager GROUP BY T1.manager	planet_1;
SELECT sum(T2.weight) FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = 'Mars'	planet_1;
SELECT sum(T2.weight) FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetid WHERE T2.name = 'Mars'	planet_1;
SELECT sum(weight), planet FROM shipment GROUP BY planet	planet_1;
SELECT sum(weight), T1.name FROM planet AS T1 JOIN package AS T2 ON T1.planet = T2.planetID GROUP BY T1.name	planet_1;
SELECT T2.name FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetID GROUP BY T1.planetID HAVING sum(T1.weight) > 30	planet_1;
SELECT T1.Name FROM Planet AS T1 JOIN Shipment AS T2 ON T1.Planet = T2.PlanetID GROUP BY T2.Planet HAVING sum(T2.weight) > 30	planet_1;
SELECT T2.packagenumber FROM has_clearance AS T1 JOIN package AS T2 ON T1.shipment = T2.shipmentid JOIN planet AS T3 ON T1.planet = T3.planetid WHERE T3.name = 'Zapp Brannigan' AND T3.name = 'Omicron Persei 8'	planet_1;
SELECT count(*) FROM client AS T1 JOIN shipment AS T2 ON T1.AccountNumber = T2.Sender JOIN planet AS T3 ON T3.Planet = T2.PlanetID WHERE T1.Name = "Zapp Brannigan" AND T3.Name = "Omicron Persei 8"	planet_1;
SELECT T1.packagenumber FROM package AS T1 JOIN shipment AS T2 ON T1.shipment = T2.shipmentid JOIN planet AS T3 ON T2.planet = T3.planetid WHERE T3.name = 'Omicron Persei 8' UNION SELECT T1.packagenumber FROM package AS T1 JOIN shipment AS T2 ON T1.shipmentid = T2.shipmentid WHERE T3.name = 'Zapp Brannigan	planet_1;
SELECT count(*) FROM shipment AS T1 JOIN planet AS T2 ON T1.planet = T2.planetID WHERE T2.name = "Omicron Persei 8" UNION SELECT count(*) FROM package AS T1 JOIN client AS T2 ON T1.client = T2.name WHERE T2.name = "Zapp Brannigan"	planet_1;
SELECT packagenumber, weight FROM package WHERE weight BETWEEN 10 AND 30	planet_1;
SELECT packagenumber, weight FROM package WHERE weight BETWEEN 10 AND 30	planet_1;
SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid = T2.employeeid JOIN planet AS T3 ON T2.planet = T3.planetid WHERE T3.name = 'Mars'	planet_1;
SELECT name FROM employee EXCEPT SELECT T2.name FROM has_clearance AS T1 JOIN planet AS T2 ON T1.planet = T2.planetID WHERE T2.name = 'Mars'	planet_1;
SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid = T2.employeeid JOIN planet AS T3 ON T3.planet = T2.planetid WHERE T3.name = "Omega III"	planet_1;
SELECT T1.Name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T3.Planet = T2.PlanetID WHERE T3.Name = "Omega III"	planet_1;
SELECT T1.name FROM planet AS T1 JOIN has_clearance AS T2 ON T1.planet = T2.planetID GROUP BY T2.planetID HAVING count(*) = 1	planet_1;
SELECT T2.name FROM has_clearance AS T1 JOIN planet AS T2 ON T1.planet = T2.planetID GROUP BY T1.planetID HAVING count(*) = 1	planet_1;
SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000	planet_1;
SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000	planet_1;
SELECT name FROM employee WHERE salary > (SELECT avg(salary) FROM employee) OR salary > 5000	planet_1;
SELECT name FROM employee WHERE salary > (SELECT avg(salary) FROM employee) OR salary > 5000	planet_1;
SELECT count(*) FROM employee WHERE employeeID NOT IN (SELECT employee FROM Has_clearance WHERE planet = 'Mars')	planet_1;
SELECT count(*) FROM employee WHERE employeeid NOT IN (SELECT employee FROM Has_clearance WHERE planet = 'Mars')	planet_1;
SELECT count(*) FROM game	video_game;
SELECT count(*) FROM game	video_game;
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC	video_game;
SELECT title, developers FROM game ORDER BY units_sold_Millions DESC	video_game;
SELECT avg(Units_sold_Millions) FROM game WHERE Developers!= "Nintendo"	video_game;
SELECT avg(Units_sold_Millions) FROM game WHERE Developers!= "Nintendo"	video_game;
SELECT platform_name, market_district FROM platform	video_game;
SELECT platform_name, market_district FROM platform	video_game;
SELECT platform_name, platform_id FROM platform WHERE download_rank = 1	video_game;
SELECT platform_name, platform_id FROM platform WHERE download_rank = 1	video_game;
SELECT max(Rank_of_the_year), min(Rank_of_the_year) FROM player	video_game;
SELECT max(rank_of_the_year), min(rank_of_the_year) FROM player	video_game;
SELECT count(*) FROM player WHERE rank_of_the_year  3	video_game;
SELECT count(*) FROM player WHERE rank_of_the_year = 3	video_game;
SELECT Player_name FROM player ORDER BY Player_name ASC	video_game;
SELECT Player_name FROM player ORDER BY Player_name	video_game;
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC	video_game;
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC	video_game;
SELECT T1.player_name, T1.rank_of_the_year FROM player AS T1 JOIN game_player AS T2 ON T1.game_id = T2.game_id WHERE T2.Title = "Super Mario World"	video_game;
SELECT T1.player_name, T1.rank_of_the_year FROM player AS T1 JOIN game_player AS T2 ON T1.game_id = T2.game_id WHERE T2.Title = "Super Mario World"	video_game;
SELECT DISTINCT T1.Developers FROM game AS T1 JOIN player AS T2 ON T1.Game_ID = T2.Game_ID WHERE T2.College = "Auburn"	video_game;
SELECT DISTINCT T1.Developers FROM game AS T1 JOIN player AS T2 ON T1.Game_ID = T2.Game_ID WHERE T2.College = "Auburn"	video_game;
SELECT avg(Units_sold_Millions) FROM player WHERE POSITION = "Guard"	video_game;
SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN player AS T2 ON T1.Game_ID = T2.Game_ID WHERE T2.Position = "Guard"	video_game;
SELECT T1.title, T2.platform_name FROM game AS T1 JOIN platform AS T2 ON T1.platform_id = T2.platform_id	video_game;
SELECT T1.title, T2.platform_name FROM game AS T1 JOIN platform AS T2 ON T1.platform_id = T2.platform_id	video_game;
SELECT T1.title FROM game AS T1 JOIN platform AS T2 ON T1.platform_id = T2.platform_id WHERE T2.market_district = 'Asia' OR T2.market_district = 'USA'	video_game;
SELECT T2.title FROM platform AS T1 JOIN game AS T2 ON T1.platform_id = T2.platform_id WHERE T1.market_district = 'Asia' OR T1.market_district = 'USA'	video_game;
SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise	video_game;
SELECT Franchise, count(*) FROM game GROUP BY Franchise	video_game;
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1	video_game;
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1	video_game;
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2	video_game;
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2	video_game;
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)	video_game;
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)	video_game;
SELECT T2.Title FROM game_player AS T1 JOIN game AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T3.College = "Oklahoma" INTERSECT SELECT T2.Title FROM game_player AS T1 JOIN player AS T2 ON T1.Game_ID = T2.Game_ID JOIN game AS T3 ON T1.Player_ID =	video_game;
SELECT T2.Title FROM player AS T1 JOIN game AS T2 ON T1.Game_ID = T2.Game_ID WHERE T1.College = "Oklahoma" OR T1.College = "Auburn"	video_game;
SELECT DISTINCT Franchise FROM game	video_game;
SELECT DISTINCT Franchise FROM game	video_game;
SELECT Title FROM game EXCEPT SELECT T2.title FROM game_player AS T1 JOIN player AS T2 ON T1.game_id = T2.game_id WHERE T2.Position = "Guard"	video_game;
SELECT Title FROM game EXCEPT SELECT T2.title FROM game_player AS T1 JOIN player AS T2 ON T1.game_id = T2.game_id WHERE T2.Position = "Guard"	video_game;
SELECT name FROM press ORDER BY year_profits_billion DESC	book_press;
SELECT name FROM press ORDER BY year_profits_billion DESC	book_press;
SELECT name FROM press WHERE month_profits_billion > 1 INTERSECT SELECT name FROM press WHERE year_profits_billion > 15 billion OR month_profits_billion > 1	book_press;
SELECT name FROM press WHERE year_profits_billion > 15 billion OR month_profits_billion > 1 billion	book_press;
SELECT avg(Year_Profits_billion), max(Year_Profits_billion) FROM press	book_press;
SELECT avg(Year_Profits_billion), max(Year_Profits_billion) FROM press	book_press;
SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1	book_press;
SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1	book_press;
SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1	book_press;
SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1	book_press;
SELECT count(*) FROM author WHERE age  30	book_press;
SELECT count(*) FROM author WHERE age  30	book_press;
SELECT avg(Age), gender FROM author GROUP BY gender	book_press;
SELECT avg(age), gender FROM author GROUP BY gender	book_press;
SELECT count(*), gender FROM author WHERE age > 30 GROUP BY gender	book_press;
SELECT count(*), gender FROM author WHERE age > 30 GROUP BY gender	book_press;
SELECT title FROM book ORDER BY release_date DESC	book_press;
SELECT title FROM book ORDER BY release_date DESC	book_press;
SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series	book_press;
SELECT count(*), book_series FROM book GROUP BY book_series	book_press;
SELECT title, publish_date FROM book ORDER BY sale_amount DESC LIMIT 5	book_press;
SELECT title, release_date FROM book ORDER BY sale_amount DESC LIMIT 5	book_press;
SELECT book_series FROM book WHERE sale_amount > 1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  500	book_press;
SELECT book_series FROM book WHERE sale_amount > 1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  500	book_press;
SELECT T2.name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.author_id WHERE T1.Book_Series = "MM" INTERSECT SELECT T2.name FROM book AS T1 JOIN author AS T2 ON T1.Author_id = T2.author_id WHERE T1.Book_Series = "LT"	book_press;
SELECT T2.name FROM book AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T1.book_series = "MM" INTERSECT SELECT T2.name FROM book AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T1.book_series = "LT"	book_press;
SELECT name, age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)	book_press;
SELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM book)	book_press;
SELECT T2.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID HAVING COUNT(*) > 1	book_press;
SELECT T2.name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.author_id GROUP BY T1.Author_id HAVING COUNT(*) > 1	book_press;
SELECT T1.title, T1.author_name, T2.name FROM book AS T1 JOIN press AS T2 ON T1.press_id = T2.press_id ORDER BY T1.Sale_Amount DESC LIMIT 3	book_press;
SELECT T1.title, T2.name, T3.name FROM book AS T1 JOIN press AS T2 ON T1.press_id = T2.press_id JOIN author AS T3 ON T1.author_id = T3.author_id ORDER BY T1.sale_amount DESC LIMIT 3	book_press;
SELECT T2.name, sum(T1.sale_amount) FROM book AS T1 JOIN press AS T2 ON T1.press_id = T2.press_id GROUP BY T1.press_id	book_press;
SELECT T2.name, sum(T1.sale_amount) FROM book AS T1 JOIN press AS T2 ON T1.press_id = T2.press_id GROUP BY T1.press_id	book_press;
SELECT count(*), T2.name FROM book AS T1 JOIN press AS T2 ON T1.press_id = T2.press_id WHERE T1.sale_amount > 1000 GROUP BY T2.press_id	book_press;
SELECT T2.name, count(*) FROM book AS T1 JOIN press AS T2 ON T1.press_id = T2.press_id WHERE T1.sale_amount > 1000 GROUP BY T1.press_id	book_press;
SELECT T2.name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.author_id ORDER BY T1.Sale_Amount DESC LIMIT 1	book_press;
SELECT T2.name FROM book AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id ORDER BY T1.sale_amount DESC LIMIT 1	book_press;
SELECT T2.name, T2.gender FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.author_id GROUP BY T1.Author_id ORDER BY COUNT(*) DESC LIMIT 1	book_press;
SELECT T2.name, T2.gender FROM book AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC LIMIT 1	book_press;
SELECT name FROM author EXCEPT SELECT T2.name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.author_id JOIN press AS T3 ON T1.Press_ID = T3.Press_ID WHERE T3.Name = "Accor"	book_press;
SELECT name FROM author EXCEPT SELECT T2.name FROM press AS T1 JOIN book AS T2 ON T1.press_id = T2.press_id WHERE T1.name = "Accor"	book_press;
SELECT T2.name, T1.year_profits_billion FROM book AS T1 JOIN press AS T2 ON T1.press_id = T2.press_id GROUP BY T1.press_id HAVING count(*) > 2	book_press;
SELECT T2.name, T1.year_profits_billion FROM book AS T1 JOIN press AS T2 ON T1.press_id = T2.press_id GROUP BY T1.press_id HAVING count(*) > 2	book_press;
SELECT count(*) FROM Authors	cre_Doc_Workflow;
SELECT author_name FROM Authors	cre_Doc_Workflow;
SELECT author_name, other_details FROM Authors	cre_Doc_Workflow;
SELECT other_details FROM Authors WHERE author_name = "Addison Denesik"	cre_Doc_Workflow;
SELECT count(*) FROM Documents	cre_Doc_Workflow;
SELECT author_name FROM Documents WHERE document_id = 4	cre_Doc_Workflow;
SELECT author_name FROM Documents WHERE document_name = "Travel to Brazil"	cre_Doc_Workflow;
SELECT count(*) FROM Documents WHERE author_name = "Era Kerluke"	cre_Doc_Workflow;
SELECT document_name, document_description FROM Documents	cre_Doc_Workflow;
SELECT document_id, document_name FROM Documents WHERE author_name = "Bianka Cummings"	cre_Doc_Workflow;
SELECT T1.author_name, T1.other_details FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name = T2.author_name WHERE T2.document_name = "Travel to China"	cre_Doc_Workflow;
SELECT author_name, count(*) FROM Documents GROUP BY author_name	cre_Doc_Workflow;
SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1	cre_Doc_Workflow;
SELECT T2.author_name FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name = T2.author_name GROUP BY T2.author_name HAVING count(*) >= 2	cre_Doc_Workflow;
SELECT count(*) FROM Business_Processes	cre_Doc_Workflow;
SELECT process_id, process_name, process_description FROM Process WHERE process_id = 9	cre_Doc_Workflow;
SELECT T2.process_name FROM Processes AS T1 JOIN Process_Outcomes AS T2 ON T1.process_outcome_code = T2.process_outcome_code WHERE T1.process_id = 9	cre_Doc_Workflow;
SELECT count(*) FROM process_outcomes	cre_Doc_Workflow;
SELECT process_outcome_code, process_outcome_description FROM Process_outcomes	cre_Doc_Workflow;
SELECT process_outcome_description FROM process_outcomes WHERE process_outcome_code = "working"	cre_Doc_Workflow;
SELECT count(*) FROM process_status	cre_Doc_Workflow;
SELECT process_status_code, process_status_description FROM Process_Status	cre_Doc_Workflow;
SELECT process_status_description FROM Process_Status WHERE process_status_code = "ct"	cre_Doc_Workflow;
SELECT count(*) FROM Staff	cre_Doc_Workflow;
SELECT staff_id, staff_details FROM Staff	cre_Doc_Workflow;
SELECT staff_details FROM Staff WHERE staff_id = 100	cre_Doc_Workflow;
SELECT count(*) FROM Ref_staff_roles	cre_Doc_Workflow;
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles	cre_Doc_Workflow;
SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = "HR"	cre_Doc_Workflow;
SELECT count(*) FROM Documents AS T1 JOIN Processes AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id	cre_Doc_Workflow;
SELECT process_id FROM Documents	cre_Doc_Workflow;
SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Processes	cre_Doc_Workflow;
SELECT process_id FROM Processes EXCEPT SELECT process_id FROM Documents	cre_Doc_Workflow;
SELECT T1.process_outcome_description, T2.process_status_description FROM Process_outcomes AS T1 JOIN Process_status AS T2 ON T1.process_outcome_code = T2.process_outcome_code WHERE T1.document_id = 0	cre_Doc_Workflow;
SELECT T2.process_name FROM Documents AS T1 JOIN Process_Outcomes AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = "Travel to Brazil"	cre_Doc_Workflow;
SELECT count(*), T1.process_id FROM Documents AS T1 JOIN Processes AS T2 ON T1.process_id = T2.process_id GROUP BY T1.process_id	cre_Doc_Workflow;
SELECT count(*) FROM Documents WHERE document_id = 0 INTERSECT SELECT count(*) FROM Processes WHERE process_id = 9	cre_Doc_Workflow;
SELECT count(*), staff_id FROM Documents GROUP BY staff_id	cre_Doc_Workflow;
SELECT staff_role_code, count(*) FROM Documents GROUP BY staff_role_code	cre_Doc_Workflow;
SELECT count(DISTINCT staff_role_description) FROM Ref_Staff_Roles WHERE staff_id = 3	cre_Doc_Workflow;
SELECT count(*) FROM agencies	advertising_agencies;
SELECT count(*) FROM agencies	advertising_agencies;
SELECT agency_id, agency_details FROM Agencies	advertising_agencies;
SELECT agency_id, agency_details FROM Agencies	advertising_agencies;
SELECT count(*) FROM clients	advertising_agencies;
SELECT count(*) FROM clients	advertising_agencies;
SELECT client_id, client_details FROM Clients	advertising_agencies;
SELECT client_id, client_details FROM Clients	advertising_agencies;
SELECT agency_id, count(*) FROM Clients GROUP BY agency_id	advertising_agencies;
SELECT T2.agency_id, count(*) FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id GROUP BY T2.agency_id	advertising_agencies;
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id HAVING count(*) >= 2	advertising_agencies;
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id HAVING count(*) >= 2	advertising_agencies;
SELECT T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = 'Mac'	advertising_agencies;
SELECT T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = "Mac"	advertising_agencies;
SELECT T1.client_details, T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.client_id = T2.client_id	advertising_agencies;
SELECT T1.client_details, T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.client_id = T2.client_id	advertising_agencies;
SELECT sic_code, count(*) FROM clients GROUP BY sic_code	advertising_agencies;
SELECT sic_code, count(*) FROM clients GROUP BY sic_code	advertising_agencies;
SELECT client_id, client_details FROM clients WHERE sic_code = "Bad"	advertising_agencies;
SELECT client_ideas, client_details FROM Clients WHERE sic_code = 'Bad'	advertising_agencies;
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id	advertising_agencies;
SELECT T1.agency_id, T1.agency_details FROM agencies AS T1 JOIN clients AS T2 ON T1.agency_id = T2.agency_id	advertising_agencies;
SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients	advertising_agencies;
SELECT agency_id FROM agencies EXCEPT SELECT agency_id FROM clients	advertising_agencies;
SELECT count(*) FROM invoices	advertising_agencies;
SELECT count(*) FROM invoices	advertising_agencies;
SELECT invoice_id, invoice_status, invoice_details FROM invoices AS T1 JOIN clients AS T2 ON T1.client_id = T2.client_id	advertising_agencies;
SELECT invoice_id, invoice_status, invoice_details FROM invoices	advertising_agencies;
SELECT client_id, count(*) FROM invoices GROUP BY client_id	advertising_agencies;
SELECT client_id, count(*) FROM invoices GROUP BY client_id	advertising_agencies;
SELECT T1.client_id, T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT T1.client_id, T1.client_details FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT T1.client_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id HAVING count(*) >= 2	advertising_agencies;
SELECT T1.client_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id HAVING count(*) >= 2	advertising_agencies;
SELECT invoice_status, count(*) FROM invoices GROUP BY invoice_status	advertising_agencies;
SELECT invoice_status, count(*) FROM invoices GROUP BY invoice_status	advertising_agencies;
SELECT invoice_status FROM invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT invoice_status FROM invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT invoice_status, invoice_details, client_id, agency_id FROM invoices WHERE invoice_status = "Working"	advertising_agencies;
SELECT T1.invoice_status, T1.invoice_details, T2.client_id, T1.agency_id FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id	advertising_agencies;
SELECT meeting_type, other_details FROM Meetings	advertising_agencies;
SELECT meeting_type, other_details FROM Meetings	advertising_agencies;
SELECT meeting_outcome, purpose_of_meeting FROM Meetings	advertising_agencies;
SELECT meeting_outcome, purpose_of_meeting FROM Meetings	advertising_agencies;
SELECT payment_id, invoice_details FROM invoices WHERE invoice_status = 'Working'	advertising_agencies;
SELECT payment_id, payment_details FROM invoices WHERE invoice_status = "Working"	advertising_agencies;
SELECT invoice_id, invoice_status FROM invoices EXCEPT SELECT T1.invoice_id, T1.invoice_status FROM invoices AS T1 JOIN payments AS T2 ON T1.invoice_id = T2.invoice_id	advertising_agencies;
SELECT invoice_id, invoice_status FROM invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM payment)	advertising_agencies;
SELECT count(*) FROM payments	advertising_agencies;
SELECT count(*) FROM payments	advertising_agencies;
SELECT payment_id, invoice_id, invoice_details FROM invoices	advertising_agencies;
SELECT payment_id, invoice_id, payment_details FROM payments	advertising_agencies;
SELECT DISTINCT invoice_id, invoice_status FROM payments	advertising_agencies;
SELECT DISTINCT invoice_id, invoice_status FROM Payments	advertising_agencies;
SELECT invoice_id, count(*) FROM Payments GROUP BY invoice_id	advertising_agencies;
SELECT invoice_id, count(*) FROM payments GROUP BY invoice_id	advertising_agencies;
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM invoices AS T1 JOIN payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM invoices AS T1 JOIN payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT count(*) FROM staff	advertising_agencies;
SELECT count(*) FROM staff	advertising_agencies;
SELECT agency_id, count(*) FROM Staff GROUP BY agency_id	advertising_agencies;
SELECT agency_id, count(*) FROM Staff GROUP BY agency_id	advertising_agencies;
SELECT T1.agency_id, T1.staff_details FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies;
SELECT meeting_outcome, count(*) FROM Meetings GROUP BY meeting_outcome	advertising_agencies;
SELECT meeting_outcome, count(*) FROM Meetings GROUP BY meeting_outcome	advertising_agencies;
SELECT client_id, count(*) FROM meetings GROUP BY client_id	advertising_agencies;
SELECT client_id, count(*) FROM Meetings GROUP BY client_id	advertising_agencies;
SELECT meeting_type, count(*) FROM Meetings GROUP BY client_id	advertising_agencies;
SELECT meeting_type, count(*) FROM Meetings GROUP BY meeting_type	advertising_agencies;
SELECT meeting_id, meeting_outcome, meeting_type, other_details FROM Meetings UNION SELECT T1.meeting_id, T1.meeting_outcome, T1.meeting_type, T1.client_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id	advertising_agencies;
SELECT meeting_id, meeting_outcome, meeting_type, other_details FROM meetings	advertising_agencies;
SELECT meeting_id, count(*) FROM Staff GROUP BY meeting_id	advertising_agencies;
SELECT count(*), meeting_id FROM Meetings GROUP BY meeting_id	advertising_agencies;
SELECT count(*), T1.staff_id FROM staff AS T1 JOIN meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1	advertising_agencies;
SELECT T1.staff_id FROM staff AS T1 JOIN meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1	advertising_agencies;
SELECT count(*) FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id = T2.staff_id WHERE T2.purpose_of_meeting = 'get proposal done'	advertising_agencies;
SELECT count(DISTINCT staff_id) FROM Attendance	advertising_agencies;
SELECT count(*) FROM staff WHERE staff_id NOT IN ( SELECT staff_id FROM Meetings )	advertising_agencies;
SELECT count(*) FROM staff WHERE staff_id NOT IN ( SELECT staff_id FROM Meetings )	advertising_agencies;
SELECT T1.client_id, T1.client_details FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id = T2.client_id JOIN invoices AS T3 ON T2.invoice_id = T3.invoice_id	advertising_agencies;
SELECT T1.client_id, T1.client_details FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id = T2.client_id ORDER BY T2.attendance DESC LIMIT 1	advertising_agencies;
SELECT T1.staff_id, T1.staff_details FROM staff AS T1 JOIN meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id HAVING count(*) >= 1 AND T1.staff_details LIKE '%s%'	advertising_agencies;
SELECT T1.staff_id, T1.staff_details FROM staff AS T1 JOIN meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id HAVING count(*) >= 1 AND T1.staff_details LIKE "%s%"	advertising_agencies;
SELECT T1.client_id, T1.sic_code, T2.client_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id = T2.client_id JOIN meetings AS T3 ON T2.client_id = T3.client_id GROUP BY T1.client_id HAVING count(*) = 1 INTERSECT SELECT T1.client_id JOIN invoices AS T2 ON T1.client_id	advertising_agencies;
SELECT T1.client_id, T1.sic_code, T2.client_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id = T2.client_id JOIN invoices AS T3 ON T1.client_id = T3.client_id GROUP BY T1.client_id HAVING count(*) = 1 INTERSECT SELECT T1.client_id JOIN invoices AS T2 ON T1.client_id	advertising_agencies;
SELECT T1.start_date_time, T1.end_date_time, T3.client_details, T2.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Staff AS T3 ON T1.staff_id = T3.staff_id	advertising_agencies;
SELECT T1.start_date_time, T1.end_date_time, T3.client_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Staff AS T3 ON T1.staff_id = T3.staff_id	advertising_agencies;
